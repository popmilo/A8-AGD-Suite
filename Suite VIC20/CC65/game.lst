ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "z80-zp.inc"
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2               
000025r 2  xx xx        dvar:	.res 2
000027r 2               
000027r 2  xx           dispx:	.res 1			; cursor x position.
000028r 2  xx           dispy:	.res 1			; cursor y position.
000029r 2               
000029r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
00002Ar 2  xx           joyval:	.res 1			; joystick reading.
00002Br 2  xx           frmno:	.res 1			; selected frame.
00002Cr 2               
00002Cr 2               ;----------------------------------------------------
00002Cr 2               ; Missing vars
00002Cr 2               ;----------------------------------------------------
00002Cr 2               
00002Cr 2  xx           loopa:	    .res 1
00002Dr 2  xx           loopb:	    .res 1
00002Er 2  xx           loopc:	    .res 1
00002Fr 2  xx xx        FontPtr:    .res 2
000031r 2               
000031r 2               ; Local vars
000031r 2               
000031r 2  xx xx        scraddr:    .res 2
000033r 2  xx xx        fntaddr:    .res 2
000035r 2  xx xx        tileaddr:   .res 2
000037r 2  xx xx        bufaddr:    .res 2
000039r 2  xx xx        advbuff:    .res 2
00003Br 2               
00003Br 2  xx xx        tmp:        .res 2
00003Dr 2  xx xx        scr_l:      .res 2
00003Fr 2  xx xx        scr_r:      .res 2
000041r 2  xx xx        scr_txt:    .res 2
000043r 2               
000043r 2  xx           xtmp:	    .res 1
000044r 2  xx           ytmp:	    .res 1
000045r 2  xx           spcnt:	    .res 1
000046r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000048r 2  xx           seed:	    .res 1		; seed for random numbers.
000049r 2               
000049r 2  xx           ccnt:       .res 1
00004Ar 2  xx           flag:	    .res 1
00004Br 2               
00004Br 2  xx           rcol:	    .res 1
00004Cr 2  xx           rrow:	    .res 1
00004Dr 2               
00004Dr 2  xx           combyt:	    .res 1		; byte type compressed.
00004Er 2  xx           comcnt:	    .res 1		; compression counter.
00004Fr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
000050r 2  xx           qscnt:	    .res 1
000051r 2               
000051r 2  xx           sprptr:	    .res 1      	; not a ptr
000052r 2  xx           sprcnt:	    .res 1
000053r 2               
000053r 2  xx xx        skptr:	    .res 2		; search pointer.
000055r 2  xx           sktptr:	    .res 1      	; not a ptr
000056r 2  xx           tmproom:    .res 1
000057r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000059r 2               
000059r 2               ;sndtyp:     .res 1
000059r 2               
000059r 1               
000059r 1               ;----------------------------------------------
000059r 1               ; BASIC header
000059r 1               ;----------------------------------------------
000059r 1               
000059r 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "test.inc"
000000r 3               ;--------------------------------------------------------------
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Engine v0.10
000000r 3               ; VIC20 port by Mauro and K.v.Oss 2024
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	lflag			; ladders
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	oflag			; objects
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	clwflag			; CLW code
000000r 3               ;	bigflag			; Bigtext code
000000r 3               ;
000000r 3               ; Flags set manually in commandline
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	crflag			; crumbling blocks
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               ;	kflag			; color attributes control (Breakanoid)
000000r 3               ;	rflag			; RAM Pre-Shifted Tables
000000r 3               ;	xflag			; metablocks (16x16)
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; Temporary setting of manual flags
000000r 3               ; Needs to be updated for VIC usage
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               	aflag 	= 0		; adventure mode
000000r 3               	bflag	= 0		; big sprites (16x24)
000000r 3               	crflag 	= 0		; crumbling blocks
000000r 3               	fflag 	= 0		; floppy version (skip #0axx)
000000r 3               	gflag 	= 0		; graphic colour mode
000000r 3               	hflag 	= 0		; hidden sprite mode
000000r 3               	iflag 	= 0		; invert mode
000000r 3               	kflag 	= 0		; color attributes control (Breakanoid)
000000r 3               	xflag 	= 0		; metablocks (16x16)
000000r 3               
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if bigflag
000000r 3               	.out "- Big Text enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if crflag
000000r 3               	.out "- Crumbled blockmode enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               ;.if kflag
000000r 3               ;	.out "- Save colour table enabled"
000000r 3               ;.endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving spritemode enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metabclocksmode enabled"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	MAP 		= MapAddr	; properties map buffer (3x256 bytes)
000000r 3               	SCROFF_lb 	= MAP+3*256	; screen address line table lo-byte (24 bytes)
000000r 3               	SCROFF_hb 	= SCROFF_lb+24	; screen address line table hi-byte (24 bytes)
000000r 3               	SHRAPN 		= SCROFF_hb+24	; shrapnel table (55x6 bytes)
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM		= 1		; platform.
000000r 3               	WALL		= PLATFM + 1	; solid wall.
000000r 3               	LADDER		= WALL + 1	; ladder.
000000r 3               	FODDER		= LADDER + 1	; fodder block.
000000r 3               	DEADLY		= FODDER + 1	; deadly block.
000000r 3               	CUSTOM		= DEADLY + 1	; custom block.
000000r 3               	WATER		= CUSTOM + 1	; water block.
000000r 3                       COLECT		= WATER + 1	; collectable block.
000000r 3               	HIDDEN 		= COLECT + 1	; hide behind block
000000r 3                       NUMTYP		= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT		= 24		; Sprite height
000000r 3               	SPR_WID 	= 16		; Sprite width
000000r 3               	NUMSPR		= 8		; number of sprites.
000000r 3               	COLDISTY 	= 24		; Collision distance
000000r 3               .else					; 16x16 sprites
000000r 3               	SPR_HGT 	= 16		; Sprite height
000000r 3               	SPR_WID 	= 16		; Sprite width
000000r 3               	NUMSPR		= 12		; number of sprites.
000000r 3               	COLDISTY 	= 16		; Collision distance
000000r 3               .endif
000000r 3               
000000r 3               	TABSIZ 		= 17		; size of each entry.
000000r 3               	SPRBUF 		= NUMSPR*TABSIZ	; size of entire table.
000000r 3               	NMESIZ 		= 4		; bytes stored in nmetab for each sprite.
000000r 3               	var_X  		= 8		; new x coordinate of sprite.
000000r 3               	var_Y  		= var_X + 1	; new y coordinate of sprite.
000000r 3               	PAM1ST 		= 5		; first sprite parameter, old x (ix+5).
000000r 3               	COLDISTX 	= 16		; Collision distance
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR 		= 55		; pieces of shrapnel.
000000r 3               	SHRSIZ 		= 6		; bytes per particle.
000000r 3               
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   	= $ff		; Invert byte for character printing
000000r 3               	ScrFillByte 	= $ff		; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   	= $00		; Invert byte for character printing
000000r 3               	ScrFillByte 	= $00		; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               .if gflag
000000r 3               	ScrMode    	= $d0		;  $d0 = CLEAR4a colour
000000r 3               .else
000000r 3               	ScrMode     	= $f0		;  $f0 = CLEAR4  mono
000000r 3               .endif
000000r 3               
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3  20 rr rr     	jsr Init
000003r 3               
000003r 3               ;-------------------------------------------------------------------
000003r 3               ; Clear ZP variables
000003r 3               ;-------------------------------------------------------------------
000003r 3               
000003r 3  A9 00        	lda #0
000005r 3  AA           	tax
000006r 3               clrloop:
000006r 3  95 00        	sta 0,x
000008r 3  E8           	inx
000009r 3  D0 FB        	bne clrloop
00000Br 3               
00000Br 3               ;------------------------------------------------------------------
00000Br 3               ; Start game
00000Br 3               ;------------------------------------------------------------------
00000Br 3               
00000Br 3  20 rr rr     	jsr cls			; Clear screen
00000Er 3               start:
00000Er 3  20 rr rr     	jsr game	 	; start the game.
000011r 3  4C rr rr     	jmp start
000014r 3               
000014r 3               ;------------------------------------------------------------------
000014r 3               ; Sprite table
000014r 3               ;------------------------------------------------------------------
000014r 3               
000014r 3               ; ix+0  = type.
000014r 3               ; ix+1  = sprite image number.
000014r 3               ; ix+2  = frame.
000014r 3               ; ix+3  = y coord.
000014r 3               ; ix+4  = x coord.
000014r 3               
000014r 3               ; ix+5  = new type.
000014r 3               ; ix+6  = new image number.
000014r 3               ; ix+7  = new frame.
000014r 3               ; ix+8  = new y coord.
000014r 3               ; ix+9  = new x coord.
000014r 3               
000014r 3               ; ix+10 = direction.
000014r 3               ; ix+11 = parameter 1.
000014r 3               ; ix+12 = parameter 2.
000014r 3               ; ix+13 = jump pointer low.
000014r 3               ; ix+14 = jump pointer high.
000014r 3               ; ix+15 = data pointer low.
000014r 3               ; ix+16 = data pointer high.
000014r 3               
000014r 3               ; block NUMSPR * TABSIZ,255
000014r 3               
000014r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
000018r 3  FF FF FF FF  
00001Cr 3  FF FF FF FF  
0000E0r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0000E4r 3  FF FF FF 00  
0000E8r 3  C0 78 00 00  
0000F1r 3  07           roomtb:	.byte 7                      ; start room map offset.
0000F2r 3               
0000F2r 3               ;----------------------------------------------
0000F2r 3               ; Copy sprite from list to table.
0000F2r 3               ;
0000F2r 3               ; global:	hl,ix
0000F2r 3               ; local:	y
0000F2r 3               ; calls:	evnt09
0000F2r 3               ;----------------------------------------------
0000F2r 3               
0000F2r 3               cpsp:
0000F2r 3  A0 00        	ldy #0				; fetch byte from table.
0000F4r 3  B1 66        	lda (z80_hl),y
0000F6r 3  91 68        	sta (z80_ix),y			; set up type.
0000F8r 3  A0 05        	ldy #PAM1ST
0000FAr 3  91 68        	sta (z80_ix),y 			; set up type.
0000FCr 3               
0000FCr 3  E6 66        	inc z80_l 			; move to next byte.
0000FEr 3  D0 02        	bne :+
000100r 3  E6 67        	inc z80_h
000102r 3               :
000102r 3  A0 00        	ldy #0 				; fetch byte from table.
000104r 3  B1 66        	lda (z80_hl),y
000106r 3  A0 06        	ldy #6
000108r 3  91 68        	sta (z80_ix),y			; set up image.
00010Ar 3               
00010Ar 3  E6 66        	inc z80_l 			; move to next byte.
00010Cr 3  D0 02        	bne :+
00010Er 3  E6 67        	inc z80_h
000110r 3               :
000110r 3  A0 00        	ldy #0
000112r 3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
000114r 3  A0 08        	ldy #8
000116r 3  91 68        	sta (z80_ix),y 			; set up coordinate.
000118r 3               
000118r 3  A9 C8        	lda #200 			; set initial coordinate off screen.
00011Ar 3  A0 03        	ldy #3
00011Cr 3  91 68        	sta (z80_ix),y
00011Er 3               
00011Er 3  E6 66        	inc z80_l 			; move to next byte.
000120r 3  D0 02        	bne :+
000122r 3  E6 67        	inc z80_h
000124r 3               :
000124r 3  A0 00        	ldy #0 				; fetch byte from table.
000126r 3  B1 66        	lda (z80_hl),y
000128r 3  A0 09        	ldy #9
00012Ar 3  91 68        	sta (z80_ix),y 			; set up coordinate.
00012Cr 3               
00012Cr 3  E6 66        	inc z80_l 			; move to next byte.
00012Er 3  D0 02        	bne :+
000130r 3  E6 67        	inc z80_h
000132r 3               :
000132r 3  A9 00        	lda #0				; zeroes in accumulator.
000134r 3  A0 07        	ldy #7 				; reset frame number.
000136r 3  91 68        	sta (z80_ix),y
000138r 3  A0 0A        	ldy #10 			; reset direction.
00013Ar 3  91 68        	sta (z80_ix),y
00013Cr 3  A0 0D        	ldy #13				; reset jump pointer low.
00013Er 3  91 68        	sta (z80_ix),y
000140r 3  C8           	iny	 			; reset jump pointer high.
000141r 3  91 68        	sta (z80_ix),y
000143r 3               
000143r 3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
000145r 3  A0 10        	ldy #16
000147r 3  91 68        	sta (z80_ix),y
000149r 3               evis0:
000149r 3  A5 69        	lda z80_i
00014Br 3  48           	pha
00014Cr 3  A5 68        	lda z80_x
00014Er 3  48           	pha
00014Fr 3  A5 67        	lda z80_h
000151r 3  48           	pha
000152r 3  A5 66        	lda z80_l
000154r 3  48           	pha
000155r 3               
000155r 3  20 rr rr     	jsr evnt09 			; perform event.
000158r 3               
000158r 3  68           	pla
000159r 3  85 66        	sta z80_l
00015Br 3  68           	pla
00015Cr 3  85 67        	sta z80_h
00015Er 3  68           	pla
00015Fr 3  85 68        	sta z80_x
000161r 3  68           	pla
000162r 3  85 69        	sta z80_i
000164r 3               
000164r 3  18           	clc
000165r 3  A5 68        	lda z80_x 			; distance to next odd/even entry.
000167r 3  69 11        	adc #TABSIZ		 	; next sprite.
000169r 3  85 68        	sta z80_x
00016Br 3  90 02        	bcc :+
00016Dr 3  E6 69        	inc z80_i
00016Fr 3               :
00016Fr 3  60           	rts
000170r 3               
000170r 3               ;-----------------------------------------
000170r 3               ; Jump to new screen.
000170r 3               ;-----------------------------------------
000170r 3               
000170r 3               nwscr:
000170r 3  A2 00        	ldx #0				; start of map data.
000172r 3               nwscr0:
000172r 3  DD rr rr     	cmp mapdat,x
000175r 3  F0 04        	beq nwscr1			; have we found a match for screen?
000177r 3  E8           	inx 				; next room.
000178r 3               ;	cpx #80				; zero room count, 80 to search.
000178r 3  D0 F8        	bne nwscr0			; keep looking.
00017Ar 3  60           	rts
00017Br 3               nwscr1:
00017Br 3  8E rr rr     	stx roomtb			; set the map position.
00017Er 3  4C rr rr     	jmp scrl1			; draw new room.
000181r 3               
000181r 3               
000181r 3               ;----------------------------------------------------------
000181r 3               ; Gravity processing.
000181r 3               ;----------------------------------------------------------
000181r 3               
000181r 3               grav:
000181r 3               grav_skip:
000181r 3  A0 0D        	ldy #13		; grav   ld a,(ix+13)        ; in-air flag.
000183r 3  B1 68        	lda (z80_ix),y
000185r 3               			;        and a               ; are we in the air?
000185r 3  F0 38        	beq gravex
000187r 3  18           	clc		;        inc a               ; increment it.
000188r 3  69 01        	adc #1
00018Ar 3  F0 66        	beq ogrv	;        jp z,ogrv           ; set to 255, use old gravity.
00018Cr 3  91 68        	sta (z80_ix),y	;        ld (ix+13),a        ; write new setting.
00018Er 3  4A           	lsr a		;        rra                 ; every other frame.
00018Fr 3  B0 0C        	bcs grav0	;        jr nc,grav0         ; don't apply gravity this time.
000191r 3  C8           	iny		;        ld a,(ix+14)        ; pixels to move.
000192r 3  B1 68        	lda (z80_ix),y
000194r 3  C9 10        	cmp #16		;        cp 16               ; reached maximum?
000196r 3  F0 05        	beq grav0	;        jr z,grav0          ; yes, continue.
000198r 3  18           	clc		;        inc (ix+14)         ; slow down ascent/speed up fall.
000199r 3  69 01        	adc #1
00019Br 3  91 68        	sta (z80_ix),y
00019Dr 3  A0 0E        grav0:	ldy #14		; grav0  ld a,(ix+14)        ; get distance to move.
00019Fr 3  B1 68        	lda (z80_ix),y
0001A1r 3  48           	pha
0001A2r 3  0A           	asl a
0001A3r 3  68           	pla
0001A4r 3  6A           	ror a		;        sra a               ; divide by 2.
0001A5r 3               			;        and a               ; any movement required?
0001A5r 3  F0 18        grav1:	beq gravex
0001A7r 3  C9 80        	cmp #128	;        cp 128              ; is it up or down?
0001A9r 3  B0 15        	bcs gravu	;        jr nc,gravu         ; it's up.
0001ABr 3  85 63        gravd:	sta z80_b	; gravd  ld b,a              ; set pixels to move.
0001ADr 3  20 rr rr     gravd0:	jsr cangd	; gravd0 call cangd          ; can we go down?
0001B0r 3  D0 2B        	bne gravst	;        jr nz,gravst        ; can't move down, so stop.
0001B2r 3  A0 08        	ldy #8		;        inc (ix+8)          ; adjust new x coord.
0001B4r 3  B1 68        	lda (z80_ix),y
0001B6r 3  18           	clc
0001B7r 3  69 01        	adc #1
0001B9r 3  91 68        	sta (z80_ix),y
0001BBr 3  C6 63        	dec z80_b
0001BDr 3  D0 EE        	bne gravd0	;        djnz gravd0
0001BFr 3  60           gravex:	rts		;        ret
0001C0r 3               
0001C0r 3  49 FF        gravu:	eor #$ff	; gravu  neg                 ; flip the sign so it's positive.
0001C2r 3  18           	clc
0001C3r 3  69 01        	adc #1
0001C5r 3  85 63        	sta z80_b	;        ld b,a              ; set pixels to move.
0001C7r 3  20 rr rr     gravu0:	jsr cangu	; gravu0 call cangu          ; can we go up?
0001CAr 3  F0 03        	beq :+
0001CCr 3  4C rr rr     	jmp ifalls	;        jp nz,ifalls        ; can't move up, go down next.
0001CFr 3               :
0001CFr 3  A0 08        	ldy #8		;        dec (ix+8)          ; adjust new x coord.
0001D1r 3  B1 68        	lda (z80_ix),y
0001D3r 3  38           	sec
0001D4r 3  E9 01        	sbc #1
0001D6r 3  91 68        	sta (z80_ix),y
0001D8r 3  C6 63        	dec z80_b	;        djnz gravu0
0001DAr 3  D0 EB        	bne gravu0
0001DCr 3  60           	rts		;        ret
0001DDr 3  A0 0E        gravst:	ldy #14		; gravst ld a,(ix+14)        ; jump pointer high.
0001DFr 3  B1 68        	lda (z80_ix),y
0001E1r 3  48           	pha
0001E2r 3  A9 00        	lda #0
0001E4r 3  91 68        	sta (z80_ix),y	;        ld (ix+14),0        ; store new speed.
0001E6r 3  88           	dey
0001E7r 3  91 68        	sta (z80_ix),y	;        ld (ix+13),0        ; reset falling flag.
0001E9r 3  68           	pla
0001EAr 3  C9 08        	cmp #8		;        cp 8                ; was speed the maximum?
0001ECr 3  D0 03        evftf:	bne :+
0001EEr 3  4C rr rr     	jmp evnt15	; evftf  jp z,evnt15         ; yes, fallen too far.
0001F1r 3               :
0001F1r 3  60           	rts		;        ret
0001F2r 3               
0001F2r 3               ; Old gravity processing for compatibility with 4.6 and 4.7.
0001F2r 3               
0001F2r 3               ogrv:
0001F2r 3  A0 0E        	ldy #14		; ogrv   ld e,(ix+14)        ; get index to table.
0001F4r 3  B1 68        	lda (z80_ix),y
0001F6r 3  AA           	tax
0001F7r 3               			;        ld d,0              ; no high byte.
0001F7r 3               			;        ld hl,jtab          ; jump table.
0001F7r 3               			;        add hl,de           ; hl points to jump value.
0001F7r 3  BD rr rr     	lda jtab,x	;        ld a,(hl)           ; pixels to move.
0001FAr 3  C9 63        	cmp #99		;        cp 99               ; reached the end?
0001FCr 3  D0 07        	bne ogrv0	;        jr nz,ogrv0         ; no, continue.
0001FEr 3  CA           	dex		;        dec hl              ; go back to previous value.
0001FFr 3  BD rr rr     	lda jtab,x	;        ld a,(hl)           ; fetch that from table.
000202r 3  4C rr rr     	jmp ogrv1	;        jr ogrv1
000205r 3               ogrv0:
000205r 3  48           	pha
000206r 3  A0 0E        	ldy #14		; ogrv0  inc (ix+14)         ; point to next table entry.
000208r 3  B1 68        	lda (z80_ix),y
00020Ar 3  18           	clc
00020Br 3  69 01        	adc #1
00020Dr 3  91 68        	sta (z80_ix),y
00020Fr 3  68           	pla
000210r 3               ogrv1:			; ogrv1  and a               ; any movement required?
000210r 3  F0 32        	beq ogrvex      ;	 ret z               ; no, not this time.
000212r 3  C9 80        	cmp #128	;        cp 128              ; is it up or down?
000214r 3  B0 15        	bcs ogrvu	;        jr nc,ogrvu         ; it's up.
000216r 3  85 63        ogrvd:	sta z80_b	; ogrvd  ld b,a              ; set pixels to move.
000218r 3  20 rr rr     ogrvd0:	jsr cangd	; ogrvd0 call cangd          ; can we go down?
00021Br 3  D0 28        	bne ogrvst	;        jr nz,ogrvst        ; can't move down, so stop.
00021Dr 3  A0 08        	ldy #8		;        inc (ix+8)          ; adjust new x coord.
00021Fr 3  B1 68        	lda (z80_ix),y
000221r 3  18           	clc
000222r 3  69 01        	adc #1
000224r 3  91 68        	sta (z80_ix),y
000226r 3  C6 63        	dec z80_b
000228r 3  D0 EE        	bne ogrvd0	;        djnz ogrvd0
00022Ar 3  60           	rts		;        ret
00022Br 3               
00022Br 3  49 FF        ogrvu:	eor #$ff	; ogrvu  neg                 ; flip the sign so it's positive.
00022Dr 3  18           	clc
00022Er 3  69 01        	adc #1
000230r 3  85 63        	sta z80_b	;        ld b,a              ; set pixels to move.
000232r 3  20 rr rr     ogrvu0:	jsr cangu	; ogrvu0 call cangu          ; can we go up?
000235r 3  D0 25        	bne ogrv2	;        jr nz,ogrv2         ; can't move up, go down next.
000237r 3  A0 08        	ldy #8		;        dec (ix+8)          ; adjust new x coord.
000239r 3  B1 68        	lda (z80_ix),y
00023Br 3  38           	sec
00023Cr 3  E9 01        	sbc #1
00023Er 3  91 68        	sta (z80_ix),y
000240r 3  C6 63        	dec z80_b	;        djnz ogrvu0
000242r 3  D0 EE        	bne ogrvu0
000244r 3  60           ogrvex:	rts		;        ret
000245r 3               
000245r 3  A0 0E        ogrvst:	ldy #14		; ogrvst ld e,(ix+14)        ; get index to table.
000247r 3  B1 68        	lda (z80_ix),y
000249r 3  AA           	tax
00024Ar 3               			;        ld d,0              ; no high byte.
00024Ar 3               			;        ld hl,jtab          ; jump table.
00024Ar 3               			;        add hl,de           ; hl points to jump value.
00024Ar 3               
00024Ar 3  A9 00        	lda #0		;        ld (ix+13),0        ; reset jump flag.
00024Cr 3  91 68        	sta (z80_ix),y
00024Er 3  88           	dey
00024Fr 3  91 68        	sta (z80_ix),y	;        ld (ix+14),0        ; reset pointer.
000251r 3  BD rr rr     	lda jtab,x	;        ld a,(hl)           ; fetch byte from table.
000254r 3  C9 63        	cmp #99		;        cp 99               ; is it the end marker?
000256r 3  D0 03        	bne :+
000258r 3  4C rr rr     	jmp evnt15	; evftf  jp z,evnt15         ; yes, fallen too far.
00025Br 3               :
00025Br 3  60           	rts		;        ret
00025Cr 3               
00025Cr 3  A2 00        ogrv2:	ldx #0		; ogrv2  ld hl,jtab          ; jump table.
00025Er 3  A9 00        	lda #0		;        ld b,0              ; offset into table.
000260r 3  85 63        	sta z80_b
000262r 3  BD rr rr     ogrv4:	lda jtab,x	; ogrv4  ld a,(hl)           ; fetch table byte.
000265r 3  C9 64        	cmp #100	;        cp 100              ; hit end or downward move?
000267r 3  90 06        	bcc ogrv3	;        jr c,ogrv3          ; yes.
000269r 3  E8           	inx		;        inc hl              ; next byte of table.
00026Ar 3  E6 63        	inc z80_b	;        inc b               ; next offset.
00026Cr 3  4C rr rr     	jmp ogrv4	;        jr ogrv4            ; keep going until we find crest/end of table.
00026Fr 3  A0 0E        ogrv3:	ldy #14		; ogrv3  ld (ix+14),b        ; set next table offset.
000271r 3  A5 63        	lda z80_b
000273r 3  91 68        	sta (z80_ix),y
000275r 3  60           	rts		;        ret
000276r 3               
000276r 3               ; Initiate fall check.
000276r 3               
000276r 3  A0 0D        ifall:	ldy #13		; ifall  ld a,(ix+13)        ; jump pointer flag.
000278r 3  B1 68        	lda (z80_ix),y
00027Ar 3               			;        and a               ; are we in the air?
00027Ar 3  F0 01        	beq :+		;        ret nz              ; if set, we're already in the air.
00027Cr 3  60           	rts
00027Dr 3               :
00027Dr 3  A0 09        	ldy #9		;        ld h,(ix+9)         ; y coordinate.
00027Fr 3  B1 68        	lda (z80_ix),y
000281r 3  85 rr        	sta dispx
000283r 3  A0 08        	ldy #8		;        add a,(ix+8)        ; add x coordinate.
000285r 3  B1 68        	lda (z80_ix),y
000287r 3  18           	clc
000288r 3  69 10        	adc #SPR_HGT	;        ld a,16             ; look down 16 pixels.
00028Ar 3  85 rr        	sta dispy	;        ld l,a              ; coords in hl.
00028Cr 3               			;        ld (dispx),hl       ; set up test coordinates.
00028Cr 3  20 rr rr     	jsr tstbl	;        call tstbl          ; get map address.
00028Fr 3  20 rr rr     	jsr plchk	;        call plchk          ; block, platform check.
000292r 3  F0 01        	beq :+		;        ret nz              ; it's solid, don't fall.
000294r 3  60           	rts
000295r 3               :
000295r 3  E6 rr        	inc bufaddr	;        inc hl              ; look right one cell.
000297r 3  20 rr rr     	jsr plchk	;        call plchk          ; block, platform check.
00029Ar 3  F0 01        	beq :+
00029Cr 3  60           	rts		;        ret nz              ; it's solid, don't fall.
00029Dr 3               :
00029Dr 3  A5 rr        	lda dispx	;        ld a,(dispy)        ; y coordinate.
00029Fr 3  29 07        	and #7		;        and 7               ; position straddling block cells.
0002A1r 3  F0 08        	beq ifalls	;        jr z,ifalls         ; no more checks needed.
0002A3r 3  E6 rr        	inc bufaddr	;        inc hl              ; look to third cell.
0002A5r 3  20 rr rr     	jsr plchk	;        call plchk          ; block, platform check.
0002A8r 3  F0 01        	beq ifalls
0002AAr 3  60           	rts		;        ret nz              ; it's solid, don't fall.
0002ABr 3               
0002ABr 3  A0 0D        ifalls:	ldy #13		; ifalls inc (ix+13)         ; set in air flag.
0002ADr 3  B1 68        	lda (z80_ix),y
0002AFr 3  18           	clc
0002B0r 3  69 01        	adc #1
0002B2r 3  91 68        	sta (z80_ix),y
0002B4r 3  A9 00        	lda #0		;        ld (ix+14),0        ; initial speed = 0
0002B6r 3  C8           	iny
0002B7r 3  91 68        	sta (z80_ix),y
0002B9r 3  60           	rts		;        ret
0002BAr 3               
0002BAr 3  A0 0D        tfall:	ldy #13		; tfall  ld a,(ix+13)        ; jump pointer flag.
0002BCr 3  B1 68        	lda (z80_ix),y
0002BEr 3               			;        and a               ; are we in the air?
0002BEr 3  F0 01        	beq :+
0002C0r 3  60           	rts		;        ret nz              ; if set, we're already in the air.
0002C1r 3  20 rr rr     :	jsr ifall	;        call ifall          ; do fall test.
0002C4r 3  A0 0D        	ldy #13		;        ld a,(ix+13)        ; get falling flag.
0002C6r 3  B1 68        	lda (z80_ix),y
0002C8r 3               			;        and a               ; is it set?
0002C8r 3  D0 01        	bne :+
0002CAr 3  60           	rts		;        ret z               ; no.
0002CBr 3  A9 FF        :	lda #255
0002CDr 3  91 68        	sta (z80_ix),y	;        ld (ix+13),255      ; we're using the table.
0002CFr 3  4C rr rr     	jmp ogrv2	;        jr ogrv2            ; find position in table.
0002D2r 3               
0002D2r 3               
0002D2r 3               ;----------------------------------------------------
0002D2r 3               ; Get frame data for a particular sprite.
0002D2r 3               ; Input:
0002D2r 3               ;  a		= framenumer
0002D2r 3               ; Output:
0002D2r 3               ;  hl		= frame address
0002D2r 3               ;
0002D2r 3               ; global:	hl,frmptr
0002D2r 3               ; local:	-
0002D2r 3               ; calls:	-
0002D2r 3               ;----------------------------------------------------
0002D2r 3               
0002D2r 3               gfrm:
0002D2r 3  0A           	asl a	 		 	; multiple of 2.
0002D3r 3  18           	clc
0002D4r 3  69 rr        	adc #<frmlst 			; frames used by game.
0002D6r 3  85 66        	sta z80_l
0002D8r 3  A9 rr        	lda #>frmlst
0002DAr 3  69 00        	adc #0
0002DCr 3  85 67        	sta z80_h 			; point to frame start.
0002DEr 3  60           	rts
0002DFr 3               
0002DFr 3               ;----------------------------------------------------
0002DFr 3               ; Find sprite list for current room.
0002DFr 3               ;
0002DFr 3               ; global:	hl
0002DFr 3               ; local:	x,y
0002DFr 3               ; calls:	-
0002DFr 3               ;----------------------------------------------------
0002DFr 3               
0002DFr 3               sprlst:
0002DFr 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
0002E1r 3  85 66        	sta z80_l
0002E3r 3  A9 rr        	lda #>nmedat
0002E5r 3  85 67        	sta z80_h
0002E7r 3  A6 rr        	ldx scno 			; screen number.
0002E9r 3  D0 01        	bne sprls2 			; is it the first screen?
0002EBr 3  60           	rts 				; yes, don't need to search data.
0002ECr 3               sprls2:
0002ECr 3  A0 00        	ldy #0
0002EEr 3               sprls1:
0002EEr 3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0002F0r 3  C9 FF        	cmp #255			; is it an end marker?
0002F2r 3  F0 0E        	beq sprls0 			; yes, end of this room.
0002F4r 3               
0002F4r 3  18           	clc 				; point to next sprite in list.
0002F5r 3  A5 66        	lda z80_l
0002F7r 3  69 04        	adc #NMESIZ
0002F9r 3  85 66        	sta z80_l
0002FBr 3  90 02        	bcc :+
0002FDr 3  E6 67        	inc z80_h
0002FFr 3               :
0002FFr 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000302r 3               sprls0:
000302r 3  E6 66        	inc z80_l 			; point to start of next screen.s
000304r 3  D0 02        	bne :+
000306r 3  E6 67        	inc z80_h
000308r 3               :
000308r 3  CA           	dex
000309r 3  D0 E3        	bne sprls1 			; continue until room found.
00030Br 3  60           	rts
00030Cr 3               
00030Cr 3               
00030Cr 3               ;----------------------------------------------------
00030Cr 3               ; Clear all but a single player sprite.
00030Cr 3               ;
00030Cr 3               ; global:	-
00030Cr 3               ; local:	x,y,ix
00030Cr 3               ; calls:	-
00030Cr 3               ;----------------------------------------------------
00030Cr 3               
00030Cr 3               nspr:
00030Cr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00030Er 3  85 rr        	sta sprcnt
000310r 3  A9 rr        	lda #<sprtab 			; sprite table.
000312r 3  85 68        	sta z80_x
000314r 3  A9 rr        	lda #>sprtab
000316r 3  85 69        	sta z80_i
000318r 3               nspr0:
000318r 3  A0 00        	ldy #0 				; fetch sprite type.
00031Ar 3  B1 68        	lda (z80_ix),y 			; is it a player?
00031Cr 3  F0 1A        	beq nspr1 			; yes, keep this one.
00031Er 3               
00031Er 3  A9 FF        	lda #255
000320r 3  A0 00        	ldy #0 				; fetch sprite type.
000322r 3  91 68        	sta (z80_ix),y 			; delete sprite.
000324r 3  A0 05        	ldy #5
000326r 3  91 68        	sta (z80_ix),y 			; remove next type.
000328r 3               
000328r 3  18           	clc	 			; next sprite.
000329r 3  A5 68        	lda z80_x
00032Br 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00032Dr 3  85 68        	sta z80_x
00032Fr 3  90 02        	bcc :+
000331r 3  E6 69        	inc z80_i
000333r 3               :
000333r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000335r 3  D0 E1        	bne nspr0
000337r 3  60           	rts
000338r 3               nspr1:
000338r 3  A9 FF        	lda #255
00033Ar 3  A0 00        	ldy #0
00033Cr 3  91 68        	sta (z80_ix),y 			; delete sprite.
00033Er 3               
00033Er 3  18           	clc	 			; point to next sprite.
00033Fr 3  A5 68        	lda z80_x
000341r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000343r 3  85 68        	sta z80_x
000345r 3  90 02        	bcc :+
000347r 3  E6 69        	inc z80_i
000349r 3               :
000349r 3  C6 rr        	dec sprcnt	 			; one less to do.
00034Br 3  D0 01        	bne nspr2
00034Dr 3  60           	rts
00034Er 3               nspr2:
00034Er 3  A9 FF        	lda #255
000350r 3  A0 00        	ldy #0
000352r 3  91 68        	sta (z80_ix),y 			; delete sprite.
000354r 3  A0 05        	ldy #5
000356r 3  91 68        	sta (z80_ix),y 			; remove next type.
000358r 3               
000358r 3  18           	clc	 			; next sprite.
000359r 3  A5 68        	lda z80_x
00035Br 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00035Dr 3  85 68        	sta z80_x
00035Fr 3  90 02        	bcc :+
000361r 3  E6 69        	inc z80_i
000363r 3               :
000363r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000365r 3  D0 E7        	bne nspr2
000367r 3  60           	rts
000368r 3               
000368r 3               ;----------------------------------------------------------
000368r 3               ; Two initialisation routines.
000368r 3               ; Initialise sprites - copy everything from list to table.
000368r 3               ;
000368r 3               ; global:	-
000368r 3               ; local:	x,y,ix
000368r 3               ; calls:	cpsp
000368r 3               ;----------------------------------------------------------
000368r 3               
000368r 3               ispr:
000368r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00036Ar 3  85 rr        	sta sprcnt
00036Cr 3  A9 rr        	lda #<sprtab			; sprite table.
00036Er 3  85 68        	sta z80_x
000370r 3  A9 rr        	lda #>sprtab
000372r 3  85 69        	sta z80_i
000374r 3               ispr2:
000374r 3  A0 00        	ldy #0
000376r 3  B1 66        	lda (z80_hl),y 			; fetch byte.
000378r 3  C9 FF        	cmp #255 			; is it an end marker?
00037Ar 3  D0 01        	bne :+
00037Cr 3  60           	rts 				; yes, no more to do.
00037Dr 3               :
00037Dr 3               ispr1:
00037Dr 3  A0 00        	ldy #0
00037Fr 3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
000381r 3  C9 FF        	cmp #255 			; is it enabled yet?
000383r 3  D0 08        	bne ispr4			; yes, try another slot.
000385r 3               
000385r 3  A0 05        	ldy #5
000387r 3  B1 68        	lda (z80_ix),y		 	; next type.
000389r 3  C9 FF        	cmp #255 			; is it enabled yet?
00038Br 3  F0 10        	beq ispr3 			; no, process this one.
00038Dr 3               ispr4:
00038Dr 3  18           	clc 				; next sprite.
00038Er 3  A5 68        	lda z80_x
000390r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000392r 3  85 68        	sta z80_x
000394r 3  90 02        	bcc :+
000396r 3  E6 69        	inc z80_i
000398r 3               :
000398r 3  C6 rr        	dec sprcnt
00039Ar 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00039Cr 3  60           	rts  				; no more room in table.
00039Dr 3               ispr3:
00039Dr 3  20 rr rr     	jsr cpsp			; initialise a sprite.
0003A0r 3  C6 rr        	dec sprcnt			; one less space in the table.
0003A2r 3  D0 D0        	bne ispr2
0003A4r 3  60           	rts
0003A5r 3               
0003A5r 3               
0003A5r 3               ;-----------------------------------------------------------------------
0003A5r 3               ; Initialise sprites - but not player, we're keeping the old one.
0003A5r 3               ;
0003A5r 3               ; global:	-
0003A5r 3               ; local:	x,y,ix
0003A5r 3               ; calls:	cpsp
0003A5r 3               ;-----------------------------------------------------------------------
0003A5r 3               
0003A5r 3               kspr:
0003A5r 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0003A7r 3  A9 rr        	lda #<sprtab 			; sprite table.
0003A9r 3  85 68        	sta z80_x
0003ABr 3  A9 rr        	lda #>sprtab
0003ADr 3  85 69        	sta z80_i
0003AFr 3               kspr2:
0003AFr 3  A0 00        	ldy #0
0003B1r 3  B1 66        	lda (z80_hl),y 			; fetch byte.
0003B3r 3  C9 FF        	cmp #255 			; is it an end marker?
0003B5r 3  D0 01        	bne :+
0003B7r 3  60           	rts 				; yes, no more to do.
0003B8r 3               :
0003B8r 3  C9 00        	cmp #0
0003BAr 3  D0 0E        	bne kspr1 			; no, add to table as normal.
0003BCr 3               
0003BCr 3  18           	clc 				; next sprite.
0003BDr 3  A5 66        	lda z80_l
0003BFr 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0003C1r 3  85 66        	sta z80_l
0003C3r 3  90 02        	bcc :+
0003C5r 3  E6 67        	inc z80_h
0003C7r 3               :
0003C7r 3  4C rr rr     	jmp kspr2
0003CAr 3               kspr1:
0003CAr 3  A0 00        	ldy #0 				; fetch sprite type.
0003CCr 3  B1 68        	lda (z80_ix),y
0003CEr 3  C9 FF        	cmp #255 			; is it enabled yet?
0003D0r 3  D0 08        	bne kspr4 			; yes, try another slot.
0003D2r 3               
0003D2r 3  A0 05        	ldy #5 				; next type.
0003D4r 3  B1 68        	lda (z80_ix),y
0003D6r 3  C9 FF        	cmp #255 			; is it enabled yet?
0003D8r 3  F0 0F        	beq kspr3 			; no, process this one.
0003DAr 3               kspr4:
0003DAr 3  18           	clc 				; next sprite.
0003DBr 3  A5 68        	lda z80_x
0003DDr 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0003DFr 3  85 68        	sta z80_x
0003E1r 3  90 02        	bcc :+
0003E3r 3  E6 69        	inc z80_i
0003E5r 3               :
0003E5r 3  CA           	dex	 			; repeat for remaining sprites.
0003E6r 3  D0 E2        	bne kspr1
0003E8r 3  60           	rts  				; no more room in table.
0003E9r 3               kspr3:
0003E9r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
0003ECr 3  CA           	dex	 			; one less space in the table.
0003EDr 3  D0 C0        	bne kspr2
0003EFr 3  60           	rts
0003F0r 3               
0003F0r 3               ;-------------------------------------------------------------
0003F0r 3               ; Line drawn, now work out next target address.
0003F0r 3               ;
0003F0r 3               ; Input:
0003F0r 3               ;  BP  = right mask
0003F0r 3               ;  CP  = left mask
0003F0r 3               ;  DEP = spriteaddress
0003F0r 3               ;  z80_hlp = screen address
0003F0r 3               ;-------------------------------------------------------------
0003F0r 3               
0003F0r 3               
0003F0r 3               ;-----------------------------------------------------------
0003F0r 3               ; Animates a sprite.
0003F0r 3               ;
0003F0r 3               ; Input:
0003F0r 3               ;  IX = sprite address
0003F0r 3               ;  HL = last sprite address
0003F0r 3               ;-----------------------------------------------------------
0003F0r 3               
0003F0r 3               animsp:
0003F0r 3  25 rr        	and frmno
0003F2r 3  F0 01        	beq :+
0003F4r 3  60           	rts
0003F5r 3               :
0003F5r 3  A0 06        	ldy #6
0003F7r 3  B1 68        	lda (z80_ix),y		; sprite image
0003F9r 3  20 rr rr     	jsr gfrm		; get frame data.
0003FCr 3               
0003FCr 3  E6 66        	inc z80_l		; point to frames.
0003FEr 3  D0 02        	bne :+
000400r 3  E6 67        	inc z80_h
000402r 3               :
000402r 3  A0 07        	ldy #7
000404r 3  B1 68        	lda (z80_ix),y		; sprite frame.
000406r 3  18           	clc
000407r 3  69 01        	adc #1			; next one along.
000409r 3  A0 00        	ldy #0
00040Br 3  D1 66        	cmp (z80_hl),y		; reached the last frame?
00040Dr 3  90 02        	bcc anims0		; no, not yet.
00040Fr 3  A9 00        	lda #0			; start at first frame.
000411r 3               anims0:
000411r 3  A0 07        	ldy #7
000413r 3  91 68        	sta (z80_ix),y		; new frame.
000415r 3  60           	rts
000416r 3               
000416r 3               ;--------------------------------------------------------------
000416r 3               ; Animate back
000416r 3               ;
000416r 3               ; Input:
000416r 3               ;  IX = sprite address
000416r 3               ;  HL = last sprite address
000416r 3               ;--------------------------------------------------------------
000416r 3               
000416r 3               animbk:
000416r 3  25 rr        	and frmno
000418r 3  F0 01        	beq :+
00041Ar 3  60           	rts
00041Br 3               :
00041Br 3  A0 06        	ldy #6
00041Dr 3  B1 68        	lda (z80_ix),y		; sprite image.
00041Fr 3  20 rr rr     	jsr gfrm		; get frame data.
000422r 3               
000422r 3  E6 66        	inc z80_l 		; point to frames.
000424r 3  D0 02        	bne :+
000426r 3  E6 67        	inc z80_h
000428r 3               :
000428r 3  A0 07        	ldy #7
00042Ar 3  B1 68        	lda (z80_ix),y 		; sprite frame.
00042Cr 3  F0 03        	beq :+
00042Er 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000431r 3               :
000431r 3  A0 00        	ldy #0
000433r 3  B1 66        	lda (z80_hl),y 		; last sprite.
000435r 3               rtanb0:
000435r 3  38           	sec
000436r 3  E9 01        	sbc #1			; next one along.
000438r 3  4C rr rr     	jmp anims0		; set new frame.
00043Br 3               
00043Br 3               ;--------------------------------------------------------------
00043Br 3               ; Check for collision with other sprite, strict enforcement.
00043Br 3               ;
00043Br 3               ; Input:
00043Br 3               ;  b		= sprite to test for
00043Br 3               ;  ix		= current sprite pointer
00043Br 3               ;
00043Br 3               ; global:	b
00043Br 3               ; local:	x,y,hl,de,skptr
00043Br 3               ; calls:	-
00043Br 3               ;--------------------------------------------------------------
00043Br 3               
00043Br 3               sktyp:
00043Br 3  A9 rr        	lda #<sprtab				; sprite table.
00043Dr 3  85 66        	sta z80_l
00043Fr 3  A9 rr        	lda #>sprtab
000441r 3  85 67        	sta z80_h
000443r 3               numsp2:
000443r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000445r 3  85 rr        	sta sktptr
000447r 3               sktyp0:
000447r 3  A5 66        	lda z80_l 				; store pointer to sprite.
000449r 3  85 rr        	sta skptr
00044Br 3  A5 67        	lda z80_h
00044Dr 3  85 rr        	sta skptr+1
00044Fr 3               
00044Fr 3  A0 00        	ldy #0
000451r 3  B1 66        	lda (z80_hl),y 				; get sprite type.
000453r 3  C5 63        	cmp z80_b				; is it the type we seek?
000455r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000457r 3               sktyp1:
000457r 3  18           	clc
000458r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
00045Ar 3  69 11        	adc #TABSIZ				; size of each entry.
00045Cr 3  85 66        	sta z80_l
00045Er 3  A5 rr        	lda skptr+1
000460r 3  69 00        	adc #0
000462r 3  85 67        	sta z80_h
000464r 3  C6 rr        	dec sktptr				; one less iteration.
000466r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000468r 3  A9 00        	lda #0					; default to ROM address - no sprite.
00046Ar 3  85 66        	sta z80_l
00046Cr 3  85 67        	sta z80_h
00046Er 3  85 rr        	sta skptr				; store pointer to sprite.
000470r 3  85 rr        	sta skptr+1
000472r 3               
000472r 3  18           	clc					; don't return with zero flag set.
000473r 3  60           	rts 					; didn't find one.
000474r 3               
000474r 3               ;skptr:	.word 0					; search pointer.
000474r 3               ;sktptr:	.byte 0
000474r 3               
000474r 3               coltyp:
000474r 3  A0 00        	ldy #0
000476r 3  B1 68        	lda (z80_ix),y				; current sprite type.
000478r 3  C5 63        	cmp z80_b				; seeking sprite of same type?
00047Ar 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00047Cr 3               colty0:
00047Cr 3  A0 09        	ldy #9					; distance to x position in table.
00047Er 3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
000480r 3  85 64        	sta z80_e
000482r 3  88           	dey
000483r 3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
000485r 3  85 65        	sta z80_d
000487r 3               
000487r 3               ; Drop into collision detection.
000487r 3               
000487r 3               colc16:
000487r 3  A0 09        	ldy #9
000489r 3  B1 68        	lda (z80_ix),y			 	; x coord.
00048Br 3  38           	sec					; subtract x.
00048Cr 3  E5 64        	sbc z80_e
00048Er 3  B0 05        	bcs  colc1a 				; result is positive.
000490r 3  49 FF        	eor #$ff				; make negative positive.
000492r 3  18           	clc
000493r 3  69 01        	adc #1
000495r 3               colc1a:
000495r 3  C9 10        	cmp #COLDISTX				; within x range?
000497r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000499r 3  85 62        	sta z80_c				; store difference.
00049Br 3               
00049Br 3  A0 08        	ldy #8
00049Dr 3  B1 68        	lda (z80_ix),y				; y coord.
00049Fr 3  38           	sec
0004A0r 3  E5 65        	sbc z80_d				; subtract y.
0004A2r 3  B0 05        	bcs colc1b				; result is positive.
0004A4r 3  49 FF        	eor #$ff				; make negative positive.
0004A6r 3  18           	clc
0004A7r 3  69 01        	adc #1
0004A9r 3               colc1b:
0004A9r 3  C9 10        	cmp #COLDISTY					; within y range?
0004ABr 3  B0 AA        	bcs sktyp1 				; no - they've missed.
0004ADr 3  18           	clc					; add x difference.
0004AEr 3  65 62        	adc z80_c
0004B0r 3  C9 1B        	cmp #COLDISTX+COLDISTY-5			; only 5 corner pixels touching?
0004B2r 3  B0 02        	bcs :+
0004B4r 3  38           	sec
0004B5r 3  60           	rts 					; carry set if there's a collision.
0004B6r 3               :
0004B6r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
0004B9r 3               colty1:
0004B9r 3  A5 68        	lda z80_x  				; compare the two.
0004BBr 3  C5 66        	cmp z80_l
0004BDr 3  D0 09        	bne end_col
0004BFr 3  A5 69        	lda z80_i
0004C1r 3  C5 67        	cmp z80_h
0004C3r 3  D0 03        	bne end_col
0004C5r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
0004C8r 3               end_col:
0004C8r 3  4C rr rr     	jmp colty0
0004CBr 3               
0004CBr 3               ;-----------------------------------------------------------
0004CBr 3               ; Display number, left aligned
0004CBr 3               ;
0004CBr 3               ; Input:
0004CBr 3               ;  a		= number
0004CBr 3               ;
0004CBr 3               ; global:	-
0004CBr 3               ; local:	a,y,bc,hl,displ0
0004CBr 3               ; calls:	num2ch,dmsg3
0004CBr 3               ;-----------------------------------------------------------
0004CBr 3               
0004CBr 3               disply:
0004CBr 3  85 61        	sta z80_a
0004CDr 3  A9 rr        	lda #<displ0				; display workspace.
0004CFr 3  85 62        	sta z80_c
0004D1r 3  A9 rr        	lda #>displ0
0004D3r 3  85 63        	sta z80_b
0004D5r 3  A5 61        	lda z80_a
0004D7r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
0004DAr 3               displ1:
0004DAr 3  C6 62        	dec z80_c				; back one character.
0004DCr 3  D0 02        	bne :+
0004DEr 3  C6 63        	dec z80_b
0004E0r 3               :
0004E0r 3  A0 00        	ldy #0
0004E2r 3  B1 62        	lda (z80_bc),y				; fetch digit.
0004E4r 3  09 80        	ora #128				; insert end marker.
0004E6r 3  91 62        	sta (z80_bc),y				; new value.
0004E8r 3               
0004E8r 3  A9 rr        	lda #<displ0				; display space.
0004EAr 3  85 66        	sta z80_l
0004ECr 3  A9 rr        	lda #>displ0
0004EEr 3  85 67        	sta z80_h
0004F0r 3  4C rr rr     	jmp dmsg3				; display the string.
0004F3r 3               
0004F3r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0004F7r 3               
0004F7r 3               ;----------------------------------------------------------------
0004F7r 3               ; Initialise screen.
0004F7r 3               ;
0004F7r 3               ; global:	roomtb,scno
0004F7r 3               ; local:	-
0004F7r 3               ; calls:	tstcs
0004F7r 3               ;----------------------------------------------------------------
0004F7r 3               
0004F7r 3               initsc:
0004F7r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
0004FAr 3  20 rr rr     	jsr tstsc 			; find displacement.
0004FDr 3  C9 FF        	cmp #255 			; is it valid?
0004FFr 3  F0 02        	beq init_end 			; no, it's rubbish.
000501r 3  85 rr        	sta scno			; store new room number.
000503r 3               init_end:
000503r 3  60           	rts
000504r 3               
000504r 3               ;----------------------------------------------------------------
000504r 3               ; Test screen.
000504r 3               ;
000504r 3               ; global:	-
000504r 3               ; local:	x
000504r 3               ; calls:	-
000504r 3               ;----------------------------------------------------------------
000504r 3               
000504r 3               tstsc:
000504r 3  85 rr        	sta tmproom
000506r 3  18           	clc
000507r 3  69 03        	adc #MAPWID 			; add width in case we"re negative.
000509r 3  AA           	tax 				; add displacement to map data.
00050Ar 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
00050Dr 3  60           	rts
00050Er 3               
00050Er 3               ;tmproom:	.byte 0
00050Er 3               
00050Er 3               ;--------------------------
00050Er 3               ; Screen left.
00050Er 3               ;--------------------------
00050Er 3               
00050Er 3               scrl:
00050Er 3  AD rr rr     	lda roomtb 			; present room table pointer.
000511r 3  38           	sec
000512r 3  E9 01        	sbc #1				; room left.
000514r 3               scrl0:
000514r 3  20 rr rr     	jsr tstsc			; test screen.
000517r 3  C9 FF        	cmp #255			; is there a screen this way?
000519r 3  D0 01        	bne :+
00051Br 3  60           	rts				; no, return to loop.
00051Cr 3               :
00051Cr 3  A5 rr        	lda tmproom			; restore room displacement.
00051Er 3  8D rr rr     	sta roomtb			; new room table position.
000521r 3               scrl1:
000521r 3  20 rr rr     	jsr initsc 			; set new screen.
000524r 3  A9 02        	lda #2
000526r 3  85 rr        	sta restfl 			; set it.
000528r 3  60           	rts
000529r 3               scrr:
000529r 3  AD rr rr     	lda roomtb 			; room table pointer.
00052Cr 3  18           	clc
00052Dr 3  69 01        	adc #1				; room right.
00052Fr 3  4C rr rr     	jmp scrl0
000532r 3               scru:
000532r 3  AD rr rr     	lda roomtb 			; room table pointer.
000535r 3  38           	sec
000536r 3  E9 03        	sbc #MAPWID 			; room up.
000538r 3  4C rr rr     	jmp scrl0
00053Br 3               scrd:
00053Br 3  AD rr rr     	lda roomtb 			; room table pointer.
00053Er 3  18           	clc
00053Fr 3  69 03        	adc #MAPWID 			; room down.
000541r 3  4C rr rr     	jmp scrl0
000544r 3               
000544r 3               ;----------------------------------------------------------------------
000544r 3               ; Line drawn, now work out next target address.
000544r 3               ;----------------------------------------------------------------------
000544r 3               
000544r 3               nline:
000544r 3  18           	clc
000545r 3  A5 rr        	lda scraddr 		; get low byte of address.
000547r 3  69 18        	adc #24
000549r 3  85 rr        	sta scraddr 		; new low byte of address.
00054Br 3  90 02        	bcc :+
00054Dr 3  E6 rr        	inc scraddr+1 		; new high byte of address.
00054Fr 3               :
00054Fr 3  60           	rts
000550r 3               
000550r 3               ;-----------------------------------------
000550r 3               ; Get sprite address calculations.
000550r 3               ; gspran = new sprite, gsprad = old sprite.
000550r 3               ;
000550r 3               ; Input:
000550r 3               ;  IX = sprite address
000550r 3               ;-----------------------------------------
000550r 3               
000550r 3               gspran:
000550r 3  A0 08        	ldy #8
000552r 3  B1 68        	lda (z80_ix),y 		; new y coordinate.
000554r 3  85 rr        	sta dispy
000556r 3  A0 09        	ldy #9
000558r 3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00055Ar 3  85 rr        	sta dispx
00055Cr 3  A0 06        	ldy #6
00055Er 3  B1 68        	lda (z80_ix),y 		; new sprite image.
000560r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000563r 3               
000563r 3  A0 00        	ldy #0
000565r 3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
000567r 3  A0 07        	ldy #7
000569r 3  18           	clc
00056Ar 3  71 68        	adc (z80_ix),y 		; new add frame number.
00056Cr 3  4C rr rr     	jmp gspra0
00056Fr 3               
00056Fr 3               ; Address of each sprite type's routine.
00056Fr 3               
00056Fr 3  rr rr        evtyp0:	.word evnt00
000571r 3  rr rr        evtyp1:	.word evnt01
000573r 3  rr rr        evtyp2:	.word evnt02
000575r 3  rr rr        evtyp3:	.word evnt03
000577r 3  rr rr        evtyp4:	.word evnt04
000579r 3  rr rr        evtyp5:	.word evnt05
00057Br 3  rr rr        evtyp6:	.word evnt06
00057Dr 3  rr rr        evtyp7:	.word evnt07
00057Fr 3  rr rr        evtyp8:	.word evnt08
000581r 3               
000581r 3               ;--------------------------------------------------------------
000581r 3               ; Display sprites.
000581r 3               ;
000581r 3               ; Input:
000581r 3               ;  IX = sprite table
000581r 3               ;--------------------------------------------------------------
000581r 3               
000581r 3               dspr:
000581r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000583r 3  85 rr        	sta sprcnt
000585r 3               dspr0:
000585r 3  A0 00        	ldy #0
000587r 3  B1 68        	lda (z80_ix),y 		; get sprite type.
000589r 3  C9 FF        	cmp #255 		; is it enabled?
00058Br 3  D0 42        	bne dspr1 		; yes, it needs deleting.
00058Dr 3               dspr5:
00058Dr 3  A0 05        	ldy #5
00058Fr 3  B1 68        	lda (z80_ix),y 		; new type.
000591r 3  C9 FF        	cmp #255		; is it enabled?
000593r 3  D0 77        	bne dspr3 		; yes, it needs drawing.
000595r 3               dspr2:
000595r 3  A0 05        	ldy #5
000597r 3  B1 68        	lda (z80_ix),y 		; copy new type.
000599r 3  A0 00        	ldy #0
00059Br 3  91 68        	sta (z80_ix),y
00059Dr 3  A0 06        	ldy #6
00059Fr 3  B1 68        	lda (z80_ix),y 		; copy new image number.
0005A1r 3  A0 01        	ldy #1
0005A3r 3  91 68        	sta (z80_ix),y
0005A5r 3  A0 07        	ldy #7
0005A7r 3  B1 68        	lda (z80_ix),y 		; copy new frame.
0005A9r 3  A0 02        	ldy #2
0005ABr 3  91 68        	sta (z80_ix),y
0005ADr 3  A0 08        	ldy #8
0005AFr 3  B1 68        	lda (z80_ix),y 		; copy new y.
0005B1r 3  A0 03        	ldy #3
0005B3r 3  91 68        	sta (z80_ix),y
0005B5r 3  A0 09        	ldy #9
0005B7r 3  B1 68        	lda (z80_ix),y 		; copy new x.
0005B9r 3  A0 04        	ldy #4
0005BBr 3  91 68        	sta (z80_ix),y
0005BDr 3               
0005BDr 3  18           	clc
0005BEr 3  A5 68        	lda z80_x
0005C0r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0005C2r 3  85 68        	sta z80_x
0005C4r 3  A5 69        	lda z80_i
0005C6r 3  69 00        	adc #0
0005C8r 3  85 69        	sta z80_i 		; next sprite.
0005CAr 3  C6 rr        	dec sprcnt
0005CCr 3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0005CEr 3  60           	rts
0005CFr 3               dspr1:
0005CFr 3  A0 05        	ldy #5
0005D1r 3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0005D3r 3  C9 FF        	cmp #255		; is this enabled?
0005D5r 3  D0 06        	bne dspr4 		; yes, display both.
0005D7r 3               dspr6:
0005D7r 3  20 rr rr     	jsr sspria 		; show single sprite.
0005DAr 3  4C rr rr     	jmp dspr2
0005DDr 3               
0005DDr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0005DDr 3               
0005DDr 3               dspr4:
0005DDr 3  A0 04        	ldy #4
0005DFr 3  B1 68        	lda (z80_ix),y		; old x.
0005E1r 3  A0 09        	ldy #9
0005E3r 3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0005E5r 3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0005E7r 3               
0005E7r 3  A0 03        	ldy #3
0005E9r 3  B1 68        	lda (z80_ix),y		; old y.
0005EBr 3  A0 08        	ldy #8
0005EDr 3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0005EFr 3  D0 15        	bne dspr7		; they differ, need to redraw.
0005F1r 3               
0005F1r 3  A0 02        	ldy #2
0005F3r 3  B1 68        	lda (z80_ix),y 		; old frame.
0005F5r 3  A0 07        	ldy #7
0005F7r 3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0005F9r 3  4C rr rr     	jmp dspr7 		; they differ, need to redraw.
0005FCr 3               
0005FCr 3  A0 01        	ldy #1
0005FEr 3  B1 68        	lda (z80_ix),y 		; old image.
000600r 3  A0 06        	ldy #6
000602r 3  D1 68        	cmp (z80_ix),y 		; compare against new value.
000604r 3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
000606r 3               dspr7:
000606r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000609r 3  4C rr rr     	jmp dspr2
00060Cr 3               dspr3:
00060Cr 3  20 rr rr     	jsr ssprib 		; show single sprite.
00060Fr 3  4C rr rr     	jmp dspr2
000612r 3               
000612r 3               ;sprcnt:	.byte 0
000612r 3               
000612r 3               ;-----------------------------------------------------------
000612r 3               ; Bubble sort.
000612r 3               ;-----------------------------------------------------------
000612r 3               
000612r 3               bsort:
000612r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000614r 3  85 rr        	sta qscnt
000616r 3               
000616r 3  A9 rr        	lda #<sprtab 		; sprite table.
000618r 3  85 68        	sta z80_x
00061Ar 3  A9 rr        	lda #>sprtab
00061Cr 3  85 69        	sta z80_i
00061Er 3               bsort0:
00061Er 3  A0 00        	ldy #0
000620r 3  B1 68        	lda (z80_ix),y 		; first sprite type.
000622r 3  C9 FF        	cmp #255 		; is it switched off?
000624r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000626r 3               
000626r 3  A0 11        	ldy #TABSIZ
000628r 3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00062Ar 3  C9 FF        	cmp #255 		; is it enabled?
00062Cr 3  F0 0A        	beq bsort2 		; no, nothing to swap.
00062Er 3               
00062Er 3  A0 14        	ldy #TABSIZ+3
000630r 3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000632r 3  A0 03        	ldy #3
000634r 3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
000636r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000638r 3               bsort2:
000638r 3  18           	clc
000639r 3  A5 68        	lda z80_x
00063Br 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00063Dr 3  85 68        	sta z80_x
00063Fr 3  90 02        	bcc :+
000641r 3  E6 69        	inc z80_i
000643r 3               :
000643r 3  C6 rr        	dec qscnt
000645r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000647r 3  60           	rts
000648r 3               
000648r 3               ;qscnt:	.byte 0
000648r 3               
000648r 3               bsort1:
000648r 3  A0 11        	ldy #TABSIZ
00064Ar 3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
00064Cr 3  C9 FF        	cmp #255		; is it enabled?
00064Er 3  F0 E8        	beq bsort2		; no, nothing to swap.
000650r 3  20 rr rr     	jsr swspr		; swap positions.
000653r 3  4C rr rr     	jmp bsort2
000656r 3               swemp:
000656r 3  A0 11        	ldy #TABSIZ
000658r 3  B1 68        	lda (z80_ix),y		; next table entry.
00065Ar 3  C9 FF        	cmp #255		; is that one on?
00065Cr 3  F0 DA        	beq bsort2		; no, nothing to swap.
00065Er 3  20 rr rr     	jsr swspr		; swap positions.
000661r 3  4C rr rr     	jmp bsort2
000664r 3               
000664r 3               ; Swap sprites.
000664r 3               
000664r 3               swspr:
000664r 3  A5 68        	lda z80_x		; table address
000666r 3  85 64        	sta z80_e		; copy to de pair.
000668r 3  85 66        	sta z80_l		; copy to hl pair.
00066Ar 3  A5 69        	lda z80_i
00066Cr 3  85 67        	sta z80_h
00066Er 3  85 65        	sta z80_d
000670r 3               
000670r 3  18           	clc
000671r 3  A5 66        	lda z80_l
000673r 3  69 11        	adc #TABSIZ		; distance to second entry.
000675r 3  85 66        	sta z80_l
000677r 3  90 02        	bcc :+
000679r 3  E6 67        	inc z80_h
00067Br 3               :
00067Br 3  A9 11        	lda #TABSIZ		; bytes to swap.
00067Dr 3  85 63        	sta z80_b
00067Fr 3  A0 00        	ldy #0
000681r 3               swspr0:
000681r 3  B1 66        	lda (z80_hl),y		; fetch second byte.
000683r 3  48           	pha
000684r 3  B1 64        	lda (z80_de),y 		; fetch first byte.
000686r 3  91 66        	sta (z80_hl),y 		; copy to second.
000688r 3  68           	pla
000689r 3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
00068Br 3               
00068Br 3  E6 64        	inc z80_e 		; next byte.
00068Dr 3  D0 02        	bne :+
00068Fr 3  E6 65        	inc z80_d
000691r 3               :
000691r 3  E6 66        	inc z80_l 		; next byte.
000693r 3  D0 02        	bne :+
000695r 3  E6 67        	inc z80_h
000697r 3               :
000697r 3  C6 63        	dec z80_b
000699r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
00069Br 3  60           	rts
00069Cr 3               
00069Cr 3               ;--------------------------------------------------------------
00069Cr 3               ; Get messagenr x in hl
00069Cr 3               ;
00069Cr 3               ; Input:
00069Cr 3               ;  HL = pointer to message list
00069Cr 3               ;  X  = message number.
00069Cr 3               ;--------------------------------------------------------------
00069Cr 3               
00069Cr 3               getwrd:
00069Cr 3  E0 00        	cpx #0
00069Er 3  D0 01        	bne:+ 			; first word in list?
0006A0r 3  60           	rts 			; yep, don't search.
0006A1r 3               :
0006A1r 3  A0 00        	ldy #0
0006A3r 3               getwd0:
0006A3r 3  B1 66        	lda (z80_hl),y
0006A5r 3  48           	pha
0006A6r 3  E6 66        	inc z80_l
0006A8r 3  D0 02        	bne :+
0006AAr 3  E6 67        	inc z80_h
0006ACr 3               :
0006ACr 3  68           	pla
0006ADr 3  C9 80        	cmp #128		; found end?
0006AFr 3  30 F2        	bmi getwd0		; no, carry on.
0006B1r 3  CA           	dex			; until we have right number.
0006B2r 3  D0 EF        	bne getwd0
0006B4r 3  60           	rts
0006B5r 3               
0006B5r 3               ;-------------------------------------------------
0006B5r 3               ; Get next print column position.
0006B5r 3               ;-------------------------------------------------
0006B5r 3               
0006B5r 3               nexpos:
0006B5r 3  E6 rr        	inc dispx		; move along one position.
0006B7r 3  A5 rr        	lda dispx 		; get coordinate.
0006B9r 3               ;	and #31
0006B9r 3  60           	rts 			; return with status in zero flag.
0006BAr 3               
0006BAr 3               ;-------------------------------------------------
0006BAr 3               ; Get next print line position.
0006BAr 3               ;-------------------------------------------------
0006BAr 3               
0006BAr 3               nexlin:
0006BAr 3  E6 rr        	inc dispy 		; newline.
0006BCr 3  A5 rr        	lda dispy		; vertical position.
0006BEr 3  C9 18        	cmp #24			; past screen edge?
0006C0r 3  B0 01        	bcs :+
0006C2r 3  60           	rts			; no, still okay.
0006C3r 3               :
0006C3r 3  A9 00        	lda #0			; restart at top.
0006C5r 3  85 rr        	sta dispy
0006C7r 3  60           	rts
0006C8r 3               
0006C8r 3               ;----------------------------------------------------
0006C8r 3               ; Delay routine 1/50 sec
0006C8r 3               ;
0006C8r 3               ; Wait 1/60 sec = 16666 usec
0006C8r 3               ; Wait 208 x 16 =  3328 usec
0006C8r 3               ;                 19994 usec
0006C8r 3               ; rts           =     6 usec
0006C8r 3               ; Total         = 20000 usec
0006C8r 3               ;----------------------------------------------------
0006C8r 3               
0006C8r 3               delay:
0006C8r 3  85 rr        	sta xtmp
0006CAr 3               del_loop:
0006CAr 3  20 66 FE     	jsr SCRSYNC		; wait for flyback
0006CDr 3               
0006CDr 3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0006CFr 3               delay1:
0006CFr 3  61 80        	adc ($80,x)		;	 6 usec
0006D1r 3  61 80        	adc ($80,x)		;	 6 usec
0006D3r 3  88           	dey			;	 2 usec
0006D4r 3  D0 F9        	bne delay1		;	 2 usec
0006D6r 3  EA           	nop			; 2 usec
0006D7r 3  EA           	nop			; 2 usec
0006D8r 3               				; tot: 20000 usec
0006D8r 3  C6 rr        	dec xtmp
0006DAr 3  D0 EE        	bne del_loop
0006DCr 3  60           	rts
0006DDr 3               
0006DDr 3               ; Definition of variables
0006DDr 3               ; Make sure pointers are arranged in the same order as the data itself.
0006DDr 3               
0006DDr 3               ;msgptr:		.word msgdat	; messages
0006DDr 3               ;blkptr:		.word chgfx	; block graphics.
0006DDr 3               ;proptr:		.word bprop	; address of char properties.
0006DDr 3               ;sptptr:		.word sprgfx	; sprite graphics
0006DDr 3               ;frmptr:		.word frmlst	; sprite frames.
0006DDr 3               ;scrptr:		.word scdat	; address of screens.
0006DDr 3               ;nmeptr:		.word nmedat	; enemy start positions.
0006DDr 3               ;objptr:		.word objdta	; object graphics
0006DDr 3               
0006DDr 3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
0006E1r 3               
0006E1r 3               ; Don't change the order of these four.
0006E1r 3               ; Menu routine relies on winlft following wintop.
0006E1r 3               
0006E1r 3  01           wintop:		.byte WINDOWTOP	; top of window.
0006E2r 3  01           winlft:		.byte WINDOWLFT	; left edge.
0006E3r 3  16           winhgt:		.byte WINDOWHGT	; window height.
0006E4r 3  16           winwid:		.byte WINDOWWID	; window width.
0006E5r 3  01           numob:		.byte NUMOBJ	; number of objects in game.
0006E6r 3               
0006E6r 3  00           tmpscr:		.byte 0
0006E7r 3  00           sndtyp:		.byte 0
0006E8r 3  00           colpatt:	.byte 0
0006E9r 3               
0006E9r 3               ;----------------------------------------------------
0006E9r 3               ; Wait for keypress.
0006E9r 3               ;----------------------------------------------------
0006E9r 3               
0006E9r 3               prskey:
0006E9r 3  98           	tya
0006EAr 3  48           	pha
0006EBr 3               prsloop:
0006EBr 3  20 rr rr     	jsr vsync
0006EEr 3  20 71 FE     	jsr READKEY
0006F1r 3  C0 FF        	cpy #255
0006F3r 3  F0 F6        	beq prsloop		; wait until key pressed
0006F5r 3  20 rr rr     	jsr joykey
0006F8r 3  68           	pla
0006F9r 3  A8           	tay
0006FAr 3  60           	rts
0006FBr 3               
0006FBr 3               ;----------------------------------------------------
0006FBr 3               ; Process sprites.
0006FBr 3               ;----------------------------------------------------
0006FBr 3               
0006FBr 3               pspr:
0006FBr 3  A9 0C        	lda #NUMSPR		; sprites to process.
0006FDr 3  85 rr        	sta sprptr
0006FFr 3               
0006FFr 3  A9 rr        	lda #<sprtab 		; sprite table.
000701r 3  85 68        	sta z80_x
000703r 3  A9 rr        	lda #>sprtab
000705r 3  85 69        	sta z80_i
000707r 3               pspr1:
000707r 3  A0 00        	ldy #0
000709r 3  B1 68        	lda (z80_ix),y		; fetch sprite type.
00070Br 3  C9 09        	cmp #9 			; within range of sprite types?
00070Dr 3  B0 03        	bcs :+
00070Fr 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000712r 3               :
000712r 3  18           	clc
000713r 3  A5 68        	lda z80_x
000715r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000717r 3  85 68        	sta z80_x
000719r 3  90 02        	bcc :+
00071Br 3  E6 69        	inc z80_i		; next sprite.
00071Dr 3               :
00071Dr 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
00071Fr 3  D0 E6        	bne pspr1
000721r 3  60           	rts
000722r 3               
000722r 3               ;sprptr:	.byte 0
000722r 3               
000722r 3               pspr2:
000722r 3  A5 68        	lda z80_x 		; store original sprite pointer.
000724r 3  85 rr        	sta ogptr
000726r 3  A5 69        	lda z80_i
000728r 3  85 rr        	sta ogptr+1
00072Ar 3  20 rr rr     	jsr pspr3		; do the routine.
00072Dr 3               rtorg:
00072Dr 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
00072Fr 3  85 68        	sta z80_x
000731r 3  A5 rr        	lda ogptr+1
000733r 3  85 69        	sta z80_i
000735r 3               rtorg0:
000735r 3  60           	rts
000736r 3               
000736r 3               pspr3:
000736r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000738r 3  85 66        	sta z80_l
00073Ar 3  A9 rr        	lda #>evtyp0
00073Cr 3  85 67        	sta z80_h
00073Er 3               pspr4:
00073Er 3  B1 68        	lda (z80_ix),y
000740r 3  0A           	asl a			; double accumulator.
000741r 3  18           	clc
000742r 3  65 66        	adc z80_l
000744r 3  85 66        	sta z80_l
000746r 3  90 02        	bcc :+
000748r 3  E6 67        	inc z80_h
00074Ar 3               :
00074Ar 3  B1 66        	lda (z80_hl),y
00074Cr 3  85 64        	sta z80_e 		; copy to de.
00074Er 3  48           	pha
00074Fr 3               
00074Fr 3  E6 66        	inc z80_l 		; next byte of address.
000751r 3  D0 02        	bne :+
000753r 3  E6 67        	inc z80_h
000755r 3               :
000755r 3  B1 66        	lda (z80_hl),y 		; address high.
000757r 3  85 65        	sta z80_d
000759r 3               
000759r 3  48           	pha	 		; swap address into hl.
00075Ar 3  A5 67        	lda z80_h
00075Cr 3  85 65        	sta z80_d
00075Er 3  68           	pla
00075Fr 3  85 67        	sta z80_h
000761r 3  68           	pla
000762r 3  85 66        	sta z80_l
000764r 3  A5 66        	lda z80_l
000766r 3  85 64        	sta z80_e
000768r 3               
000768r 3  6C 66 00     	jmp (z80_hl) 		; go there.
00076Br 3               
00076Br 3               ; Variables start here.
00076Br 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00076Br 3               
00076Br 3  08           wntopx:		.byte (8 * WINDOWTOP)
00076Cr 3  08           wnlftx:		.byte (8 * WINDOWLFT)
00076Dr 3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00076Er 3  A6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00076Fr 3               
00076Fr 3               ; Assorted game routines which can go in contended memory.
00076Fr 3               
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               ; Entry for inventory called by the INV command
00076Fr 3               ;
00076Fr 3               ; Input:
00076Fr 3               ;  X   = message nr with objects seperated with ,
00076Fr 3               ;
00076Fr 3               ; Output:
00076Fr 3               ;  OPT = selected objectnr of INV menu
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               
00076Fr 3               .if mflag
00076Fr 3               minve:
00076Fr 3               .if xflag
00076Fr 3               	lda #WINDOWHGT
00076Fr 3               	asl a
00076Fr 3               	sta winhgt
00076Fr 3               	lda #WINDOWWID
00076Fr 3               	asl a
00076Fr 3               	sta winwid
00076Fr 3               .endif
00076Fr 3               .if gflag
00076Fr 3               	lda #$ff		; blue frontcolour
00076Fr 3               	sta andeor
00076Fr 3               	lda #$aa		; yellow backcoloour
00076Fr 3               	sta andeor+1
00076Fr 3               .endif
00076Fr 3               	lda #<(invdis)		; routine address.
00076Fr 3               	sta mod0+1		; set up menu routine.
00076Fr 3               	sta mod2+1		; set up count routine.
00076Fr 3               	lda #>(invdis)
00076Fr 3               	sta mod0+2
00076Fr 3               	sta mod2+2
00076Fr 3               	lda #<(fopt)		; find option from available objects.
00076Fr 3               	sta mod1+1		; set up routine.
00076Fr 3               	lda #>(fopt)
00076Fr 3               	sta mod1+1+1
00076Fr 3               	jmp dbox		; do menu routine.
00076Fr 3               
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               ; Entry for menu called by the MENU command
00076Fr 3               ;
00076Fr 3               ; Input:
00076Fr 3               ;  X   = message nr with menu items seperated with ,
00076Fr 3               ;
00076Fr 3               ; Output:
00076Fr 3               ;  OPT = selected line nr of MENU menu
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               
00076Fr 3               mmenu:
00076Fr 3               	lda #<(always)		; routine address.
00076Fr 3               	sta mod0+1		; set up routine.
00076Fr 3               	sta mod2+1		; set up count routine.
00076Fr 3               	lda #>(always)
00076Fr 3               	sta mod0+2
00076Fr 3               	sta mod2+2
00076Fr 3               
00076Fr 3               	lda #<(fstd)		; standard option selection.
00076Fr 3               	sta mod1+1		; set up routine.
00076Fr 3               	lda #>(fstd)
00076Fr 3               	sta mod1+2
00076Fr 3               
00076Fr 3               ; Drop through into box routine.
00076Fr 3               
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               ; Work out size of box for message or menu.
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               
00076Fr 3               dbox:
00076Fr 3               	lda #<(msgdat)		; pointer to messages.
00076Fr 3               	sta z80_l
00076Fr 3               	lda #>(msgdat)
00076Fr 3               	sta z80_h
00076Fr 3               
00076Fr 3               	jsr getwrd		; get message number.
00076Fr 3               
00076Fr 3               	lda z80_h		; store pointer to message.
00076Fr 3               	sta TmpAddr
00076Fr 3               	lda z80_l
00076Fr 3               	sta TmpAddr+1
00076Fr 3               
00076Fr 3               	lda #1			; height.
00076Fr 3               	sta z80_d
00076Fr 3               	lda #0			; start at object zero.
00076Fr 3               	sta combyt		; store number of object in combyt.
00076Fr 3               	sta z80_e		; maximum width.
00076Fr 3               dbox5:
00076Fr 3               	lda #0			; this line"s width.
00076Fr 3               	sta z80_b
00076Fr 3               mod2:
00076Fr 3               	jsr always		; item in player"s possession?
00076Fr 3               	cmp #255
00076Fr 3               	bne dbox6		; not in inventory, skip this line.
00076Fr 3               	inc z80_d		; add to tally.
00076Fr 3               dbox6:
00076Fr 3               	ldy #0			; get character.
00076Fr 3               	lda (z80_hl),y
00076Fr 3               	sta z80_a
00076Fr 3               	inc z80_l		; next character.
00076Fr 3               	bne :+
00076Fr 3               	inc z80_h
00076Fr 3               :
00076Fr 3               	lda z80_a		; reached end of line?
00076Fr 3               	cmp #','
00076Fr 3               	beq dbox3		; yes.
00076Fr 3               	cmp #13
00076Fr 3               	beq dbox3		; yes.
00076Fr 3               	inc z80_b		; add to this line"s width.
00076Fr 3               	lda z80_a
00076Fr 3               	bmi dbox4		; end of message? yes, end count.
00076Fr 3               	jmp dbox6		; repeat until we find the end.
00076Fr 3               dbox3:
00076Fr 3               	lda z80_e		; maximum line width.
00076Fr 3               	cmp z80_b		; have we exceeded longest so far?
00076Fr 3               	bpl dbox5		; no, carry on looking.
00076Fr 3               	lda z80_b		; make this the widest so far.
00076Fr 3               	sta z80_e
00076Fr 3               	jmp dbox5		; keep looking.
00076Fr 3               dbox4:
00076Fr 3               	lda z80_e		; maximum line width.
00076Fr 3               	cmp z80_b		; have we exceeded longest so far?
00076Fr 3               	bpl dbox8		; no, carry on looking.
00076Fr 3               	lda z80_b		; final line is the longest so far.
00076Fr 3               	sta z80_e
00076Fr 3               dbox8:
00076Fr 3               	dec z80_d		; decrement items found.
00076Fr 3               	bne :+			; total was zero.
00076Fr 3               	lda #255
00076Fr 3               	sta varopt
00076Fr 3               	jmp dbox15
00076Fr 3               :
00076Fr 3               	lda z80_e		; longest line.
00076Fr 3               	bne :+			; was it zero?
00076Fr 3               	jmp dbox15		; total was zero.
00076Fr 3               :
00076Fr 3               	sta bwid		; set up size.
00076Fr 3               	lda z80_d
00076Fr 3               	sta blen
00076Fr 3               
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               ; That's set up our box size.
00076Fr 3               ;--------------------------------------------------------------
00076Fr 3               
00076Fr 3               	lda winhgt		; window height in characters.
00076Fr 3               	sec
00076Fr 3               	sbc z80_d		; subtract height of box.
00076Fr 3               	lsr a			; divide by 2.
00076Fr 3               	clc
00076Fr 3               	adc wintop		; add top edge of window.
00076Fr 3               	sta btop		; set up box top.
00076Fr 3               
00076Fr 3               	lda winwid		; window width in characters.
00076Fr 3               	sec
00076Fr 3               	sbc z80_e		; subtract box width.
00076Fr 3               	lsr a			; divide by 2.
00076Fr 3               	clc
00076Fr 3               	adc winlft		; add left edge of window.
00076Fr 3               	sta blft		; box left.
00076Fr 3               
00076Fr 3               	lda #<(font-256)		; font.
00076Fr 3               	sta grbase		; set up for text display.
00076Fr 3               	lda #>(font-256)
00076Fr 3               	sta grbase+1
00076Fr 3               
00076Fr 3               	lda TmpAddr+1		; restore message pointer.
00076Fr 3               	sta z80_l
00076Fr 3               	lda TmpAddr
00076Fr 3               	sta z80_h
00076Fr 3               
00076Fr 3               	lda btop		; box top.
00076Fr 3               	sta dispy		; set display coordinate.
00076Fr 3               	lda #0			; start at object zero.
00076Fr 3               	sta combyt		; store number of object in combyt.
00076Fr 3               dbox2:
00076Fr 3               	lda combyt		; get object number.
00076Fr 3               	sta z80_a
00076Fr 3               mod0:
00076Fr 3               	jsr always		; check inventory for display.
00076Fr 3               	cmp #255
00076Fr 3               	beq :+
00076Fr 3               	jmp dbox13		; not in inventory, skip this line.
00076Fr 3               :
00076Fr 3               	lda blft		; box left.
00076Fr 3               	sta dispx		; set left display position.
00076Fr 3               	lda bwid		; box width.
00076Fr 3               	sta z80_b		; store width.
00076Fr 3               dbox0:
00076Fr 3               	ldy #0
00076Fr 3               	lda (z80_hl),y		; get character.
00076Fr 3               	cmp #','		; end of line?
00076Fr 3               	beq dbox1		; yes, next one.
00076Fr 3               	cmp #13			; end of line?
00076Fr 3               	beq dbox1		; yes, next one.
00076Fr 3               
00076Fr 3               	cmp #141			; end of line?
00076Fr 3               	bne :+
00076Fr 3               	dec bwid
00076Fr 3               	jmp dbox7		; yes, next one.
00076Fr 3               :
00076Fr 3               	dec z80_b		; one less to display.
00076Fr 3               	and #127		; remove terminator.
00076Fr 3               
00076Fr 3               	jsr pchr		; display on screen.
00076Fr 3               
00076Fr 3               	ldy #0
00076Fr 3               	lda (z80_hl),y		; get character.
00076Fr 3               	sta z80_a
00076Fr 3               	inc z80_l		; next character.
00076Fr 3               	bne :+
00076Fr 3               	inc z80_h
00076Fr 3               :
00076Fr 3               	lda z80_a
00076Fr 3               	cmp #128		; end of message?
00076Fr 3               	bmi :+
00076Fr 3               	jmp dbox7		; yes, job done.
00076Fr 3               :
00076Fr 3               	lda z80_b		; chars remaining.
00076Fr 3               	beq :+			; are any left?
00076Fr 3               	jmp dbox0		; yes, continue.
00076Fr 3               :
00076Fr 3               ;---------------------------------------------------
00076Fr 3               ; Reached limit of characters per line.
00076Fr 3               ;---------------------------------------------------
00076Fr 3               
00076Fr 3               dbox9:
00076Fr 3               	ldy #0
00076Fr 3               	lda (z80_hl),y		; get character.
00076Fr 3               	inc z80_l		; next one.
00076Fr 3               	bne :+
00076Fr 3               	inc z80_h
00076Fr 3               :
00076Fr 3               	cmp #','		; another line?
00076Fr 3               	beq dbox10		; yes, do next line.
00076Fr 3               	cmp #13			; another line?
00076Fr 3               	beq dbox10		; yes, do next line.
00076Fr 3               	cmp #128		; end of message?
00076Fr 3               	bcs :+
00076Fr 3               	jmp dbox11		; yes, finish message.
00076Fr 3               :
00076Fr 3               	jmp dbox9
00076Fr 3               
00076Fr 3               ;---------------------------------------------------
00076Fr 3               ; Fill box to end of line.
00076Fr 3               ;---------------------------------------------------
00076Fr 3               
00076Fr 3               dboxf:
00076Fr 3               	lda #32			; space character.
00076Fr 3               	jsr pchr		; display character.
00076Fr 3               	dec z80_b
00076Fr 3               	beq :+
00076Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00076Fr 3               :
00076Fr 3               	rts
00076Fr 3               dbox1:
00076Fr 3               	inc z80_l		; skip character.
00076Fr 3               	bne :+
00076Fr 3               	inc z80_h
00076Fr 3               :
00076Fr 3               	jsr dboxf		; fill box out to right side.
00076Fr 3               dbox10:
00076Fr 3               	inc dispy		; y coordinate down a line next position.
00076Fr 3               	jmp dbox2		; next line.
00076Fr 3               dbox7:
00076Fr 3               	lda z80_b		; chars remaining.
00076Fr 3               	bne :+			; are any left?
00076Fr 3               	jmp dbox11		; no, nothing to draw.
00076Fr 3               :
00076Fr 3               	jsr dboxf		; fill message to line.
00076Fr 3               
00076Fr 3               ;------------------------------------------------------
00076Fr 3               ; Drawn the box menu, now select option.
00076Fr 3               ;------------------------------------------------------
00076Fr 3               
00076Fr 3               dbox11:
00076Fr 3               	lda btop		; box top.
00076Fr 3               	sta dispy		; set bar position.
00076Fr 3               dbox14:
00076Fr 3               	jsr joykey		; get controls.
00076Fr 3               	cmp #$7f		; anything pressed?
00076Fr 3               	bne dbox14		; yes, debounce it.
00076Fr 3               	jsr dbar		; draw bar.
00076Fr 3               dbox12:
00076Fr 3               	jsr joykey		; get controls.
00076Fr 3               	cmp #$7f		; anything pressed?
00076Fr 3               	beq dbox12		; no, nothing.
00076Fr 3               	and #16			; fire button pressed?
00076Fr 3               	bne :+
00076Fr 3               mod1:
00076Fr 3               	jmp fstd		; yes, job done.
00076Fr 3               :
00076Fr 3               	jsr dbar		; delete bar.
00076Fr 3               
00076Fr 3               	lda joyval		; joystick reading.
00076Fr 3               	and #8			; going up?
00076Fr 3               	beq dboxu		; yes, go up.
00076Fr 3               
00076Fr 3               	ldx dispy		; vertical position of bar.
00076Fr 3               	inx			; look down.
00076Fr 3               	txa
00076Fr 3               	sec
00076Fr 3               	sbc btop		; find distance from top.
00076Fr 3               	cmp blen		; top of box.
00076Fr 3               	bne :+
00076Fr 3               	jmp dbox14		; yes, go no further.
00076Fr 3               :
00076Fr 3               	inc dispy		; move bar.
00076Fr 3               	jmp dbox14		; continue.
00076Fr 3               dboxu:
00076Fr 3               	lda dispy		; vertical position of bar.
00076Fr 3               	cmp btop		; are we at the top?
00076Fr 3               	bne :+
00076Fr 3               	jmp dbox14		; yes, go no further.
00076Fr 3               :
00076Fr 3               	dec dispy		; move bar.
00076Fr 3               	jmp dbox14		; continue.
00076Fr 3               fstd:
00076Fr 3               	lda dispy		; bar position.
00076Fr 3               	sec
00076Fr 3               	sbc btop		; find selected option.
00076Fr 3               	sta varopt		; store the option.
00076Fr 3               	jmp redraw		; redraw the screen.
00076Fr 3               
00076Fr 3               ;------------------------------------------------------
00076Fr 3               ; Option not available.  Skip this line.
00076Fr 3               ;------------------------------------------------------
00076Fr 3               
00076Fr 3               dbox13:
00076Fr 3               	ldy #0
00076Fr 3               	lda (z80_hl),y		; get character.
00076Fr 3               	inc z80_l		; next one.
00076Fr 3               	bne :+
00076Fr 3               	inc z80_h
00076Fr 3               :
00076Fr 3               	cmp #','		; another line?
00076Fr 3               	bne :+
00076Fr 3               	jmp dbox2		; yes, do next line.
00076Fr 3               :
00076Fr 3               	cmp #13			; another line?
00076Fr 3               	bne :+
00076Fr 3               	jmp dbox2		; yes, do next line.
00076Fr 3               :
00076Fr 3               
00076Fr 3               	bpl :+			; end of message?
00076Fr 3               	jmp dbox11		; yes, finish message.
00076Fr 3               :
00076Fr 3               	jmp dbox13
00076Fr 3               dbox15:
00076Fr 3               .if xflag
00076Fr 3               	lda #WINDOWWID
00076Fr 3               	sta winwid
00076Fr 3               	lda #WINDOWHGT
00076Fr 3               	sta winhgt
00076Fr 3               .endif
00076Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00076Fr 3               	sta z80_h
00076Fr 3               	lda TmpAddr+1
00076Fr 3               	sta z80_l
00076Fr 3               	rts
00076Fr 3               
00076Fr 3               ;------------------------------------------------------
00076Fr 3               ; Invert bar
00076Fr 3               ;------------------------------------------------------
00076Fr 3               
00076Fr 3               dbar:
00076Fr 3               	lda blft		; box left.
00076Fr 3               	sta dispx		; set display coordinate.
00076Fr 3               	jsr gprad		; get printing address.
00076Fr 3               
00076Fr 3               	lda bwid		; box width.
00076Fr 3               	sta z80_c		; loop counter in c.
00076Fr 3               	lda z80_h
00076Fr 3               	sta z80_d		; store screen address high byte.
00076Fr 3               dbar1:
00076Fr 3               	ldx #7			; pixel height in b.
00076Fr 3               dbar0:
00076Fr 3               	ldy scrtab,x
00076Fr 3               	lda (scraddr),y		; get screen byte.
00076Fr 3               	eor #255		; reverse all bits.
00076Fr 3               	sta (scraddr),y		; write back to screen.
00076Fr 3               	dex			; next line down.
00076Fr 3               	bpl dbar0		; draw rest of character.
00076Fr 3               
00076Fr 3               	inc scraddr		; one char right.
00076Fr 3               	dec z80_c		; decrement character counter.
00076Fr 3               	bne dbar1		; repeat for whole line.
00076Fr 3               	rts
00076Fr 3               
00076Fr 3               ;------------------------------------------------------
00076Fr 3               ; Point to object
00076Fr 3               ;
00076Fr 3               ; Input:
00076Fr 3               ;  combyt
00076Fr 3               ;
00076Fr 3               ; Output:
00076Fr 3               ;  A = object number, A=255 if already in possession
00076Fr 3               ;------------------------------------------------------
00076Fr 3               
00076Fr 3               invdis:
00076Fr 3               	lda z80_l		; store message text pointer.
00076Fr 3               	pha
00076Fr 3               	lda z80_h
00076Fr 3               	pha
00076Fr 3               	lda combyt		; object number.
00076Fr 3               	inc combyt		; ready for next one.
00076Fr 3               	jsr gotob		; check if we have object.
00076Fr 3               	tay
00076Fr 3               	pla
00076Fr 3               	sta z80_h
00076Fr 3               	pla
00076Fr 3               	sta z80_l
00076Fr 3               	tya
00076Fr 3               	rts
00076Fr 3               
00076Fr 3               ;------------------------------------------------------
00076Fr 3               ; Find option selected.
00076Fr 3               ;
00076Fr 3               ; Input:
00076Fr 3               ;  -
00076Fr 3               ;
00076Fr 3               ; Output:
00076Fr 3               ;  OPT = selected object
00076Fr 3               ;------------------------------------------------------
00076Fr 3               
00076Fr 3               fopt:
00076Fr 3               	lda dispy
00076Fr 3               	sec
00076Fr 3               	sbc btop		; find selected option.
00076Fr 3               	sta tmp+2		; option selected in b register.
00076Fr 3               	inc tmp+2
00076Fr 3               
00076Fr 3               	lda #0			; set to first item.
00076Fr 3               	sta combyt		; object number.
00076Fr 3               fopt0:
00076Fr 3               	jsr fobj		; find next object in inventory.
00076Fr 3               	dec tmp+2
00076Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00076Fr 3               
00076Fr 3               	lda combyt		; get option.
00076Fr 3               	sta varopt		; store the option.
00076Fr 3               	dec varopt		; one less, due to where we increment combyt.
00076Fr 3               	jmp redraw		; redraw the screen.
00076Fr 3               fobj:
00076Fr 3               	ldy combyt		; object number.
00076Fr 3               	inc combyt		; ready for next item.
00076Fr 3               	tya
00076Fr 3               	jsr gotob		; do we have this item?
00076Fr 3               	cmp #255
00076Fr 3               	bne :+
00076Fr 3               	rts
00076Fr 3               :
00076Fr 3               	jmp fobj		; yes, it's on the list.
00076Fr 3               
00076Fr 3               ;bwid:	.byte 0              ; box/menu width.
00076Fr 3               ;blen:	.byte 0              ; box/menu height.
00076Fr 3               ;btop:	.byte 0              ; box coordinates.
00076Fr 3               ;blft:	.byte 0
00076Fr 3               .endif
00076Fr 3               
00076Fr 3               
00076Fr 3               ;----------------------------------------------------
00076Fr 3               ; Clear sprite table.
00076Fr 3               ;
00076Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00076Fr 3               ;----------------------------------------------------
00076Fr 3               
00076Fr 3               xspr:
00076Fr 3  A9 FF        	lda #255		; clear byte.
000771r 3  A2 00        	ldx #0			; length of table.
000773r 3               xspr0:
000773r 3  9D rr rr     	sta sprtab,x		; sprite table.
000776r 3  E8           	inx			; move to next byte.
000777r 3  E0 CC        	cpx #SPRBUF
000779r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00077Br 3  60           	rts
00077Cr 3               
00077Cr 3               ;-------------------------------------------------------------
00077Cr 3               ; Initialise all objects.
00077Cr 3               ;
00077Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00077Cr 3               ;-------------------------------------------------------------
00077Cr 3               
00077Cr 3               .if oflag
00077Cr 3               iniob:
00077Cr 3               	lda #<objdta 		; objects table.
00077Cr 3               	sta z80_x
00077Cr 3               	lda #>objdta
00077Cr 3               	sta z80_i
00077Cr 3               
00077Cr 3               	ldx numob 		; number of objects in the game.
00077Cr 3               iniob0:
00077Cr 3               	ldy #35
00077Cr 3               	lda (z80_ix),y 		; start screen.
00077Cr 3               	ldy #32
00077Cr 3               	sta (z80_ix),y 		; set start screen.
00077Cr 3               
00077Cr 3               	ldy #36
00077Cr 3               	lda (z80_ix),y 		; find start y.
00077Cr 3               	ldy #33
00077Cr 3               	sta (z80_ix),y 		; set start y.
00077Cr 3               
00077Cr 3               	ldy #37
00077Cr 3               	lda (z80_ix),y 		; get initial x.
00077Cr 3               	ldy #34
00077Cr 3               	sta (z80_ix),y 		; set x coord.
00077Cr 3               
00077Cr 3               	clc 			; point to next object.
00077Cr 3               	lda z80_x
00077Cr 3               	adc #38			; distance between objects.
00077Cr 3               	sta z80_x
00077Cr 3               	bcc :+
00077Cr 3               	inc z80_i
00077Cr 3               :
00077Cr 3               	dex 			; repeat.
00077Cr 3               	bne iniob0
00077Cr 3               
00077Cr 3               	rts
00077Cr 3               .endif
00077Cr 3               
00077Cr 3               ;-----------------------------------------------
00077Cr 3               ; Redraw the screen.
00077Cr 3               ;
00077Cr 3               ; Remove old copy of all sprites for redraw.
00077Cr 3               ;-----------------------------------------------
00077Cr 3               
00077Cr 3               redraw:
00077Cr 3               .if gflag
00077Cr 3               	lda #$ff
00077Cr 3               	sta andeor
00077Cr 3               	lda #$00
00077Cr 3               	sta andeor+1
00077Cr 3               .endif
00077Cr 3               .if xflag
00077Cr 3               	lda #WINDOWWID
00077Cr 3               	sta winwid
00077Cr 3               	lda #WINDOWHGT
00077Cr 3               	sta winhgt
00077Cr 3               .endif
00077Cr 3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00077Er 3  48           	pha
00077Fr 3  A5 68        	lda z80_x
000781r 3  48           	pha
000782r 3               
000782r 3  20 rr rr     	jsr droom		; show screen layout.
000785r 3               
000785r 3               
000785r 3               .if oflag
000785r 3               	jsr shwob		; draw objects.
000785r 3               .endif
000785r 3               numsp0:
000785r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000787r 3  85 rr        	sta tmp
000789r 3               
000789r 3  A9 rr        	lda #<sprtab		; sprite table.
00078Br 3  85 68        	sta z80_x
00078Dr 3  A9 rr        	lda #>sprtab
00078Fr 3  85 69        	sta z80_i
000791r 3               redrw0:
000791r 3  A0 00        	ldy #0
000793r 3  B1 68        	lda (z80_ix),y		; old sprite type.
000795r 3  C9 FF        	cmp #255		; is it enabled?
000797r 3  F0 0B        	beq redrw1 		; no, find next one.
000799r 3               
000799r 3  A0 03        	ldy #3
00079Br 3  B1 68        	lda (z80_ix),y 		; sprite y.
00079Dr 3  C9 B1        	cmp #177		; beyond maximum?
00079Fr 3  B0 03        	bcs redrw1		; yes, nothing to draw.
0007A1r 3               
0007A1r 3  20 rr rr     	jsr sspria		; show single sprite.
0007A4r 3               redrw1:
0007A4r 3  18           	clc			; next sprite.
0007A5r 3  A5 68        	lda z80_x
0007A7r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0007A9r 3  85 68        	sta z80_x
0007ABr 3  90 02        	bcc :+
0007ADr 3  E6 69        	inc z80_i
0007AFr 3               :
0007AFr 3  C6 rr        	dec tmp			; repeat for remaining sprites.
0007B1r 3  D0 DE        	bne redrw0
0007B3r 3               rpblc1:
0007B3r 3               ;	jsr dshrp		; redraw shrapnel.
0007B3r 3               
0007B3r 3               .if aflag
0007B3r 3               	jsr rbloc		; draw blocks for this screen
0007B3r 3               .endif
0007B3r 3  68           	pla			; retrieve sprite pointer.
0007B4r 3  85 68        	sta z80_x
0007B6r 3  68           	pla
0007B7r 3  85 69        	sta z80_i
0007B9r 3               
0007B9r 3  60           	rts
0007BAr 3               
0007BAr 3               ;----------------------------------------------------------------------
0007BAr 3               ; FODDER check
0007BAr 3               ;----------------------------------------------------------------------
0007BAr 3               
0007BAr 3               .if pflag .or dflag
0007BAr 3               fdchk:
0007BAr 3               	cmp #FODDER 		; is it fodder?
0007BAr 3               	beq :+
0007BAr 3               	rts 			; no.
0007BAr 3               :
0007BAr 3               	lda #0			; wipe fodder in MAP
0007BAr 3               	ldy #0
0007BAr 3               	sta (bufaddr),y 	; rewrite block type.
0007BAr 3               
0007BAr 3               	lda dispx		; x=x/8
0007BAr 3               	pha
0007BAr 3               	lsr a
0007BAr 3               	lsr a
0007BAr 3               	lsr a
0007BAr 3               	sta dispx
0007BAr 3               
0007BAr 3               	lda dispy		; y=y/8
0007BAr 3               	pha
0007BAr 3               	lsr a
0007BAr 3               	lsr a
0007BAr 3               	lsr a
0007BAr 3               	sta dispy
0007BAr 3               
0007BAr 3               	lda #0 			; block to write.
0007BAr 3               	jsr pattr 		; write block.
0007BAr 3               
0007BAr 3               	pla
0007BAr 3               	sta dispy
0007BAr 3               	pla
0007BAr 3               	sta dispx
0007BAr 3               	rts
0007BAr 3               .endif
0007BAr 3               
0007BAr 3               ;----------------------------------------------------
0007BAr 3               ; Scrolly text and puzzle variables.
0007BAr 3               ;----------------------------------------------------
0007BAr 3               
0007BAr 3               .if sflag
0007BAr 3               txtbit:	.byte 128		; bit to write.
0007BAr 3               txtwid:	.byte 16		; width of ticker message.
0007BAr 3               txtpos:	.word msgdat
0007BAr 3               txtini:	.word msgdat
0007BAr 3               txtscr:	.word ScreenAddr
0007BAr 3               .endif
0007BAr 3               
0007BAr 3               ;----------------------------------------------------
0007BAr 3               ; Specialist routines.
0007BAr 3               ; Process shrapnel.
0007BAr 3               ;----------------------------------------------------
0007BAr 3               proshr:
0007BAr 3               .if pflag
0007BAr 3               	lda #<SHRAPN		; table.
0007BAr 3               	sta z80_x
0007BAr 3               	lda #>SHRAPN
0007BAr 3               	sta z80_i
0007BAr 3               
0007BAr 3               	lda #NUMSHR		; shrapnel pieces to process.
0007BAr 3               	sta shrctr
0007BAr 3               prosh0:
0007BAr 3               	ldy #0
0007BAr 3               	lda (z80_ix),y		; on/off marker.
0007BAr 3               	asl a
0007BAr 3               proshx:
0007BAr 3               	bcs :+
0007BAr 3               	jsr prosh1 		; on, so process it.
0007BAr 3               :
0007BAr 3               	clc
0007BAr 3               	lda z80_x
0007BAr 3               	adc #SHRSIZ
0007BAr 3               	sta z80_x
0007BAr 3               	bcc :+
0007BAr 3               	inc z80_i
0007BAr 3               :
0007BAr 3               	dec shrctr		; round again.
0007BAr 3               	bne prosh0
0007BAr 3               .endif
0007BAr 3               .if sflag
0007BAr 3               	jsr scrly
0007BAr 3               .endif
0007BAr 3  60           	rts
0007BBr 3               
0007BBr 3               .if pflag
0007BBr 3               ;shrctr:	.byte 0
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Proces shrapnel piece
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               prosh1:
0007BBr 3               	jsr plot 		; delete the pixel.
0007BBr 3               
0007BBr 3               	lda #<shrptr		; shrapnel routine pointers.
0007BBr 3               	sta z80_l
0007BBr 3               	lda #>shrptr
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_ix),y		; restore shrapnel type.
0007BBr 3               	jsr prosh2 		; run the routine.
0007BBr 3               	jsr chkxy		; check x and y are good before we redisplay.
0007BBr 3               
0007BBr 3               	lda #<SHRSIZ 		; distance to next.
0007BBr 3               	sta z80_e
0007BBr 3               	lda #>SHRSIZ
0007BBr 3               	sta z80_d
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Run the routine
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               prosh2:
0007BBr 3               	asl a 			; 2 bytes per address.
0007BBr 3               	tay
0007BBr 3               	lda shrptr,y
0007BBr 3               	sta z80_l
0007BBr 3               	lda shrptr+1,y 		; fetch high byte from table.
0007BBr 3               	sta z80_h
0007BBr 3               	jmp (z80_hl) 		; jump to routine.
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Paricle routine table
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               shrptr:	.word laser		; laser.
0007BBr 3               	.word trail		; vapour trail.
0007BBr 3               	.word shrap		; shrapnel from explosion.
0007BBr 3               	.word dotl		; horizontal starfield left.
0007BBr 3               	.word dotr		; horizontal starfield right.
0007BBr 3               	.word dotu		; vertical starfield up.
0007BBr 3               	.word dotd		; vertical starfield down.
0007BBr 3               	.word ptcusr		; user particle.
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Explosion shrapnel.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               shrap:
0007BBr 3               	ldy #1
0007BBr 3               	lda (z80_ix),y 		; get the angle.
0007BBr 3               	clc
0007BBr 3               	adc #<shrsin		; shrapnel sine table.
0007BBr 3               	sta z80_l
0007BBr 3               	lda #>shrsin
0007BBr 3               	adc #0
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_hl),y 		; fetch value from table.
0007BBr 3               	sta z80_e
0007BBr 3               	inc z80_l 		; next byte of table.
0007BBr 3               	bne :+
0007BBr 3               	inc z80_h
0007BBr 3               :
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_hl),y		; fetch value from table.
0007BBr 3               	sta z80_d
0007BBr 3               	inc z80_l		; next byte of table.
0007BBr 3               	bne :+
0007BBr 3               	inc z80_h
0007BBr 3               :
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_hl),y 		; fetch value from table.
0007BBr 3               	sta z80_c
0007BBr 3               	inc z80_l 		; next byte of table.
0007BBr 3               	bne :+
0007BBr 3               	inc z80_h
0007BBr 3               :
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_hl),y 		; fetch value from table.
0007BBr 3               	sta z80_b
0007BBr 3               
0007BBr 3               	ldy #2
0007BBr 3               	lda (z80_ix),y 		; x coordinate in hl.
0007BBr 3               	clc
0007BBr 3               	adc z80_e		; add sine lb
0007BBr 3               	sta (z80_ix),y		; store new coordinate lb.
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	adc z80_d		; add sine hb
0007BBr 3               	sta (z80_ix),y		; store new coordinate hb.
0007BBr 3               
0007BBr 3               	ldy #4
0007BBr 3               	lda (z80_ix),y	 	; y coordinate in hl.
0007BBr 3               	clc
0007BBr 3               	adc z80_c		; add cosine lb
0007BBr 3               	sta (z80_ix),y		; store new coordinate lb.
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	adc z80_b		; add cosine lb
0007BBr 3               	sta (z80_ix),y		; store new coordinate hb.
0007BBr 3               
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Move dots
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               dotl:
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	sec
0007BBr 3               	sbc #1		 	; move left.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               dotr:
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	clc
0007BBr 3               	adc #1		 	; move left.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               dotu:
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	sec
0007BBr 3               	sbc #1		 	; move up.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               dotd:
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	clc
0007BBr 3               	adc #1			; move down.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Check if coordinates are ok before redrawing at new position.
0007BBr 3               ;
0007BBr 3               ; left:   X>L		X=L	Ok
0007BBr 3               ; right:  R+15>X	X=R	Ok
0007BBr 3               ; top:    Y>T		Y=T	Ok
0007BBr 3               ; bottom: B+15>Y	Y=B	Ok
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               chkxy:
0007BBr 3               
0007BBr 3               ; top:    Y>T		Y=T	Ok
0007BBr 3               
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0007BBr 3               	cmp wntopx		; window top.
0007BBr 3               	beq kill
0007BBr 3               	bcs :+			; compare with top window limit.
0007BBr 3               kill:	jmp kilshr		; out of window, kill shrapnel.
0007BBr 3               :
0007BBr 3               ; left:   X>L		X=L	Ok
0007BBr 3               
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0007BBr 3               	cmp wnlftx		; left edge.
0007BBr 3               	beq kill
0007BBr 3               	bcs :+			; compare with left window limit.
0007BBr 3               	jmp kilshr		; out of window, kill shrapnel.
0007BBr 3               :
0007BBr 3               ; bottom: B+15>Y	Y=B	Ok
0007BBr 3               
0007BBr 3               	lda wnbotx		; point to bottom.
0007BBr 3               	clc
0007BBr 3               	adc #15
0007BBr 3               	ldy #3
0007BBr 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0007BBr 3               	beq kill
0007BBr 3               	bcs :+			; compare with shrapnel x coordinate.
0007BBr 3               	jmp kilshr		; off screen, kill shrapnel..
0007BBr 3               :
0007BBr 3               ; right:  R+15>X	X=R	Ok
0007BBr 3               
0007BBr 3               	lda wnrgtx		; point to right edge.
0007BBr 3               	clc
0007BBr 3               	adc #15
0007BBr 3               	ldy #5
0007BBr 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0007BBr 3               	beq kill
0007BBr 3               	bcs :+			; compare with window limit.
0007BBr 3               	jmp kilshr		; off screen, kill shrapnel.
0007BBr 3               :
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Drop through.
0007BBr 3               ; Display shrapnel.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               plot:
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y		; y integer.
0007BBr 3               	sta dispy	 	; workspace coordinates.
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y	 	; x integer.
0007BBr 3               	sta dispx 		; workspace coordinates.
0007BBr 3               
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_ix),y 		; type.
0007BBr 3               	bne :+			; is it a laser?
0007BBr 3               	jmp plot1 		; yes, draw laser instead.
0007BBr 3               :
0007BBr 3               plot0:
0007BBr 3               	lda dispx		; which pixel within byte do we
0007BBr 3               	and #7			; want to set first?
0007BBr 3               	tay
0007BBr 3               	lda dots,y 		; table of small pixel positions.
0007BBr 3               	sta z80_e 		; get value.
0007BBr 3               
0007BBr 3               	jsr scadd 		; screen address.
0007BBr 3               	ldy #0
0007BBr 3               	lda (scraddr),y		; see what's already there.
0007BBr 3               	eor z80_e
0007BBr 3               	sta (scraddr),y 	; put back on screen.
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               plot1:
0007BBr 3               	jsr scadd 		; screen address.
0007BBr 3               	ldy #0
0007BBr 3               	lda (scraddr),y 	; fetch byte there.
0007BBr 3               	eor #255 		; toggle all bits.
0007BBr 3               	sta (scraddr),y 	; new byte.
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Switch off shrapnel
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               kilshr:
0007BBr 3               	lda #128
0007BBr 3               	ldy #0
0007BBr 3               	sta (z80_ix),y	; switch off shrapnel.
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Sine/cosine table
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               shrsin:	.word 0,1024,391,946,724,724,946,391
0007BBr 3               	.word 1024,0,946,65144,724,64811,391,64589
0007BBr 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0007BBr 3               	.word 64512,0,64589,391,64811,724,65144,946
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Create trail
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               trail:
0007BBr 3               	ldy #1
0007BBr 3               	lda (z80_ix),y 	; time remaining.
0007BBr 3               	sec
0007BBr 3               	sbc #1
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	bne :+
0007BBr 3               	jmp trailk		; time to switch it off.
0007BBr 3               :
0007BBr 3               	jsr qrand		; get a random number.
0007BBr 3               	lsr a 			; x or y axis?
0007BBr 3               	bcc :+
0007BBr 3               	jmp trailv		; use y.
0007BBr 3               :
0007BBr 3               ; Trail horizontal
0007BBr 3               
0007BBr 3               	lsr a 			; which direction?
0007BBr 3               	bcc :+
0007BBr 3               	jmp traill		; go left.
0007BBr 3               :
0007BBr 3               ; Trail right
0007BBr 3               
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	clc
0007BBr 3               	adc #1	 		; go right.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ; Trail left
0007BBr 3               
0007BBr 3               traill:
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	sec
0007BBr 3               	sbc #1 			; go left.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ; Trail vertical
0007BBr 3               
0007BBr 3               trailv:
0007BBr 3               	lsr a		 	; which direction?
0007BBr 3               	bcc :+
0007BBr 3               	jmp trailu		; go up.
0007BBr 3               :
0007BBr 3               ; Trail down
0007BBr 3               
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	clc
0007BBr 3               	adc #1 			; go down.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ; Trail up
0007BBr 3               
0007BBr 3               trailu:
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y
0007BBr 3               	sec
0007BBr 3               	sbc #1 			; go up.
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ; Kill trail
0007BBr 3               
0007BBr 3               trailk:
0007BBr 3               	lda #200		; set off-screen to kill vapour trail.
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Create laser beam
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               laser:
0007BBr 3               	ldy #1
0007BBr 3               	lda (z80_ix),y 		; direction.
0007BBr 3               	ror a 			; left or right?
0007BBr 3               	bcc :+
0007BBr 3               	jmp laserl		; move left.
0007BBr 3               :
0007BBr 3               ; Laser right
0007BBr 3               
0007BBr 3               	lda #8			; distance to travel.
0007BBr 3               	sta z80_b
0007BBr 3               	jmp laserm		; move laser.
0007BBr 3               
0007BBr 3               ; Laser left
0007BBr 3               
0007BBr 3               laserl:
0007BBr 3               	lda #248		; distance to travel.
0007BBr 3               	sta z80_b
0007BBr 3               laserm:
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_ix),y		; x position.
0007BBr 3               	clc
0007BBr 3               	adc z80_b		; add distance.
0007BBr 3               	sta (z80_ix),y		; set new x coordinate.
0007BBr 3               
0007BBr 3               ; Test new block.
0007BBr 3               
0007BBr 3               	sta dispx 		; set x for block collision detection purposes.
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_ix),y 		; get y.
0007BBr 3               	sta dispy		; set coordinate for collision test.
0007BBr 3               	jsr tstbl 		; get block type there.
0007BBr 3               	cmp #WALL		; is it solid?
0007BBr 3               	bne :+
0007BBr 3               	jmp trailk		; yes, it cannot pass.
0007BBr 3               :
0007BBr 3               .if pflag .or dflag
0007BBr 3                       cmp #FODDER             ; is it fodder?
0007BBr 3                       bne :+
0007BBr 3                       jsr fdchk               ; remove fodder block.
0007BBr 3                       jmp trailk              ; destroy laser.
0007BBr 3               :
0007BBr 3               .endif
0007BBr 3                       rts                     ; no, ignore it.
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Dots mask
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               dots:	.byte 128,64,32,16,8,4,2,1
0007BBr 3               
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Plot, preserving de.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               plotde:
0007BBr 3               	lda z80_d 		; put de on stack.
0007BBr 3               	pha
0007BBr 3               	lda z80_e
0007BBr 3               	pha
0007BBr 3               
0007BBr 3               	jsr plot 		; plot pixel.
0007BBr 3               
0007BBr 3               	pla			; restore de from stack.
0007BBr 3               	sta z80_e
0007BBr 3               	pla
0007BBr 3               	sta z80_d
0007BBr 3               
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Shoot a laser.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               shoot:
0007BBr 3               	sta z80_c		; store direction in c register.
0007BBr 3               	ldy #8
0007BBr 3               	lda (z80_ix),y 		; y coordinate.
0007BBr 3               	clc
0007BBr 3               shoot1:
0007BBr 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0007BBr 3               	sta z80_l 		; put y coordinate in l.
0007BBr 3               
0007BBr 3               	ldy #9
0007BBr 3               	lda (z80_ix),y 		; x coordinate in h.
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	lda z80_i		; store pointer to sprite.
0007BBr 3               	pha
0007BBr 3               	lda z80_x
0007BBr 3               	pha
0007BBr 3               
0007BBr 3               	jsr fpslot 		; find particle slot.
0007BBr 3               	bcs :+
0007BBr 3               	jmp vapou2		; failed, restore ix.
0007BBr 3               :
0007BBr 3               	lda #0
0007BBr 3               	ldy #0
0007BBr 3               	sta (z80_ix),y 		; set up a laser.
0007BBr 3               
0007BBr 3               	lda z80_c
0007BBr 3               	ldy #1
0007BBr 3               	sta (z80_ix),y 		; set the direction.
0007BBr 3               
0007BBr 3               	lda z80_l
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y		; set y coordinate.
0007BBr 3               
0007BBr 3               	ror z80_c		; check direction we want.
0007BBr 3               	bcc :+
0007BBr 3               	jmp shootr		; shoot right.
0007BBr 3               :
0007BBr 3               	lda z80_h		; X position.
0007BBr 3               shoot0:
0007BBr 3               	and #248		; align on character boundary.
0007BBr 3               	ldy #5
0007BBr 3               	sta (z80_ix),y		; set x coordinate.
0007BBr 3               	jmp vapou0 		; draw first image.
0007BBr 3               shootr:
0007BBr 3               	lda z80_h		; x position.
0007BBr 3               	clc
0007BBr 3               	adc #15			; look right.
0007BBr 3               	jmp shoot0		; align and continue.
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Create a bit of vapour trail.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               vapour:
0007BBr 3               	lda z80_i		; store pointer to sprite.
0007BBr 3               	pha
0007BBr 3               	lda z80_x
0007BBr 3               	pha
0007BBr 3               
0007BBr 3               	ldy #8
0007BBr 3               	lda (z80_ix),y 		; y coordinate.
0007BBr 3               	clc
0007BBr 3               vapou3:
0007BBr 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0007BBr 3               	sta z80_l
0007BBr 3               
0007BBr 3               	ldy #9
0007BBr 3               	lda (z80_ix),y 		; x coordinate.
0007BBr 3               	adc #7
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	jsr fpslot 		; find particle slot.
0007BBr 3               	bcc :+
0007BBr 3               	jmp vapou1		; no, we can use it.
0007BBr 3               :
0007BBr 3               vapou2:
0007BBr 3               	pla
0007BBr 3               	sta z80_x
0007BBr 3               	pla
0007BBr 3               	sta z80_i
0007BBr 3               	rts
0007BBr 3               vapou1:
0007BBr 3               	lda z80_l
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y		; set up y.
0007BBr 3               
0007BBr 3               	lda z80_h
0007BBr 3               	ldy #5
0007BBr 3               	sta (z80_ix),y 		; set up x coordinate.
0007BBr 3               
0007BBr 3               	jsr qrand		; get quick random number.
0007BBr 3               	and #15			; random time.
0007BBr 3               	clc
0007BBr 3               	adc #15			; minimum time on screen.
0007BBr 3               	ldy #1
0007BBr 3               	sta (z80_ix),y		; set time on screen.
0007BBr 3               
0007BBr 3               	lda #1
0007BBr 3               	ldy #0
0007BBr 3               	sta (z80_ix),y		; define particle as vapour trail.
0007BBr 3               vapou0:
0007BBr 3               	jsr chkxy		; plot first position.
0007BBr 3               	jmp vapou2
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Create a user particle.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               ptusr:
0007BBr 3               	sta z80_f		; store timer.
0007BBr 3               
0007BBr 3               	ldy #8
0007BBr 3               	lda (z80_ix),y 		; y coordinate.
0007BBr 3               	clc
0007BBr 3               	adc #7			; mid-point of sprite.
0007BBr 3               	sta z80_l
0007BBr 3               
0007BBr 3               	ldy #9
0007BBr 3               	lda (z80_ix),y 		; x coordinate.
0007BBr 3               	clc
0007BBr 3               	adc #7			; mid-point of sprite.
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	jsr fpslot 		; find particle slot.
0007BBr 3               	bcs ptusr1
0007BBr 3               	rts 			; out of slots, can't generate anything.
0007BBr 3               ptusr1:
0007BBr 3               	lda z80_l
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y 		; set up y.
0007BBr 3               
0007BBr 3               	lda z80_h
0007BBr 3               	ldy #5
0007BBr 3               	sta (z80_ix),y		; set up x coordinate.
0007BBr 3               
0007BBr 3               	lda z80_f 		; restore timer.
0007BBr 3               	ldy #1
0007BBr 3               	sta (z80_ix),y		; set time on screen.
0007BBr 3               
0007BBr 3               	lda #7
0007BBr 3               	ldy #0
0007BBr 3               	sta (z80_ix),y		; define particle as user particle.
0007BBr 3               
0007BBr 3               	jmp chkxy		; plot first position.
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Create a vertical or horizontal star.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               star:
0007BBr 3               	lda z80_i		; store pointer to sprite.
0007BBr 3               	pha
0007BBr 3               	lda z80_x
0007BBr 3               	pha
0007BBr 3               
0007BBr 3               	jsr fpslot 		; find particle slot.
0007BBr 3               	bcs star7		; found one we can use.
0007BBr 3               star0:
0007BBr 3               	pla 			; restore sprite pointer.
0007BBr 3               	sta z80_x
0007BBr 3               	pla
0007BBr 3               	sta z80_i
0007BBr 3               	rts 			; out of slots, can't generate anything.
0007BBr 3               star7:
0007BBr 3               	lda z80_c		; direction.
0007BBr 3               	and #3 			; is it left?
0007BBr 3               	bne :+
0007BBr 3               	jmp star1 		; yes, it's left.
0007BBr 3               :
0007BBr 3               	cmp #1 			; is it right?
0007BBr 3               	bne :+
0007BBr 3               	jmp star2 		; yes, it's right.
0007BBr 3               :
0007BBr 3               	cmp #2 			; is it up?
0007BBr 3               	bne :+
0007BBr 3               	jmp star3 		; yes, it's up.
0007BBr 3               :
0007BBr 3               	ldy wntopx 		; get edge of screen.
0007BBr 3               	iny			; down one pixel.
0007BBr 3               	tya
0007BBr 3               star8:
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y 		; set y coord.
0007BBr 3               	jsr qrand 		; get quick random number.
0007BBr 3               star9:
0007BBr 3               	ldy #5
0007BBr 3               	sta (z80_ix),y		; set x position.
0007BBr 3               
0007BBr 3               	lda z80_c		; direction.
0007BBr 3               	and #3			; zero to three.
0007BBr 3               	clc
0007BBr 3               	adc #3			; 3 to 6 for starfield.
0007BBr 3               	ldy #0
0007BBr 3               	sta (z80_ix),y		; define particle as star.
0007BBr 3               	jsr chkxy		; plot first position.
0007BBr 3               	jmp star0
0007BBr 3               star1:
0007BBr 3               	jsr qrand		; get quick random number.
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y 		; set y coord.
0007BBr 3               
0007BBr 3               	lda wnrgtx 		; get edge of screen.
0007BBr 3               	clc
0007BBr 3               	adc #15			; add width of sprite minus 1.
0007BBr 3               	jmp star9
0007BBr 3               star2:
0007BBr 3               	jsr qrand 		; get quick random number.
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y		; set y coord.
0007BBr 3               
0007BBr 3               	lda wnlftx		; get edge of screen.
0007BBr 3               	jmp star9
0007BBr 3               star3:
0007BBr 3               	lda wnbotx 		; get edge of screen.
0007BBr 3               	clc
0007BBr 3               	adc #15 		; height of sprite minus one pixel.
0007BBr 3               	jmp star8
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Find particle slot for lasers or vapour trail.
0007BBr 3               ; can't use alternate accumulator.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               fpslot:
0007BBr 3               	lda #<SHRAPN 		; shrapnel table.
0007BBr 3               	sta z80_x
0007BBr 3               	lda #>SHRAPN
0007BBr 3               	sta z80_i
0007BBr 3               
0007BBr 3               	lda #NUMSHR		; number of pieces in table.
0007BBr 3               	sta z80_b
0007BBr 3               fpslt0:
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_ix),y		; get type.
0007BBr 3               	asl a  			; is this slot in use?
0007BBr 3               	bcc :+
0007BBr 3               	rts			; no, we can use it.
0007BBr 3               :
0007BBr 3               	clc			; point to more shrapnel.
0007BBr 3               	lda z80_x
0007BBr 3               	adc #SHRSIZ
0007BBr 3               	sta z80_x
0007BBr 3               	bcc :+
0007BBr 3               	inc z80_i
0007BBr 3               :
0007BBr 3               	dec z80_b		; repeat for all shrapnel.
0007BBr 3               	bne fpslt0
0007BBr 3               
0007BBr 3               	clc
0007BBr 3               	rts 			; out of slots, can't generate anything.
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Create an explosion at sprite position.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               explod:
0007BBr 3               	sta z80_c 		; particles to create.
0007BBr 3               
0007BBr 3               	lda z80_i 		; store pointer to sprite.
0007BBr 3               	pha
0007BBr 3               	lda z80_x
0007BBr 3               	pha
0007BBr 3               
0007BBr 3               	ldy #8
0007BBr 3               	lda (z80_ix),y 		; y coordinate.
0007BBr 3               	sta z80_l
0007BBr 3               	ldy #9
0007BBr 3               	lda (z80_ix),y		; x coordinate.
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	lda #<SHRAPN		; shrapnel table.
0007BBr 3               	sta z80_x
0007BBr 3               	lda #>SHRAPN
0007BBr 3               	sta z80_i
0007BBr 3               
0007BBr 3               	lda #NUMSHR		; number of pieces in table.
0007BBr 3               	sta explcnt
0007BBr 3               expld0:
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_ix),y		; get type.
0007BBr 3               	asl a 			; is this slot in use?
0007BBr 3               	bcs expld1		; no, we can use it.
0007BBr 3               expld2:
0007BBr 3               	clc
0007BBr 3               	lda z80_x
0007BBr 3               	adc #SHRSIZ
0007BBr 3               	sta z80_x
0007BBr 3               	bcc :+
0007BBr 3               	inc z80_i
0007BBr 3               :
0007BBr 3               	dec explcnt		; repeat for all shrapnel.
0007BBr 3               	bne expld0
0007BBr 3               expld3:
0007BBr 3               	pla			; restore sprite pointer.
0007BBr 3               	sta z80_x
0007BBr 3               	pla
0007BBr 3               	sta z80_i
0007BBr 3               	rts 			; out of slots, can't generate any more.
0007BBr 3               
0007BBr 3               expld1:
0007BBr 3               	lda z80_c		; shrapnel counter.
0007BBr 3               	and #15			; 0 to 15.
0007BBr 3               	clc			; add to x.
0007BBr 3               	adc z80_l
0007BBr 3               	ldy #3
0007BBr 3               	sta (z80_ix),y		; y coord.
0007BBr 3               
0007BBr 3               	lda seed3 		; crap random number.
0007BBr 3               	and #15			; 0 to 15.
0007BBr 3               	clc 			; add to y.
0007BBr 3               	adc z80_h
0007BBr 3               	ldy #5
0007BBr 3               	sta (z80_ix),y		; x coord.
0007BBr 3               
0007BBr 3               	lda #2
0007BBr 3               	ldy #0
0007BBr 3               	sta (z80_ix),y		; switch it on.
0007BBr 3               
0007BBr 3               	jsr chkxy		; plot first position.
0007BBr 3               	jsr qrand		; quick random angle.
0007BBr 3               	and #60 		; keep within range.
0007BBr 3               	ldy #1
0007BBr 3               	sta (z80_ix),y		; angle.
0007BBr 3               
0007BBr 3               	dec z80_c		; one less piece of shrapnel to generate.
0007BBr 3               	bne expld2 		; back to main explosion loop.
0007BBr 3               	jmp expld3 		; restore sprite pointer and exit.
0007BBr 3               
0007BBr 3               ;explcnt:	.byte 0
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Quick random
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               qrand:
0007BBr 3               	jsr random		; r register.
0007BBr 3               	eor seed3		; combine with seed.
0007BBr 3               	sta seed3 		; new seed.
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;seed3:	.byte 0
0007BBr 3               
0007BBr 3               ;----------------------------------------------------
0007BBr 3               ; Display all shrapnel.
0007BBr 3               ;----------------------------------------------------
0007BBr 3               
0007BBr 3               dshrp:
0007BBr 3               	lda #<plotde		; display routine.
0007BBr 3               	sta proshx+1
0007BBr 3               	lda #>plotde
0007BBr 3               	sta proshx+2
0007BBr 3               	jsr proshr		; process shrapnel.
0007BBr 3               
0007BBr 3               	lda #<prosh1		; processing routine.
0007BBr 3               	sta proshx+1
0007BBr 3               	lda #>prosh1
0007BBr 3               	sta proshx+2
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;------------------------------------------------------
0007BBr 3               ; Particle engine.
0007BBr 3               ;
0007BBr 3               ; Init particle data for 55 particles in SHRAPN table.
0007BBr 3               ; Every particle has 6 bytes.
0007BBr 3               ;
0007BBr 3               ; global:	-
0007BBr 3               ; local:	x,y,hl
0007BBr 3               ; calls:	-
0007BBr 3               ;------------------------------------------------------
0007BBr 3               
0007BBr 3               inishr:
0007BBr 3               	lda #<SHRAPN 		; table.
0007BBr 3               	sta z80_l
0007BBr 3               	lda #>SHRAPN
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	ldy #0
0007BBr 3               	ldx #NUMSHR		; shrapnel pieces to process.
0007BBr 3               inish0:
0007BBr 3               	lda #255 		; kill the shrapnel.
0007BBr 3               	sta (z80_hl),y
0007BBr 3               
0007BBr 3               	clc 			; point there.
0007BBr 3               	lda z80_l
0007BBr 3               	adc #SHRSIZ		; distance to next.
0007BBr 3               	sta z80_l
0007BBr 3               	bcc :+
0007BBr 3               	inc z80_h
0007BBr 3               :
0007BBr 3               	dex
0007BBr 3               	bne inish0 		; round again.
0007BBr 3               	rts
0007BBr 3               
0007BBr 3               ;------------------------------------------------------
0007BBr 3               ; Check for collision between laser and sprite.
0007BBr 3               ;------------------------------------------------------
0007BBr 3               
0007BBr 3               lcol:
0007BBr 3               	lda #<SHRAPN		; shrapnel table.
0007BBr 3               	sta z80_l
0007BBr 3               	lda #>SHRAPN
0007BBr 3               	sta z80_h
0007BBr 3               
0007BBr 3               	lda #NUMSHR		; number of pieces in table.
0007BBr 3               	sta z80_b
0007BBr 3               lcol0:
0007BBr 3               	ldy #0
0007BBr 3               	lda (z80_hl),y 		; get type.
0007BBr 3               	beq lcol1		; yes, check collision.
0007BBr 3               lcol3:
0007BBr 3               	clc			; point to more shrapnel.
0007BBr 3               	lda z80_l
0007BBr 3               	adc #SHRSIZ
0007BBr 3               	sta z80_l
0007BBr 3               	bcc :+
0007BBr 3               	inc z80_h
0007BBr 3               :
0007BBr 3               	dec z80_b		; repeat for all shrapnel.
0007BBr 3               	bne lcol0
0007BBr 3               	rts 			; no collision, carry not set.
0007BBr 3               lcol1:
0007BBr 3               	ldy #3
0007BBr 3               	lda (z80_hl),y		; get y.
0007BBr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0007BBr 3               ;	sta dispy		; store y
0007BBr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0007BBr 3               	sec
0007BBr 3               	ldy #8
0007BBr 3               	sbc (z80_ix),y		; subtract sprite y.
0007BBr 3               lcolh:
0007BBr 3               	cmp #SPR_HGT 		; within range?
0007BBr 3               	bcc :+
0007BBr 3               	jmp lcol2		; no, missed.
0007BBr 3               :
0007BBr 3               	ldy #5
0007BBr 3               	lda (z80_hl),y 		; get x.
0007BBr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0007BBr 3               ;	sta dispx		; store x
0007BBr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0007BBr 3               	sec
0007BBr 3               	ldy #9
0007BBr 3               	sbc (z80_ix),y 		; subtract sprite y.
0007BBr 3               	cmp #16			; within range?
0007BBr 3               	bcs :+
0007BBr 3               	jmp lcol4 		; yes, collision occurred.
0007BBr 3               :
0007BBr 3               lcol2:
0007BBr 3               	jmp lcol3
0007BBr 3               lcol4:
0007BBr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0007BBr 3               ;	lda #200		; set off-screen to kill vapour trail.
0007BBr 3               ;	ldy #3
0007BBr 3               ;	sta (z80_hl),y		; set laser off screen
0007BBr 3               ;	jsr scadd		; calculate screenaddress
0007BBr 3               ;	ldy #0
0007BBr 3               ;	lda (scraddr),y		; get screen byte
0007BBr 3               ;	eor #255		; remove laser
0007BBr 3               ;	sta (scraddr),y		; store screen byte
0007BBr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0007BBr 3               
0007BBr 3               	sec
0007BBr 3               	rts 			; return with carry set for collision.
0007BBr 3               .endif
0007BBr 3               
0007BBr 3               ;------------------------------------------------------
0007BBr 3               ; Main game engine code starts here.
0007BBr 3               ; After initialisation, mloop is the main loop
0007BBr 3               ;------------------------------------------------------
0007BBr 3               
0007BBr 3               game:
0007BBr 3  20 rr rr     	jsr setpal 		; set up colour palette.
0007BEr 3               
0007BEr 3               rpblc2:
0007BEr 3               .if pflag
0007BEr 3               	jsr inishr 		; initialise particle engine.
0007BEr 3               .endif
0007BEr 3               
0007BEr 3               evintr:
0007BEr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0007C1r 3               
0007C1r 3  A9 02        	lda #WALL 		; write default property.
0007C3r 3  A2 00        	ldx #0
0007C5r 3               clrmap:
0007C5r 3  9D 00 04     	sta MAP,x 		; block properties.
0007C8r 3  9D 00 05     	sta MAP+256,x
0007CBr 3  9D 00 06     	sta MAP+512,x
0007CEr 3  E8           	inx			; next byte.
0007CFr 3  D0 F4        	bne clrmap
0007D1r 3               
0007D1r 3               .if oflag
0007D1r 3               	jsr iniob 		; initialise objects.
0007D1r 3               .endif
0007D1r 3  A9 00        	lda #0			; put zero in accumulator.
0007D3r 3  85 rr        	sta gamwon		; reset game won flag.
0007D5r 3               
0007D5r 3  20 rr rr     	jsr inisc 		; init the score.
0007D8r 3               mapst:
0007D8r 3  AD rr rr     	lda stmap 		; start position on map.
0007DBr 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0007DEr 3               
0007DEr 3               inipbl:
0007DEr 3               .if aflag
0007DEr 3               	lda #<eop		; reset blockpointer
0007DEr 3               	sta pbptr
0007DEr 3               	lda #>eop
0007DEr 3               	sta pbptr+1
0007DEr 3               .endif
0007DEr 3               
0007DEr 3  20 rr rr     	jsr initsc 		; set up first screen.
0007E1r 3               
0007E1r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0007E3r 3  85 68        	sta z80_x
0007E5r 3  A9 rr        	lda #>ssprit
0007E7r 3  85 69        	sta z80_i
0007E9r 3               evini:
0007E9r 3  20 rr rr     	jsr evnt13 		; initialisation.
0007ECr 3               
0007ECr 3               ; Two restarts.
0007ECr 3               ; First restart - clear all sprites and initialise everything.
0007ECr 3               
0007ECr 3               rstrt:
0007ECr 3  20 rr rr     	jsr rsevt 		; restart events.
0007EFr 3  20 rr rr     	jsr xspr 		; clear sprite table.
0007F2r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0007F5r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
0007F8r 3               
0007F8r 3  4C rr rr     	jmp rstrt0
0007FBr 3               
0007FBr 3               ; Second restart - clear all but player, and don't initialise him.
0007FBr 3               
0007FBr 3               rstrtn:
0007FBr 3  20 rr rr     	jsr rsevt		; restart events.
0007FEr 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
000801r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000804r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000807r 3               
000807r 3               ; Set up the player and/or enemy sprites.
000807r 3               
000807r 3               rstrt0:
000807r 3  A9 00        	lda #0 			; zero in accumulator.
000809r 3  85 rr        	sta nexlev 		; reset next level flag.
00080Br 3  85 rr        	sta restfl 		; reset restart flag.
00080Dr 3  85 rr        	sta deadf 		; reset dead flag.
00080Fr 3               
00080Fr 3  20 rr rr     	jsr droom 		; show screen layout.
000812r 3               
000812r 3               rpblc0:
000812r 3               .if pflag
000812r 3               	jsr inishr 		; initialise particle engine.
000812r 3               .endif
000812r 3               .if aflag
000812r 3               	jsr rbloc		; draw blocks for this screen
000812r 3               .endif
000812r 3               .if oflag
000812r 3               	jsr shwob		; draw objects.
000812r 3               .endif
000812r 3               
000812r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000814r 3  85 68        	sta z80_x
000816r 3  A9 rr        	lda #>sprtab
000818r 3  85 69        	sta z80_i
00081Ar 3  20 rr rr     	jsr dspr 		; display sprites.
00081Dr 3               
00081Dr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00081Fr 3  85 68        	sta z80_x
000821r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000823r 3  85 69        	sta z80_i
000825r 3  20 rr rr     	jsr dspr 		; display sprites.
000828r 3               mloop:
000828r 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000828r 3               ; Breakpoint to check if the code reaches this point
000828r 3               ; Prints OK at the top left
000828r 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000828r 3  A9 2F        	lda #47
00082Ar 3  8D 3E 12     	sta $123e
00082Dr 3  A9 2B        	lda #43
00082Fr 3  8D 3F 12     	sta $123f
000832r 3               endless:
000832r 3  4C rr rr     	jmp endless
000835r 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000835r 3               
000835r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000838r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00083Ar 3  85 68        	sta z80_x
00083Cr 3  A9 rr        	lda #>sprtab
00083Er 3  85 69        	sta z80_i
000840r 3  20 rr rr     	jsr dspr 		; display even sprites.
000843r 3               
000843r 3               ;	jsr plsnd 		; play sounds.
000843r 3  20 rr rr     	jsr proshr
000846r 3               
000846r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000848r 3  85 68        	sta z80_x
00084Ar 3  A9 rr        	lda #>(sprtab+TABSIZ)
00084Cr 3  85 69        	sta z80_i
00084Er 3  20 rr rr     	jsr dspr 		; display odd sprites.
000851r 3               
000851r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000853r 3  85 68        	sta z80_x
000855r 3  A9 rr        	lda #>(ssprit)
000857r 3  85 69        	sta z80_i
000859r 3               evlp1:
000859r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
00085Cr 3  20 rr rr     	jsr pspr 		; process sprites.
00085Fr 3               
00085Fr 3               ; Main loop events.
00085Fr 3               
00085Fr 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000861r 3  85 68        	sta z80_x
000863r 3  A9 rr        	lda #>ssprit
000865r 3  85 69        	sta z80_i
000867r 3               evlp2:
000867r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
00086Ar 3               bsortx:
00086Ar 3               ;	jsr bsort 		; sort sprites.
00086Ar 3               
00086Ar 3  A5 rr        	lda nexlev		; finished level flag.
00086Cr 3  F0 03        	beq :+
00086Er 3  4C rr rr     	jmp newlev		; is set, go to next level.
000871r 3               :
000871r 3  A5 rr        	lda gamwon		; finished game flag.
000873r 3  F0 03        	beq :+
000875r 3  4C rr rr     	jmp evwon		; is set, finish the game.
000878r 3               :
000878r 3  A5 rr        	lda restfl 		; finished level flag.
00087Ar 3  C9 01        	cmp #1			; has it been set?
00087Cr 3  D0 03        	bne :+
00087Er 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000881r 3               :
000881r 3  C9 02        	cmp #2			; has it been set?
000883r 3  D0 03        	bne :+
000885r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
000888r 3               :
000888r 3  A5 rr        	lda deadf 		; dead flag.
00088Ar 3  F0 03        	beq :+
00088Cr 3  4C rr rr     	jmp pdead		; yes, player dead.
00088Fr 3               :
00088Fr 3               ; back to start of main loop.
00088Fr 3               
00088Fr 3  E6 rr        	inc frmno
000891r 3  E6 rr        	inc clock
000893r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
000896r 3               
000896r 3               ;----------------------------------------------------------
000896r 3               ; Read blocks from list and update screen accordingly.
000896r 3               ;----------------------------------------------------------
000896r 3               
000896r 3               .if aflag
000896r 3               rbloc:
000896r 3               	lda #<eop		; reset temp blockpointer
000896r 3               	sta pbbuf
000896r 3               	lda #>eop
000896r 3               	sta pbbuf+1
000896r 3               
000896r 3               rbloc2:
000896r 3               	lda pbbuf			; check for last block
000896r 3               	cmp pbptr
000896r 3               	bne rbloc1
000896r 3               	lda pbbuf+1
000896r 3               	cmp pbptr+1
000896r 3               	bne rbloc1
000896r 3               	rts
000896r 3               rbloc1:
000896r 3               	ldy #0
000896r 3               	lda (pbbuf),y		; check if block for this scno
000896r 3               	cmp scno
000896r 3               	bne rbloc0		; if not, skip
000896r 3               	iny
000896r 3               	lda (pbbuf),y		; get y
000896r 3               	sta dispy
000896r 3               	iny
000896r 3               	lda (pbbuf),y		; get x
000896r 3               	sta dispx
000896r 3               	iny
000896r 3               	lda (pbbuf),y		; get blocknr
000896r 3               	jsr pattr2		; draw block
000896r 3               rbloc0:
000896r 3               	clc			; point to next block
000896r 3               	lda pbbuf
000896r 3               	adc #4
000896r 3               	sta pbbuf
000896r 3               	bcc rbloc2
000896r 3               	inc pbbuf+1
000896r 3               	jmp rbloc2
000896r 3               .endif
000896r 3               
000896r 3               ;----------------------------------------------------------
000896r 3               ; New level
000896r 3               ;----------------------------------------------------------
000896r 3               
000896r 3               newlev:
000896r 3  A5 rr        	lda scno 			; current screen.
000898r 3  18           	clc
000899r 3  69 01        	adc #1				; next screen.
00089Br 3  CD rr rr     	cmp numsc			; total number of screens.
00089Er 3  B0 05        	bcs evwon			; yes, game finished.
0008A0r 3  85 rr        	sta scno			; set new level number.
0008A2r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0008A5r 3               
0008A5r 3               evwon:
0008A5r 3  20 rr rr     	jsr evnt18		 	; game completed.
0008A8r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0008ABr 3               
0008ABr 3               ;----------------------------------------------------------
0008ABr 3               ; Player dead.
0008ABr 3               ;----------------------------------------------------------
0008ABr 3               
0008ABr 3               pdead:
0008ABr 3  A9 00        	lda #0				; zeroise accumulator.
0008ADr 3  85 rr        	sta deadf			; reset dead flag.
0008AFr 3  85 rr        	sta clock
0008B1r 3               evdie:
0008B1r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0008B4r 3  A5 rr        	lda numlif			; number of lives.
0008B6r 3  F0 03        	beq :+
0008B8r 3  4C rr rr     	jmp rstrt 			; restart game.
0008BBr 3               :
0008BBr 3               evfail:
0008BBr 3  20 rr rr     	jsr evnt17 			; failure event.
0008BEr 3               
0008BEr 3               ;----------------------------------------------------------
0008BEr 3               ; Tidy things up
0008BEr 3               ;----------------------------------------------------------
0008BEr 3               
0008BEr 3               tidyup:
0008BEr 3  A0 00        	ldy #0				; digits to check.
0008C0r 3               tidyu2:
0008C0r 3  B9 rr rr     	lda score,y 			; get score digit.
0008C3r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0008C6r 3  90 07        	bcc tidyu0			; high score is bigger.
0008C8r 3  D0 10        	bne tidyu1			; score is greater, record new high score.
0008CAr 3  C8           	iny				; next digit of high score.
0008CBr 3  C0 06        	cpy #6
0008CDr 3  D0 F1        	bne tidyu2			; repeat for all digits
0008CFr 3               tidyu0:
0008CFr 3  A9 rr        	lda #<score			; return pointing to score.
0008D1r 3  85 62        	sta z80_c
0008D3r 3  A9 rr        	lda #>score
0008D5r 3  85 63        	sta z80_b
0008D7r 3  4C rr rr     	jmp game			; restart game
0008DAr 3               tidyu1:
0008DAr 3  A0 05        	ldy #5
0008DCr 3               tidyu3:
0008DCr 3  B9 rr rr     	lda score,y			; score.
0008DFr 3  99 rr rr     	sta hiscor,y			; high score.
0008E2r 3  88           	dey
0008E3r 3  10 F7        	bpl tidyu3 			; copy score to high score.
0008E5r 3               evnewh:
0008E5r 3  20 rr rr     	jsr evnt19			; new high score event.
0008E8r 3  4C rr rr     	jmp tidyu0			; tidy up.
0008EBr 3               
0008EBr 3               ;--------------------------------------------------
0008EBr 3               ; Restart event.
0008EBr 3               ;--------------------------------------------------
0008EBr 3               
0008EBr 3               rsevt:
0008EBr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0008EDr 3  85 68        	sta z80_x
0008EFr 3  A9 rr        	lda #>ssprit
0008F1r 3  85 69        	sta z80_i
0008F3r 3               evrs:
0008F3r 3  4C rr rr     	jmp evnt14	 		; call restart event.
0008F6r 3               
0008F6r 3               ;------------------------------------------------------------------
0008F6r 3               ; Copy number passed in a to string position bc, right-justified.
0008F6r 3               ;
0008F6r 3               ; Input:
0008F6r 3               ;  A  = number
0008F6r 3               ;  BC = string address
0008F6r 3               ;
0008F6r 3               ; Output:
0008F6r 3               ;  BC = string with number
0008F6r 3               ;-----------------------------------------------------------------
0008F6r 3               
0008F6r 3               num2ch:
0008F6r 3  85 65        	sta z80_d		; Save number
0008F8r 3               
0008F8r 3  A9 00        	lda #0
0008FAr 3  85 rr        	sta flag
0008FCr 3               numdg3:
0008FCr 3  A2 64        	ldx #100		; hundreds column.
0008FEr 3  86 64        	stx z80_e
000900r 3  20 rr rr     	jsr numdg		; show digit.
000903r 3               numdg2:
000903r 3  A2 0A        	ldx #10			; tens column.
000905r 3  86 64        	stx z80_e
000907r 3  20 rr rr     	jsr numdg		; show digit.
00090Ar 3               
00090Ar 3  E6 rr        	inc flag
00090Cr 3  A2 01        	ldx #1			; units column.
00090Er 3  86 64        	stx z80_e
000910r 3               numdg:
000910r 3  A9 30        	lda #48 			; clear digit.
000912r 3  85 61        	sta z80_a
000914r 3               numdg1:
000914r 3  A5 65        	lda z80_d
000916r 3  C5 64        	cmp z80_e
000918r 3  90 0E        	bcc numdg0		; nothing to show.
00091Ar 3  38           	sec
00091Br 3  A5 65        	lda z80_d
00091Dr 3  E5 64        	sbc z80_e		; subtract from column.
00091Fr 3  85 65        	sta z80_d
000921r 3  E6 61        	inc z80_a		; increment digit.
000923r 3  E6 rr        	inc flag
000925r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
000928r 3               numdg0:
000928r 3  A0 00        	ldy #0
00092Ar 3  A5 61        	lda z80_a
00092Cr 3  91 62        	sta (z80_bc),y		; write digit to buffer.
00092Er 3  A5 rr        	lda flag
000930r 3  F0 06        	beq :+
000932r 3  E6 62        	inc z80_c		; next buffer position.
000934r 3  D0 02        	bne :+
000936r 3  E6 63        	inc z80_b
000938r 3               :
000938r 3  60           	rts
000939r 3               num2dd:
000939r 3  85 65        	sta z80_d		; Save number
00093Br 3               
00093Br 3  A9 01        	lda #1
00093Dr 3  85 rr        	sta flag
00093Fr 3               
00093Fr 3  4C rr rr     	jmp numdg2
000942r 3               num2td:
000942r 3  85 65        	sta z80_d		; Save number
000944r 3               
000944r 3  A9 01        	lda #1
000946r 3  85 rr        	sta flag
000948r 3  4C rr rr     	jmp numdg3
00094Br 3               
00094Br 3               ;flag:	.byte 0
00094Br 3               
00094Br 3               ;---------------------------------------------------------
00094Br 3               ; Reset score to "000000"
00094Br 3               ;---------------------------------------------------------
00094Br 3               
00094Br 3               inisc:
00094Br 3  A9 30        	lda #'0'
00094Dr 3  A2 05        	ldx #5			; digits to initialise.
00094Fr 3               inisc0:
00094Fr 3  9D rr rr     	sta score,x 		; write zero digit.
000952r 3  CA           	dex			; next column.
000953r 3  10 FA        	bpl inisc0		; repeat for all digits.
000955r 3               
000955r 3  60           	rts
000956r 3               
000956r 3               ;-----------------------------------------------------
000956r 3               ; Multiply h by d and return in hl.
000956r 3               ;
000956r 3               ; Input:
000956r 3               ;  H = first number
000956r 3               ;  D = second number
000956r 3               ;
000956r 3               ; Output:
000956r 3               ;  HL = result H x D
000956r 3               ;-----------------------------------------------------
000956r 3               
000956r 3               imul:
000956r 3  A5 65        	lda z80_d		; HL = H * D
000958r 3  85 64        	sta z80_e
00095Ar 3  A5 67        	lda z80_h
00095Cr 3  85 62        	sta z80_c		; make c first multiplier.
00095Er 3               imul0:
00095Er 3  A9 00        	lda #0			; zeroise total.
000960r 3  85 66        	sta z80_l
000962r 3  85 67        	sta z80_h
000964r 3               
000964r 3  A5 67        	lda z80_h
000966r 3  85 65        	sta z80_d		; zeroise high byte.
000968r 3               
000968r 3  A9 08        	lda #8			; repeat 8 times.
00096Ar 3  85 63        	sta z80_b
00096Cr 3               imul1:
00096Cr 3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
00096Er 3  90 0E        	bcc imul2		; wasn't set.
000970r 3  18           	clc			; bit was set, so add de.
000971r 3  A5 66        	lda z80_l
000973r 3  65 64        	adc z80_e
000975r 3  85 66        	sta z80_l
000977r 3  A5 67        	lda z80_h
000979r 3  65 65        	adc z80_d
00097Br 3  85 67        	sta z80_h
00097Dr 3  18           	clc 			; reset carry.
00097Er 3               imul2:
00097Er 3  06 64        	asl z80_e 		; shift de 1 bit left.
000980r 3  26 65        	rol z80_d
000982r 3  C6 63        	dec z80_b
000984r 3  D0 E6        	bne imul1		; repeat 8 times.
000986r 3               
000986r 3  60           	rts
000987r 3               
000987r 3               ;-----------------------------------------------
000987r 3               ; Divide d by e and return in d, remainder in a.
000987r 3               ;
000987r 3               ; Input:
000987r 3               ;  D = first number
000987r 3               ;  E = second number
000987r 3               ;
000987r 3               ; Output:
000987r 3               ;  D = result D/E
000987r 3               ;  A = remainder
000987r 3               ;-----------------------------------------------
000987r 3               
000987r 3               idiv:
000987r 3  A9 00        	lda #0
000989r 3  A0 08        	ldy #8		 	; bits to shift.
00098Br 3  06 65        	asl z80_d
00098Dr 3               idiv0:
00098Dr 3  2A           	rol a 			; multiply d by 2.
00098Er 3  C5 64        	cmp z80_e 		; test if e is smaller.
000990r 3  90 02        	bcc idiv1		; e is greater, no division this time.
000992r 3  E5 64        	sbc z80_e		; subtract it.
000994r 3               idiv1:
000994r 3  26 65        	rol z80_d		; rotate into d.
000996r 3  88           	dey
000997r 3  D0 F4        	bne idiv0		; repeat
000999r 3  60           	rts
00099Ar 3               
00099Ar 3               ;---------------------------------------------------
00099Ar 3               ; Play AY sound effect
00099Ar 3               ;---------------------------------------------------
00099Ar 3               
00099Ar 3               plsnd:
00099Ar 3  60           	rts
00099Br 3               
00099Br 3               ;---------------------------------------------------
00099Br 3               ; Objects handling.
00099Br 3               ; 32 bytes for image
00099Br 3               ; 3 for room, y and x
00099Br 3               ; 3 for starting room, y and x.
00099Br 3               ; 254 = disabled.
00099Br 3               ; 255 = object in player"s pockets.
00099Br 3               ;---------------------------------------------------
00099Br 3               
00099Br 3               ;---------------------------------------------------
00099Br 3               ; Show items present.
00099Br 3               ;---------------------------------------------------
00099Br 3               
00099Br 3               .if oflag
00099Br 3               shwob:
00099Br 3               	lda #<objdta 			; objects table.
00099Br 3               	sta z80_l
00099Br 3               	lda #>objdta
00099Br 3               	sta z80_h
00099Br 3               
00099Br 3               	lda numob 			; number of objects in the game.
00099Br 3               	sta sprcnt
00099Br 3               shwob0:
00099Br 3               	ldy #32 			; distance to room number.
00099Br 3               	lda (z80_hl),y 			; same as an item?
00099Br 3               	cmp scno 			; current location.
00099Br 3               	bne :+
00099Br 3               	jsr dobj 			; yes, display object.
00099Br 3               :
00099Br 3               	clc
00099Br 3               	lda z80_l
00099Br 3               	adc #38 			; distance to next item.
00099Br 3               	sta z80_l
00099Br 3               	lda z80_h
00099Br 3               	adc #0
00099Br 3               	sta z80_h	 		; point to it.
00099Br 3               	dec sprcnt
00099Br 3               	bne shwob0 			; repeat for others.
00099Br 3               	rts
00099Br 3               
00099Br 3               ;---------------------------------------------------
00099Br 3               ; Display object.
00099Br 3               ; hl must point to object's start address.
00099Br 3               ;
00099Br 3               ; Input:
00099Br 3               ;  HL = object address
00099Br 3               ;---------------------------------------------------
00099Br 3               
00099Br 3               dobj:
00099Br 3               	ldy #33
00099Br 3               	lda (z80_hl),y 			; point to y.
00099Br 3               	sta dispy
00099Br 3               	iny
00099Br 3               	lda (z80_hl),y 			; point to x.
00099Br 3               	sta dispx
00099Br 3               dobj1:
00099Br 3               	jmp sprite 			; draw this sprite.
00099Br 3               
00099Br 3               ;--------------------------------------
00099Br 3               ; Remove an object.
00099Br 3               ;
00099Br 3               ; Input:
00099Br 3               ;  A = object number
00099Br 3               ;--------------------------------------
00099Br 3               
00099Br 3               remob:
00099Br 3               	cmp numob			; number of objects in game.
00099Br 3               	bcc :+				; are we checking past the end?
00099Br 3               	rts				; yes, can't get non-existent item.
00099Br 3               :
00099Br 3               	pha				; remember object.
00099Br 3               	jsr getob			; pick it up if we haven't already got it.
00099Br 3               	pla				; retrieve object number.
00099Br 3               	jsr gotob			; get its address.
00099Br 3               	lda #254
00099Br 3               	ldy #32
00099Br 3               	sta (z80_hl),y			; remove it.
00099Br 3               	rts
00099Br 3               
00099Br 3               ;---------------------------------------------------
00099Br 3               ; Pick up object number held in the accumulator.
00099Br 3               ;
00099Br 3               ; Input:
00099Br 3               ;  A = object number
00099Br 3               ;---------------------------------------------------
00099Br 3               
00099Br 3               getob:
00099Br 3               	cmp numob 		; number of objects in game.
00099Br 3               	bcc :+			; are we checking past the end?
00099Br 3               	rts			; yes, can't get non-existent item.
00099Br 3               :
00099Br 3               	jsr gotob 		; check if we already have it.
00099Br 3               	cmp #255
00099Br 3               	bne :+
00099Br 3               	rts			; we already do.
00099Br 3               :
00099Br 3               	ldy #32
00099Br 3               	lda (z80_hl),y		; is it on this screen?
00099Br 3               	cmp scno 		; current screen.
00099Br 3               	bne getob0		; not on screen, so nothing to delete.
00099Br 3               
00099Br 3               	lda #255
00099Br 3               	sta (z80_hl),y		; pick it up.
00099Br 3               	iny 			; point to y coord.
00099Br 3               getob1:
00099Br 3               	ldy #33
00099Br 3               	lda (z80_hl),y		; y coord.
00099Br 3               	sta dispy
00099Br 3               	ldy #34
00099Br 3               	lda (z80_hl),y 		; x coord.
00099Br 3               	sta dispx
00099Br 3               	jmp dobj1 		; delete object sprite.
00099Br 3               getob0:
00099Br 3               	lda #255
00099Br 3               	sta (z80_hl),y 		; pick it up.
00099Br 3               	rts
00099Br 3               .endif
00099Br 3               
00099Br 3               ;-----------------------------------------------------------------
00099Br 3               ; Got object check.
00099Br 3               ; Call with object in accumulator, returns zero set if in pockets.
00099Br 3               ;
00099Br 3               ; Input:
00099Br 3               ;  A = object number
00099Br 3               ;-----------------------------------------------------------------
00099Br 3               .if oflag .or mflag
00099Br 3               gotob:
00099Br 3               	cmp numob 		; number of objects in game.
00099Br 3               	bcc :+ 			; are we checking past the end?
00099Br 3               	jmp gotob0 		; yes, we can't have a non-existent object.
00099Br 3               :
00099Br 3               	jsr findob		; find the object.
00099Br 3               gotob1:
00099Br 3               	rts
00099Br 3               
00099Br 3               gotob0:
00099Br 3               	lda #254 		; missing.
00099Br 3               	jmp gotob1
00099Br 3               
00099Br 3               findob:
00099Br 3               	pha			; save object number
00099Br 3               	lda #<objdta 		; objects.
00099Br 3               	sta z80_l
00099Br 3               	lda #>objdta
00099Br 3               	sta z80_h
00099Br 3               	pla			; retreive object number
00099Br 3               	beq fndob1 		; is it zero? yes, skip loop.
00099Br 3               	tax 			; loop counter
00099Br 3               fndob2:
00099Br 3               	clc
00099Br 3               	lda z80_l
00099Br 3               	adc #38 		; size of each object.
00099Br 3               	sta z80_l
00099Br 3               	bcc :+
00099Br 3               	inc z80_h
00099Br 3               :
00099Br 3               	dex 			; repeat until we find address.
00099Br 3               	bne fndob2
00099Br 3               fndob1:
00099Br 3               	ldy #32			; distance to room it's in.
00099Br 3               	lda (z80_hl),y		; fetch status.
00099Br 3               	rts
00099Br 3               .endif
00099Br 3               
00099Br 3               ;---------------------------------------------
00099Br 3               ; Drop object number at (dispx, dispy).
00099Br 3               ;
00099Br 3               ; Input:
00099Br 3               ;  A = object number
00099Br 3               ;---------------------------------------------
00099Br 3               
00099Br 3               .if oflag
00099Br 3               drpob:
00099Br 3               	cmp numob 		; are we checking past the end?
00099Br 3               	bcc :+
00099Br 3               	rts			; yes, can't drop non-existent item.
00099Br 3               :
00099Br 3               	jsr gotob		; make sure object is in inventory.
00099Br 3               	cmp scno		; already on this screen?
00099Br 3               	bne :+
00099Br 3               	rts			; yes, nothing to do.
00099Br 3               :
00099Br 3               	ldy #32
00099Br 3               	lda scno
00099Br 3               	sta (z80_hl),y		; bring onto screen.
00099Br 3               	lda dispy		; sprite y coordinate.
00099Br 3               	iny
00099Br 3               	sta (z80_hl),y		; point to object y.
00099Br 3               	lda dispx 		; sprite x coordinate.
00099Br 3               	iny
00099Br 3               	sta (z80_hl),y 		; point to object x
00099Br 3               	jmp dobj		; draw the object sprite.
00099Br 3               
00099Br 3               ;-----------------------------------------------
00099Br 3               ; Seek objects at sprite position.
00099Br 3               ;
00099Br 3               ; Output:
00099Br 3               ;  A = object number, if not found A=255
00099Br 3               ;-----------------------------------------------
00099Br 3               
00099Br 3               skobj:
00099Br 3               	lda #<objdta 		; pointer to objects.
00099Br 3               	sta z80_l
00099Br 3               	lda #>objdta
00099Br 3               	sta z80_h
00099Br 3               
00099Br 3               	lda numob 		; number of objects in game.
00099Br 3               	sta z80_b 		; set up the loop counter.
00099Br 3               skobj0:
00099Br 3               	lda scno		; current room number.
00099Br 3               	ldy #32
00099Br 3               	cmp (z80_hl),y		; is object in here?
00099Br 3               	bne :+
00099Br 3               	jsr skobj1		; yes, check coordinates.
00099Br 3               :
00099Br 3               	clc			; point to next object in table.
00099Br 3               	lda z80_l
00099Br 3               	adc #38			; size of each object.
00099Br 3               	sta z80_l
00099Br 3               	bcc :+
00099Br 3               	inc z80_h
00099Br 3               :
00099Br 3               	dec z80_b
00099Br 3               	bne skobj0		; repeat for all objects.
00099Br 3               
00099Br 3               	lda #255		; end of list and nothing found, return 255.
00099Br 3               	rts
00099Br 3               
00099Br 3               skobj1:
00099Br 3               	ldy #33			; point to y coordinate.
00099Br 3               	lda (z80_hl),y		; point to y coordinate.
00099Br 3               	sec
00099Br 3               	ldy #8
00099Br 3               	sbc (z80_ix),y 		; subtract sprite y.
00099Br 3               	clc
00099Br 3               	adc #15			; add object height minus one.
00099Br 3               	cmp #16+COLDISTY-1	; within range?
00099Br 3               	bcs skobj2		; no, ignore object.
00099Br 3               
00099Br 3               	ldy #34			; point to x coordinate now.
00099Br 3               	lda (z80_hl),y 		; get coordinate.
00099Br 3               	sec
00099Br 3               	ldy #9
00099Br 3               	sbc (z80_ix),y 		; subtract the sprite x.
00099Br 3               	clc			; add sprite width minus one.
00099Br 3               	adc #15
00099Br 3               	cmp #31			; within range?
00099Br 3               	bcs skobj2		; no, ignore object.
00099Br 3               
00099Br 3               	pla			; remove return address from stack.
00099Br 3               	pla
00099Br 3               
00099Br 3               	lda numob 		; objects in game.
00099Br 3               	sec
00099Br 3               	sbc z80_b		; subtract loop counter.
00099Br 3               skobj2:
00099Br 3               	rts			; accumulator now points to object.
00099Br 3               .endif
00099Br 3               
00099Br 3               ;---------------------------------------------------------------------
00099Br 3               ; Spawn a new sprite.
00099Br 3               ;---------------------------------------------------------------------
00099Br 3               
00099Br 3               .if gflag
00099Br 3                 offset = 0
00099Br 3               .else
00099Br 3                 offset = 20
00099Br 3               .endif
00099Br 3               
00099Br 3               spawn:
00099Br 3  A9 rr        	lda #<sprtab		; sprite table.
00099Dr 3  85 66        	sta z80_l
00099Fr 3  A9 rr        	lda #>sprtab
0009A1r 3  85 67        	sta z80_h
0009A3r 3               numsp1:
0009A3r 3  A9 0C        	lda #NUMSPR		; number of sprites.
0009A5r 3  85 rr        	sta spcnt
0009A7r 3               spaw0:
0009A7r 3  A0 00        	ldy #0
0009A9r 3  B1 66        	lda (z80_hl),y		; get sprite type.
0009ABr 3  C9 FF        	cmp #255		; is it an unused slot?
0009ADr 3  F0 0F        	beq spaw1
0009AFr 3  18           	clc 			; point to next sprite in table.
0009B0r 3  A5 66        	lda z80_l
0009B2r 3  69 11        	adc #TABSIZ		; size of each entry.
0009B4r 3  85 66        	sta z80_l
0009B6r 3  90 02        	bcc :+
0009B8r 3  E6 67        	inc z80_h
0009BAr 3               :
0009BAr 3  C6 rr        	dec spcnt		; one less iteration.
0009BCr 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0009BEr 3               
0009BEr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0009BEr 3               
0009BEr 3               spaw1:
0009BEr 3  A5 69        	lda z80_i		; address of original sprite.
0009C0r 3  48           	pha
0009C1r 3  A5 68        	lda z80_x
0009C3r 3  48           	pha
0009C4r 3               
0009C4r 3  A5 66        	lda z80_l		; store spawned sprite address.
0009C6r 3  85 rr        	sta spptr
0009C8r 3  A5 67        	lda z80_h
0009CAr 3  85 rr        	sta spptr+1
0009CCr 3               
0009CCr 3  A5 62        	lda z80_c
0009CEr 3  A0 00        	ldy #0
0009D0r 3  91 66        	sta (z80_hl),y 		; set the type.
0009D2r 3  A0 05        	ldy #5
0009D4r 3  91 66        	sta (z80_hl),y		; copy
0009D6r 3               
0009D6r 3  A5 63        	lda z80_b
0009D8r 3  A0 01        	ldy #1
0009DAr 3  91 66        	sta (z80_hl),y		; set the image.
0009DCr 3  A0 06        	ldy #6
0009DEr 3  91 66        	sta (z80_hl),y		; copy
0009E0r 3               
0009E0r 3  A9 00        	lda #0 			; frame zero.
0009E2r 3  A0 02        	ldy #2
0009E4r 3  91 66        	sta (z80_hl),y		; set frame.
0009E6r 3  A0 07        	ldy #7
0009E8r 3  91 66        	sta (z80_hl),y		; copy
0009EAr 3               
0009EAr 3  A0 08        	ldy #8
0009ECr 3  B1 68        	lda (z80_ix),y 		; x coordinate.
0009EEr 3  A0 03        	ldy #3
0009F0r 3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0009F2r 3  A0 08        	ldy #8
0009F4r 3  91 66        	sta (z80_hl),y		; copy
0009F6r 3               
0009F6r 3  A0 09        	ldy #9
0009F8r 3  B1 68        	lda (z80_ix),y 		; y coordinate.
0009FAr 3  A0 04        	ldy #4
0009FCr 3  91 66        	sta (z80_hl),y		; set sprite coordinate.
0009FEr 3  A0 09        	ldy #9
000A00r 3  91 66        	sta (z80_hl),y		; copy
000A02r 3               
000A02r 3  A0 0A        	ldy #10			; direction of original.
000A04r 3  B1 68        	lda (z80_ix),y
000A06r 3  91 66        	sta (z80_hl),y		; direction
000A08r 3               
000A08r 3  A9 00        	lda #0
000A0Ar 3  A0 0B        	ldy #11
000A0Cr 3  91 66        	sta (z80_hl),y		; reset parameter.
000A0Er 3  C8           	iny
000A0Fr 3  91 66        	sta (z80_hl),y		; reset parameter.
000A11r 3  C8           	iny
000A12r 3  91 66        	sta (z80_hl),y		; reset parameter.
000A14r 3  C8           	iny
000A15r 3  91 66        	sta (z80_hl),y		; reset parameter.
000A17r 3               rtssp:
000A17r 3  A5 rr        	lda spptr		; address of new sprite.
000A19r 3  85 68        	sta z80_x
000A1Br 3  A5 rr        	lda spptr+1
000A1Dr 3  85 69        	sta z80_i
000A1Fr 3               evis1:
000A1Fr 3  20 rr rr     	jsr evnt09 		; call sprite initialisation event.
000A22r 3               
000A22r 3  A5 rr        	lda spptr 		; address of new sprite.
000A24r 3  85 68        	sta z80_x
000A26r 3  A5 rr        	lda spptr+1
000A28r 3  85 69        	sta z80_i
000A2Ar 3  20 rr rr     	jsr sspria 		; display the new sprite.
000A2Dr 3               
000A2Dr 3  68           	pla			; address of original sprite.
000A2Er 3  85 68        	sta z80_x
000A30r 3  68           	pla
000A31r 3  85 69        	sta z80_i
000A33r 3               
000A33r 3  60           	rts
000A34r 3               
000A34r 3               ;spcnt:	.byte 0
000A34r 3               ;spptr:	.word 0			; spawned sprite pointer.
000A34r 3               ;seed:	.byte 0			; seed for random numbers.
000A34r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000A38r 3  30 30        
000A3Ar 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000A3Er 3  30 30        
000A40r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000A44r 3  30 30        
000A46r 3  00 10        grbase:	.word ScreenAddr	; graphics base address.
000A48r 3               
000A48r 3               ;----------------------------------------------------
000A48r 3               ; Check y-pos
000A48r 3               ;----------------------------------------------------
000A48r 3               
000A48r 3               checkx:
000A48r 3  A5 rr        	lda dispy		; y position.
000A4Ar 3  C9 18        	cmp #24			; off screen?
000A4Cr 3  B0 01        	bcs :+
000A4Er 3  60           	rts			; no, it's okay.
000A4Fr 3               :
000A4Fr 3  68           	pla			; remove return address from stack.
000A50r 3  85 66        	sta z80_l
000A52r 3  68           	pla
000A53r 3  85 67        	sta z80_h
000A55r 3  60           	rts
000A56r 3               
000A56r 3               ;-----------------------------------------------
000A56r 3               ; Displays the current high score.
000A56r 3               ;-----------------------------------------------
000A56r 3               
000A56r 3               dhisc:
000A56r 3  A9 rr        	lda #<hiscor 		; high score text.
000A58r 3  8D rr rr     	sta dscor3+1
000A5Br 3               .if bigflag
000A5Br 3               	sta bscor3+1
000A5Br 3               .endif
000A5Br 3  A9 rr        	lda #>hiscor
000A5Dr 3  8D rr rr     	sta dscor3+2
000A60r 3               .if bigflag
000A60r 3               	sta bscor3+2
000A60r 3               .endif
000A60r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000A63r 3               
000A63r 3               ;------------------------------------------------------
000A63r 3               ; Displays the current score.
000A63r 3               ;------------------------------------------------------
000A63r 3               
000A63r 3               dscor:
000A63r 3  A9 rr        	lda #<score		; score text.
000A65r 3  8D rr rr     	sta dscor3+1
000A68r 3               .if bigflag
000A68r 3               	sta bscor3+1
000A68r 3               .endif
000A68r 3  A9 rr        	lda #>score
000A6Ar 3  8D rr rr     	sta dscor3+2
000A6Dr 3               .if bigflag
000A6Dr 3               	sta bscor3+2
000A6Dr 3               .endif
000A6Dr 3               dscor1:
000A6Dr 3  8C rr rr     	sty tmpscr
000A70r 3  20 rr rr     	jsr preprt		; set up font and print position.
000A73r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
000A76r 3               
000A76r 3               .if bigflag
000A76r 3               	lda prtmod		; get print mode.
000A76r 3               	beq :+			; standard size text?
000A76r 3               	jmp bscor0		; no, show double-height.
000A76r 3               :
000A76r 3               .endif
000A76r 3               dscor0:
000A76r 3  AC rr rr     	ldy tmpscr
000A79r 3               dscor3:
000A79r 3  B9 rr rr     	lda score,y
000A7Cr 3  20 rr rr     	jsr pchar 		; display character.
000A7Fr 3  E6 rr        	inc dispx		; move along x coordinate
000A81r 3               
000A81r 3  EE rr rr     	inc tmpscr
000A84r 3  C6 63        	dec z80_b
000A86r 3  D0 EE        	bne dscor0 		; repeat for all digits.
000A88r 3               dscor2:
000A88r 3  A5 rr        	lda dispx 		; set up display coordinates.
000A8Ar 3  85 rr        	sta charx
000A8Cr 3  A5 rr        	lda dispy
000A8Er 3  85 rr        	sta chary
000A90r 3  60           	rts
000A91r 3               
000A91r 3               ;------------------------------------------------------
000A91r 3               ; Displays the current score in double-height characters.
000A91r 3               ;
000A91r 3               ; Input:
000A91r 3               ;  B  = digit number
000A91r 3               ;  HL = score string
000A91r 3               ;------------------------------------------------------
000A91r 3               
000A91r 3               .if bigflag
000A91r 3               bscor0:
000A91r 3               	ldy tmpscr
000A91r 3               bscor3:
000A91r 3               	lda score,y
000A91r 3               	jsr bchar 		; display big char.
000A91r 3               
000A91r 3               	inc tmpscr
000A91r 3               	dec z80_b
000A91r 3               	beq :+
000A91r 3               	jmp bscor0 		; repeat for all digits.
000A91r 3               :
000A91r 3               	jmp dscor2 		; tidy up line and column variables.
000A91r 3               .endif
000A91r 3               
000A91r 3               ;-----------------------------------------------------
000A91r 3               ; Adds number in the hl pair to the score.
000A91r 3               ;-----------------------------------------------------
000A91r 3               
000A91r 3               addsc:
000A91r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000A93r 3  85 64        	sta z80_e
000A95r 3  A9 rr        	lda #>(score+1)
000A97r 3  85 65        	sta z80_d
000A99r 3  A9 10        	lda #<10000		; amount to add each time.
000A9Br 3  85 62        	sta z80_c
000A9Dr 3  A9 27        	lda #>10000
000A9Fr 3  85 63        	sta z80_b
000AA1r 3  20 rr rr     	jsr incsc		; add to score.
000AA4r 3               
000AA4r 3  E6 64        	inc z80_e		; thousands column.
000AA6r 3  D0 02        	bne :+
000AA8r 3  E6 65        	inc z80_d
000AAAr 3               :
000AAAr 3  A9 E8        	lda #<1000		; amount to add each time.
000AACr 3  85 62        	sta z80_c
000AAEr 3  A9 03        	lda #>1000
000AB0r 3  85 63        	sta z80_b
000AB2r 3  20 rr rr     	jsr incsc 		; add to score.
000AB5r 3               
000AB5r 3  E6 64        	inc z80_e		; hundreds column.
000AB7r 3  D0 02        	bne :+
000AB9r 3  E6 65        	inc z80_d
000ABBr 3               :
000ABBr 3  A9 64        	lda #<100		; amount to add each time.
000ABDr 3  85 62        	sta z80_c
000ABFr 3  A9 00        	lda #>100
000AC1r 3  85 63        	sta z80_b
000AC3r 3  20 rr rr     	jsr incsc		; add to score.
000AC6r 3               
000AC6r 3  E6 64        	inc z80_e 		; tens column.
000AC8r 3  D0 02        	bne :+
000ACAr 3  E6 65        	inc z80_d
000ACCr 3               :
000ACCr 3  A9 0A        	lda #<10		; amount to add each time.
000ACEr 3  85 62        	sta z80_c
000AD0r 3  A9 00        	lda #>10
000AD2r 3  85 63        	sta z80_b
000AD4r 3  20 rr rr     	jsr incsc 		; add to score.
000AD7r 3               
000AD7r 3  E6 64        	inc z80_e		; units column.
000AD9r 3  D0 02        	bne :+
000ADBr 3  E6 65        	inc z80_d
000ADDr 3               :
000ADDr 3  A9 01        	lda #<1			; units.
000ADFr 3  85 62        	sta z80_c
000AE1r 3  A9 00        	lda #>1
000AE3r 3  85 63        	sta z80_b
000AE5r 3               incsc:
000AE5r 3  A5 67        	lda z80_h		; store amount to add.
000AE7r 3  48           	pha
000AE8r 3  A5 66        	lda z80_l
000AEAr 3  48           	pha
000AEBr 3               
000AEBr 3  38           	sec			; subtract from amount to add.
000AECr 3  A5 66        	lda z80_l
000AEEr 3  E5 62        	sbc z80_c
000AF0r 3  85 66        	sta z80_l
000AF2r 3  A5 67        	lda z80_h
000AF4r 3  E5 63        	sbc z80_b
000AF6r 3  85 67        	sta z80_h
000AF8r 3  90 14        	bcc incsc0		; too much, restore value.
000AFAr 3               
000AFAr 3  68           	pla			; delete the previous amount from the stack.
000AFBr 3  68           	pla
000AFCr 3               
000AFCr 3  A5 65        	lda z80_d 		; store column position.
000AFEr 3  48           	pha
000AFFr 3  A5 64        	lda z80_e
000B01r 3  48           	pha
000B02r 3  20 rr rr     	jsr incsc2		; do the increment.
000B05r 3               
000B05r 3  68           	pla			; restore column.
000B06r 3  85 64        	sta z80_e
000B08r 3  68           	pla
000B09r 3  85 65        	sta z80_d
000B0Br 3  4C rr rr     	jmp incsc		; repeat until all added.
000B0Er 3               
000B0Er 3               incsc0:
000B0Er 3  68           	pla			; restore previous value.
000B0Fr 3  85 66        	sta z80_l
000B11r 3  68           	pla
000B12r 3  85 67        	sta z80_h
000B14r 3  60           	rts
000B15r 3               incsc2:
000B15r 3  A0 00        	ldy #0
000B17r 3  B1 64        	lda (z80_de),y 		; get amount.
000B19r 3  18           	clc
000B1Ar 3  69 01        	adc #1			; add one to column.
000B1Cr 3  91 64        	sta (z80_de),y		; write new column total.
000B1Er 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000B20r 3  B0 01        	bcs :+
000B22r 3  60           	rts			; no, carry on.
000B23r 3               :
000B23r 3  A9 30        	lda #'0'		; make it zero.
000B25r 3  91 64        	sta (z80_de),y		; write new column total.
000B27r 3  C6 64        	dec z80_e		; back one column.
000B29r 3  D0 02        	bne :+
000B2Br 3  C6 65        	dec z80_d
000B2Dr 3               :
000B2Dr 3  4C rr rr     	jmp incsc2
000B30r 3               
000B30r 3               ;------------------------------------
000B30r 3               ; Add bonus to score and reset bonus
000B30r 3               ;------------------------------------
000B30r 3               
000B30r 3               addbo:
000B30r 3  A2 05        	ldx #5			; last digit.
000B32r 3  18           	clc
000B33r 3               addbo0:
000B33r 3  BD rr rr     	lda score,x		; get score.
000B36r 3  7D rr rr     	adc bonus,x		; add bonus.
000B39r 3  38           	sec			; 0 to 18.
000B3Ar 3  E9 30        	sbc #48
000B3Cr 3  48           	pha
000B3Dr 3  A9 30        	lda #'0'
000B3Fr 3  9D rr rr     	sta bonus,x
000B42r 3  68           	pla
000B43r 3  C9 3A        	cmp #58
000B45r 3  90 03        	bcc addbo1
000B47r 3  38           	sec
000B48r 3  E9 0A        	sbc #10
000B4Ar 3               addbo1:
000B4Ar 3  9D rr rr     	sta score,x		; zeroise bonus.
000B4Dr 3  CA           	dex			; next digit.
000B4Er 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000B50r 3  60           	rts
000B51r 3               
000B51r 3               ;------------------------------------
000B51r 3               ; Swap score and bonus.
000B51r 3               ;------------------------------------
000B51r 3               
000B51r 3               swpsb:
000B51r 3  A2 05        	ldx #5			; digits to add.
000B53r 3               swpsb0:
000B53r 3  BD rr rr     	lda score,x 		; get score digits.
000B56r 3  48           	pha			; save digit
000B57r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
000B5Ar 3  9D rr rr     	sta score,x		; switch score-bonus
000B5Dr 3  68           	pla
000B5Er 3  9D rr rr     	sta bonus,x
000B61r 3  CA           	dex 			; repeat for all 6 digits.
000B62r 3  10 EF        	bpl swpsb0
000B64r 3  60           	rts
000B65r 3               
000B65r 3               ;----------------------------------------------------
000B65r 3               ; Get screen address.
000B65r 3               ;----------------------------------------------------
000B65r 3               
000B65r 3               gprad:
000B65r 3  20 rr rr     	jsr getoffset
000B68r 3               
000B68r 3  A5 rr        	lda bufaddr
000B6Ar 3  85 rr        	sta scraddr
000B6Cr 3  18           	clc
000B6Dr 3  A5 rr        	lda bufaddr+1
000B6Fr 3  69 10        	adc #>ScreenAddr
000B71r 3  85 rr        	sta scraddr+1
000B73r 3  60           	rts
000B74r 3               
000B74r 3               ;--------------------------------------------------------------
000B74r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000B74r 3               ;
000B74r 3               ; Output:
000B74r 3               ;  bufaddr = MAP + dispy*24 + dispx
000B74r 3               ;--------------------------------------------------------------
000B74r 3               
000B74r 3               pradd:
000B74r 3               
000B74r 3  20 rr rr     	jsr getoffset
000B77r 3               
000B77r 3  18           	clc
000B78r 3  A5 rr        	lda bufaddr+1
000B7Ar 3  69 04        	adc #>MapAddr
000B7Cr 3  85 rr        	sta bufaddr+1
000B7Er 3  60           	rts
000B7Fr 3               
000B7Fr 3               ;----------------------------------------------
000B7Fr 3               
000B7Fr 3               ; Print attributes, properties and pixels.
000B7Fr 3               ;
000B7Fr 3               ; Input:
000B7Fr 3               ;  A	= tile number
000B7Fr 3               ;----------------------------------------------
000B7Fr 3               
000B7Fr 3               pbpattr:			; entry PUTBLOCK command
000B7Fr 3  A4 rr        	ldy charx
000B81r 3  84 rr        	sty dispx
000B83r 3  A4 rr        	ldy chary
000B85r 3  84 rr        	sty dispy
000B87r 3               pattr:
000B87r 3               .if aflag
000B87r 3               	pha
000B87r 3               	jsr wbloc		; save blockinfo
000B87r 3               	pla
000B87r 3               .endif
000B87r 3               
000B87r 3               pattr2:
000B87r 3  85 63        	sta z80_b		; store cell in b register for now.
000B89r 3  AA           	tax
000B8Ar 3  BD rr rr     	lda bprop,x 		; get block property
000B8Dr 3  85 62        	sta z80_c		; save property
000B8Fr 3  C9 08        	cmp #COLECT		; if not COLECT, skip
000B91r 3  D0 05        	bne :+
000B93r 3  A5 63        	lda z80_b
000B95r 3  8D rr rr     	sta colpatt		; save blocknr as COLECT for erasing
000B98r 3               :
000B98r 3  20 rr rr     	jsr pradd 		; get MAP address for storing property
000B9Br 3  A5 62        	lda z80_c		; Get block property
000B9Dr 3  A0 00        	ldy #0
000B9Fr 3  91 rr        	sta (bufaddr),y 	; store property in MAP
000BA1r 3               
000BA1r 3               ; Print attributes, no properties.
000BA1r 3               
000BA1r 3               panp:
000BA1r 3  20 rr rr     	jsr gprad 		; get screen address.
000BA4r 3               
000BA4r 3  A5 63        	lda z80_b		; get blocknr
000BA6r 3  18           	clc
000BA7r 3  69 60        	adc #96			; add 96 to skip font
000BA9r 3  A0 00        	ldy #0
000BABr 3  91 rr        	sta (scraddr),y 	; copy to screen.
000BADr 3  E6 rr        	inc dispx 		; move along one.
000BAFr 3  E6 rr        	inc charx
000BB1r 3               
000BB1r 3  60           	rts
000BB2r 3               
000BB2r 3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
000BB6r 3  60 40 20 00  
000BBAr 3               
000BBAr 3               ;----------------------------------------------
000BBAr 3               ; Write block
000BBAr 3               ;----------------------------------------------
000BBAr 3               
000BBAr 3               .if aflag
000BBAr 3               wbloc:
000BBAr 3               	ldy #3
000BBAr 3               	sta (pbptr),y		; store block number
000BBAr 3               	dey
000BBAr 3               	lda dispx
000BBAr 3               	sta (pbptr),y		; write x position of block.
000BBAr 3               	dey
000BBAr 3               	lda dispy
000BBAr 3               	sta (pbptr),y		; write y position of block.
000BBAr 3               	dey
000BBAr 3               	lda scno
000BBAr 3               	sta (pbptr),y		; write screen.
000BBAr 3               	clc			; point to next free location
000BBAr 3               	lda pbptr
000BBAr 3               	adc #4
000BBAr 3               	sta pbptr
000BBAr 3               	bcc :+
000BBAr 3               	inc pbptr+1
000BBAr 3               :
000BBAr 3               	rts
000BBAr 3               .endif
000BBAr 3               
000BBAr 3               ;----------------------------------------------
000BBAr 3               ; Print character pixels, no more.
000BBAr 3               ;
000BBAr 3               ; Input:
000BBAr 3               ;  A	= character to print
000BBAr 3               ;----------------------------------------------
000BBAr 3               
000BBAr 3               pchr:
000BBAr 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000BBDr 3  E6 rr        	inc dispx		; move along one.
000BBFr 3  60           	rts
000BC0r 3               
000BC0r 3               ;----------------------------------------------------
000BC0r 3               ; Shifter sprite routine for objects.
000BC0r 3               ;----------------------------------------------------
000BC0r 3               
000BC0r 3               .if oflag
000BC0r 3               sprit7:
000BC0r 3               	lda z80_b
000BC0r 3               	beq sprit0
000BC0r 3               	sta z80_a
000BC0r 3               sprit3:
000BC0r 3               	lsr spr			; shift into position.
000BC0r 3               	ror spr+1
000BC0r 3               	ror spr+2
000BC0r 3               	dec z80_a		; one less iteration.
000BC0r 3               	bne sprit3
000BC0r 3               sprit0:
000BC0r 3               	rts 			; now apply to screen.
000BC0r 3               
000BC0r 3               ;----------------------------------------------------
000BC0r 3               ; Draw sprite
000BC0r 3               ;----------------------------------------------------
000BC0r 3               
000BC0r 3               sprite:
000BC0r 3               	stx xtmp		; Save X-reg
000BC0r 3               	jsr scadd 		; get screen address in scraddr.
000BC0r 3               
000BC0r 3               	lda dispx 		; x position.
000BC0r 3               	and #7 			; position straddling cells.
000BC0r 3               	sta z80_b		; store in b register.
000BC0r 3               
000BC0r 3               	lda z80_l		; store sprite graphic address.
000BC0r 3               	sta sprit1+1
000BC0r 3               	sta sprit2+1
000BC0r 3               	lda z80_h
000BC0r 3               	sta sprit1+2
000BC0r 3               	sta sprit2+2
000BC0r 3               
000BC0r 3               	ldx #0			; pixel height.
000BC0r 3               	ldy #0
000BC0r 3               sprit1:
000BC0r 3               	lda objdta,x		; fetch first byte.
000BC0r 3               	sta spr
000BC0r 3               	inx
000BC0r 3               sprit2:
000BC0r 3               	lda objdta,x
000BC0r 3               	sta spr+1
000BC0r 3               
000BC0r 3               	lda #0
000BC0r 3               	sta spr+2
000BC0r 3               	jsr sprit7		; shift sprite
000BC0r 3               
000BC0r 3               	dex
000BC0r 3               	lda spr			; fetch graphic.
000BC0r 3               	ldy spritetab,x
000BC0r 3               	eor (scraddr),y		; merge with screen image.
000BC0r 3               	sta (scraddr),y		; write to screen.
000BC0r 3               	inx			; next screen byte.
000BC0r 3               
000BC0r 3               	lda spr+1		; fetch graphic.
000BC0r 3               	ldy spritetab,x
000BC0r 3               	eor (scraddr),y		; merge with screen image.
000BC0r 3               	sta (scraddr),y		; write to screen.
000BC0r 3               	iny
000BC0r 3               
000BC0r 3               	lda spr+2		; fetch graphic.
000BC0r 3               	eor (scraddr),y		; merge with screen image.
000BC0r 3               	sta (scraddr),y		; write to screen.
000BC0r 3               
000BC0r 3               	inx			; next source byte.
000BC0r 3               	cpx #16
000BC0r 3               	bne :+
000BC0r 3               	inc scraddr+1
000BC0r 3               :
000BC0r 3               	cpx #32
000BC0r 3               	bne sprit1		; repeat
000BC0r 3               
000BC0r 3               	ldx xtmp		; retreive X-reg
000BC0r 3               	rts
000BC0r 3               
000BC0r 3               spritetab:
000BC0r 3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
000BC0r 3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000BC0r 3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
000BC0r 3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000BC0r 3               
000BC0r 3               spr:	.byte 0,0,0
000BC0r 3               
000BC0r 3               ;xtmp:	.byte 0
000BC0r 3               .endif
000BC0r 3               
000BC0r 3               ;-----------------------------------------------------------
000BC0r 3               ; Get room address.
000BC0r 3               ;-----------------------------------------------------------
000BC0r 3               
000BC0r 3               groom:
000BC0r 3  A6 rr        	ldx scno 		; screen number.
000BC2r 3  A0 00        	ldy #0
000BC4r 3               groomx:
000BC4r 3  A9 rr        	lda #<scdat 		; pointer to screens.
000BC6r 3  85 66        	sta z80_l
000BC8r 3  A9 rr        	lda #>scdat
000BCAr 3  85 67        	sta z80_h
000BCCr 3               groom1:
000BCCr 3  E0 00        	cpx #0			; is it the first one?
000BCEr 3  F0 15        	beq groom0 		; no more screens to skip.
000BD0r 3               
000BD0r 3  18           	clc
000BD1r 3  A5 66        	lda z80_l
000BD3r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
000BD6r 3  85 66        	sta z80_l
000BD8r 3  C8           	iny			; point to high byte.
000BD9r 3  A5 67        	lda z80_h
000BDBr 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000BDEr 3  85 67        	sta z80_h
000BE0r 3  C8           	iny			; next address.
000BE1r 3               
000BE1r 3  CA           	dex 			; one less iteration.
000BE2r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000BE5r 3               groom0:
000BE5r 3  AD rr rr     	lda numsc 		; add displacement.
000BE8r 3  0A           	asl a
000BE9r 3  18           	clc			; add double displacement to address.
000BEAr 3  65 66        	adc z80_l
000BECr 3  85 66        	sta z80_l
000BEEr 3  A5 67        	lda z80_h
000BF0r 3  69 00        	adc #0
000BF2r 3  85 67        	sta z80_h
000BF4r 3  60           	rts
000BF5r 3               
000BF5r 3               ;-----------------------------------------------------------
000BF5r 3               ; Draw present room.
000BF5r 3               ;-----------------------------------------------------------
000BF5r 3               
000BF5r 3               droom:
000BF5r 3  AD rr rr     	lda wintop 		; window top.
000BF8r 3  85 rr        	sta dispy		; set cursor y position.
000BFAr 3               droom2:
000BFAr 3  20 rr rr     	jsr groom 		; get address of current room.
000BFDr 3  A9 00        	lda #0	 		; zero in accumulator.
000BFFr 3  85 rr        	sta comcnt 		; reset compression counter.
000C01r 3  AD rr rr     	lda winhgt 		; height of window.
000C04r 3  85 rr        	sta rrow		; set row counter
000C06r 3               droom0:
000C06r 3  AD rr rr     	lda winlft 		; window left edge.
000C09r 3  85 rr        	sta dispx 		; set cursor x position.
000C0Br 3  AD rr rr     	lda winwid 		; width of window.
000C0Er 3  85 rr        	sta rcol		; set column counter
000C10r 3               droom1:
000C10r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000C13r 3               .if xflag
000C13r 3               	jsr drwmeta
000C13r 3               .else
000C13r 3  20 rr rr     	jsr pattr2 		; set tile attribute in MAP and display tile.
000C16r 3               
000C16r 3               .endif
000C16r 3               
000C16r 3  C6 rr        	dec rcol		; one less column.
000C18r 3  D0 F6        	bne droom1 		; repeat for entire line.
000C1Ar 3  E6 rr        	inc dispy		; move down one line.
000C1Cr 3               .if xflag
000C1Cr 3               	inc dispy
000C1Cr 3               .endif
000C1Cr 3               
000C1Cr 3  C6 rr        	dec rrow 		; one less row.
000C1Er 3  D0 E6        	bne droom0 		; repeat for all rows.
000C20r 3               
000C20r 3  60           	rts
000C21r 3               
000C21r 3               ;rcol:	.byte 0
000C21r 3               ;rrow:	.byte 0
000C21r 3               
000C21r 3               ;----------------------------------------------
000C21r 3               ; Decompress bytes on-the-fly.
000C21r 3               ;----------------------------------------------
000C21r 3               
000C21r 3               flbyt:
000C21r 3  A5 rr        	lda comcnt 		; compression counter.
000C23r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000C25r 3               
000C25r 3  A0 00        	ldy #0
000C27r 3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000C29r 3  E6 66        	inc z80_l 		; point to next cell.
000C2Br 3  D0 02        	bne :+
000C2Dr 3  E6 67        	inc z80_h
000C2Fr 3               :
000C2Fr 3  C9 FF        	cmp #255 		; is this byte a control code?
000C31r 3  F0 01        	beq :+
000C33r 3  60           	rts 			; no, this byte is uncompressed.
000C34r 3               :
000C34r 3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000C36r 3  85 rr        	sta combyt 		; set up the type.
000C38r 3  E6 66        	inc z80_l 		; point to quantity.
000C3Ar 3  D0 02        	bne :+
000C3Cr 3  E6 67        	inc z80_h
000C3Er 3               :
000C3Er 3  B1 66        	lda (z80_hl),y 		; get quantity.
000C40r 3  E6 66        	inc z80_l 		; point to next byte.
000C42r 3  D0 02        	bne :+
000C44r 3  E6 67        	inc z80_h
000C46r 3               :
000C46r 3               flbyt1:
000C46r 3  85 rr        	sta comcnt 		; store new quantity.
000C48r 3  C6 rr        	dec comcnt		; one less.
000C4Ar 3  A5 rr        	lda combyt 		; byte to expand.
000C4Cr 3  60           	rts
000C4Dr 3               
000C4Dr 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000C4Dr 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000C4Dr 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000C4Dr 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000C4Dr 3               .if xflag
000C4Dr 3               drwmeta:
000C4Dr 3               	sta tmpblk
000C4Dr 3               	jsr pattr2
000C4Dr 3               
000C4Dr 3               	inc dispy
000C4Dr 3               	dec dispx
000C4Dr 3               	ldx tmpblk
000C4Dr 3               	beq :+
000C4Dr 3               	inx
000C4Dr 3               :
000C4Dr 3               	txa
000C4Dr 3               	jsr pattr2
000C4Dr 3               
000C4Dr 3               	ldx tmpblk
000C4Dr 3               	beq :+
000C4Dr 3               	inx
000C4Dr 3               	inx
000C4Dr 3               	inx
000C4Dr 3               :
000C4Dr 3               	txa
000C4Dr 3               	jsr pattr2
000C4Dr 3               
000C4Dr 3               	dec dispy
000C4Dr 3               	dec dispx
000C4Dr 3               	ldx tmpblk
000C4Dr 3               	beq :+
000C4Dr 3               	inx
000C4Dr 3               	inx
000C4Dr 3               :
000C4Dr 3               	txa
000C4Dr 3               	jsr pattr2
000C4Dr 3               	rts
000C4Dr 3               
000C4Dr 3               tmpblk:	.byte 0
000C4Dr 3               
000C4Dr 3               .endif
000C4Dr 3               
000C4Dr 3               ;------------------------------------------
000C4Dr 3               ; Ladder down check.
000C4Dr 3               ;
000C4Dr 3               ; Input:
000C4Dr 3               ;  IX = sprite pointer
000C4Dr 3               ;------------------------------------------
000C4Dr 3               
000C4Dr 3               .if lflag
000C4Dr 3               laddd:
000C4Dr 3               	ldy #9
000C4Dr 3               	lda (z80_ix),y		; x coordinate.
000C4Dr 3               	sta dispx
000C4Dr 3               
000C4Dr 3               	ldy #8
000C4Dr 3               	lda (z80_ix),y		; y coordinate.
000C4Dr 3               	and #254		; make it even.
000C4Dr 3               	sta (z80_ix),y 		; reset it.
000C4Dr 3               	clc 			; look down 16 pixels.
000C4Dr 3               numsp5:
000C4Dr 3               	adc #SPR_HGT
000C4Dr 3               	sta dispy		; coords in dispx,dispy.
000C4Dr 3               	jmp laddv
000C4Dr 3               
000C4Dr 3               ;------------------------------------------
000C4Dr 3               ; Ladder up check.
000C4Dr 3               ;
000C4Dr 3               ; Input:
000C4Dr 3               ;  IX = sprite pointer
000C4Dr 3               ;
000C4Dr 3               ; Output:
000C4Dr 3               ;  A  = 0 is ok, A <>0 is not ok
000C4Dr 3               ;------------------------------------------
000C4Dr 3               
000C4Dr 3               laddu:
000C4Dr 3               	ldy #9
000C4Dr 3               	lda (z80_ix),y		; x coordinate.
000C4Dr 3               	sta dispx
000C4Dr 3               
000C4Dr 3               	ldy #8
000C4Dr 3               	lda (z80_ix),y		; y coordinate.
000C4Dr 3               	and #254 		; make it even.
000C4Dr 3               	sta (z80_ix),y		; reset it.
000C4Dr 3               	clc 			; look 2 pixels above feet.
000C4Dr 3               numsp6:
000C4Dr 3               	adc #SPR_HGT-2
000C4Dr 3               	sta dispy		; coords in dispx,dispy.
000C4Dr 3               laddv:
000C4Dr 3               	jsr tstbl 		; get map address.
000C4Dr 3               	jsr ldchk 		; standard ladder check.
000C4Dr 3               	beq :+
000C4Dr 3               	rts 			; no way through.
000C4Dr 3               :
000C4Dr 3               	inc bufaddr 		; look right one cell.
000C4Dr 3               	bne :+
000C4Dr 3               	inc bufaddr+1
000C4Dr 3               :
000C4Dr 3               	jsr ldchk 		; do the check.
000C4Dr 3               	beq :+
000C4Dr 3               	rts 			; impassable.
000C4Dr 3               :
000C4Dr 3               	lda dispx 		; y coordinate.
000C4Dr 3               	and #7 			; position straddling block cells.
000C4Dr 3               	bne :+
000C4Dr 3               	rts 			; no more checks needed.
000C4Dr 3               :
000C4Dr 3               	inc bufaddr 		; look to third cell.
000C4Dr 3               	bne :+
000C4Dr 3               	inc bufaddr+1
000C4Dr 3               :
000C4Dr 3               	jsr ldchk 		; do the check.
000C4Dr 3               	rts  			; return with zero flag set accordingly.
000C4Dr 3               .endif
000C4Dr 3               
000C4Dr 3               ;---------------------------------------------------------
000C4Dr 3               ; Can go up check.
000C4Dr 3               ;
000C4Dr 3               ; Input:
000C4Dr 3               ;  IX = sprite pointer
000C4Dr 3               ;
000C4Dr 3               ; Output:
000C4Dr 3               ;  A  = 0 is ok, A <>0 is not ok
000C4Dr 3               ;---------------------------------------------------------
000C4Dr 3               
000C4Dr 3               cangu:
000C4Dr 3  A0 09        	ldy #9
000C4Fr 3  B1 68        	lda (z80_ix),y		; x coordinate.
000C51r 3  85 rr        	sta dispx
000C53r 3  A0 08        	ldy #8
000C55r 3  B1 68        	lda (z80_ix),y 		; y coordinate.
000C57r 3  38           	sec
000C58r 3  E9 02        	sbc #2
000C5Ar 3  85 rr        	sta dispy		; coords in dispx,dispy.
000C5Cr 3  20 rr rr     	jsr tstbl 		; get map address.
000C5Fr 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000C62r 3  F0 01        	beq :+
000C64r 3  60           	rts			; no way through.
000C65r 3               :
000C65r 3  E6 rr        	inc bufaddr		; look right one cell.
000C67r 3  D0 02        	bne :+
000C69r 3  E6 rr        	inc bufaddr+1
000C6Br 3               :
000C6Br 3  20 rr rr     	jsr lrchk 		; do the check.
000C6Er 3  F0 01        	beq :+
000C70r 3  60           	rts			; impassable.
000C71r 3               :
000C71r 3  A5 rr        	lda dispx		; x coordinate.
000C73r 3  29 07        	and #7			; position straddling block cells.
000C75r 3  D0 01        	bne :+
000C77r 3  60           	rts			; no more checks needed.
000C78r 3               :
000C78r 3  E6 rr        	inc bufaddr		; look to third cell.
000C7Ar 3  D0 02        	bne :+
000C7Cr 3  E6 rr        	inc bufaddr+1
000C7Er 3               :
000C7Er 3  20 rr rr     	jsr lrchk		; do the check.
000C81r 3  60           	rts 			; return with zero flag set accordingly.
000C82r 3               
000C82r 3               ;---------------------------------------------------------
000C82r 3               ; Can go down check.
000C82r 3               ;
000C82r 3               ; Input:
000C82r 3               ;  IX = sprite pointer
000C82r 3               ;
000C82r 3               ; Output:
000C82r 3               ;  A  = 0 is ok, A <>0 is not ok
000C82r 3               ;---------------------------------------------------------
000C82r 3               
000C82r 3               cangd:
000C82r 3  A0 09        	ldy #9
000C84r 3  B1 68        	lda (z80_ix),y 		; x coordinate.
000C86r 3  85 rr        	sta dispx
000C88r 3  A0 08        	ldy #8
000C8Ar 3  B1 68        	lda (z80_ix),y		; y coordinate.
000C8Cr 3  18           	clc
000C8Dr 3               numsp3:
000C8Dr 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000C8Fr 3  85 rr        	sta dispy		; coords in dispx,dispy.
000C91r 3  20 rr rr     	jsr tstbl 		; get map address.
000C94r 3  20 rr rr     	jsr plchk 		; block, platform check.
000C97r 3  F0 01        	beq :+
000C99r 3  60           	rts			; no way through.
000C9Ar 3               :
000C9Ar 3  E6 rr        	inc bufaddr		; look right one cell.
000C9Cr 3  D0 02        	bne :+
000C9Er 3  E6 rr        	inc bufaddr+1
000CA0r 3               :
000CA0r 3  20 rr rr     	jsr plchk		; block, platform check.
000CA3r 3  F0 01        	beq :+
000CA5r 3  60           	rts			; impassable.
000CA6r 3               :
000CA6r 3  A5 rr        	lda dispx		; x coordinate.
000CA8r 3  29 07        	and #7			; position straddling block cells.
000CAAr 3  D0 01        	bne :+
000CACr 3  60           	rts			; no more checks needed.
000CADr 3               :
000CADr 3  E6 rr        	inc bufaddr		; look to third cell.
000CAFr 3  D0 02        	bne :+
000CB1r 3  E6 rr        	inc bufaddr+1
000CB3r 3               :
000CB3r 3  20 rr rr     	jsr plchk		; block, platform check.
000CB6r 3  60           	rts			; return with zero flag set accordingly.
000CB7r 3               
000CB7r 3               ;---------------------------------------------------------
000CB7r 3               ; Can go left check.
000CB7r 3               ;
000CB7r 3               ; Input:
000CB7r 3               ;  IX = sprite pointer
000CB7r 3               ;
000CB7r 3               ; Output:
000CB7r 3               ;  A  = 0 is ok, A <>0 is not ok
000CB7r 3               ;---------------------------------------------------------
000CB7r 3               
000CB7r 3               cangl:
000CB7r 3  A0 08        	ldy #8
000CB9r 3  B1 68        	lda (z80_ix),y 		; y coordinate.
000CBBr 3  85 rr        	sta dispy
000CBDr 3  A0 09        	ldy #9
000CBFr 3  B1 68        	lda (z80_ix),y 		; x coordinate.
000CC1r 3  38           	sec
000CC2r 3  E9 02        	sbc #2			; look left 2 pixels.
000CC4r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000CC6r 3  4C rr rr     	jmp cangh		; test if we can go there.
000CC9r 3               
000CC9r 3               ;---------------------------------------------------------
000CC9r 3               ; Can go right check.
000CC9r 3               ;
000CC9r 3               ; Input:
000CC9r 3               ;  IX = sprite pointer
000CC9r 3               ;
000CC9r 3               ; Output:
000CC9r 3               ;  A  = 0 is ok, A <>0 is not ok
000CC9r 3               ;---------------------------------------------------------
000CC9r 3               
000CC9r 3               cangr:
000CC9r 3  A0 08        	ldy #8
000CCBr 3  B1 68        	lda (z80_ix),y		; y coordinate.
000CCDr 3  85 rr        	sta dispy
000CCFr 3  A0 09        	ldy #9
000CD1r 3  B1 68        	lda (z80_ix),y		; x coordinate.
000CD3r 3  18           	clc
000CD4r 3  69 10        	adc #16			; look right 16 pixels.
000CD6r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000CD8r 3               cangh:
000CD8r 3               cangh2:
000CD8r 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000CDAr 3  85 63        	sta z80_b
000CDCr 3  A5 rr        	lda dispy		; y position.
000CDEr 3  29 07        	and #7			; does x straddle cells?
000CE0r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000CE2r 3  C6 63        	dec z80_b		; one less row to write.
000CE4r 3               cangh0:
000CE4r 3  20 rr rr     	jsr tstbl		; get map address.
000CE7r 3               cangh1:
000CE7r 3  20 rr rr     	jsr lrchk		; standard left/right check.
000CEAr 3  F0 01        	beq :+
000CECr 3  60           	rts			; no way through.
000CEDr 3               :
000CEDr 3  48           	pha
000CEEr 3  18           	clc
000CEFr 3  A5 rr        	lda bufaddr
000CF1r 3  69 20        	adc #32			; look down.
000CF3r 3  85 rr        	sta bufaddr
000CF5r 3  90 02        	bcc :+
000CF7r 3  E6 rr        	inc bufaddr+1
000CF9r 3               :
000CF9r 3  68           	pla
000CFAr 3               
000CFAr 3  C6 63        	dec z80_b
000CFCr 3  D0 E9        	bne cangh1
000CFEr 3  60           	rts
000CFFr 3               
000CFFr 3               ;-------------------------------------
000CFFr 3               ; Check left/right movement is okay.
000CFFr 3               ;
000CFFr 3               ; Input:
000CFFr 3               ;  bufaddr = MAP + x/8 + y/8*32
000CFFr 3               ;
000CFFr 3               ; Output:
000CFFr 3               ;  A  = 0 is ok, A <>0 is not ok
000CFFr 3               ;-------------------------------------
000CFFr 3               
000CFFr 3               lrchk:
000CFFr 3  A0 00        	ldy #0
000D01r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000D03r 3  C9 02        	cmp #WALL 		; is it passable?
000D05r 3  F0 0A        	beq lrchkx		; no.
000D07r 3               
000D07r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000D09r 3  F0 06        	beq lrchkx		; not passable.
000D0Br 3               lrlchkx:
000D0Br 3  A9 00        	lda #0
000D0Dr 3  60           	rts
000D0Er 3               
000D0Er 3               ;--------------------------------------------------------------
000D0Er 3               ; Called by mmenu
000D0Er 3               ;--------------------------------------------------------------
000D0Er 3               
000D0Er 3               always:
000D0Er 3  A9 00        	lda #0		; report it as okay.
000D10r 3  60           	rts
000D11r 3               
000D11r 3               lrchkx:
000D11r 3  A9 01        	lda #1 			; reset all bits.
000D13r 3  60           	rts
000D14r 3               
000D14r 3               
000D14r 3               ;--------------------------------------------------------------
000D14r 3               ; Check platform or solid item is not in way.
000D14r 3               ;
000D14r 3               ; Input:
000D14r 3               ;  bufaddr = MAP + x/8 + y/8*32
000D14r 3               ;
000D14r 3               ; Output:
000D14r 3               ;  A  = 0 is ok, A <>0 is not ok
000D14r 3               ;--------------------------------------------------------------
000D14r 3               
000D14r 3               plchk:
000D14r 3  A0 00        	ldy #0
000D16r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000D18r 3  C9 02        	cmp #WALL 		; is it passable?
000D1Ar 3  F0 F5        	beq lrchkx		; no.
000D1Cr 3               .if pflag .or dflag
000D1Cr 3               	cmp #FODDER		; fodder has to be dug.
000D1Cr 3               	beq lrchkx		; not passable.
000D1Cr 3               .endif
000D1Cr 3  C9 01        	cmp #PLATFM		; platform is solid.
000D1Er 3  F0 03        	beq plchkx		; not passable.
000D20r 3               .if lflag
000D20r 3               	cmp #LADDER		; is it a ladder?
000D20r 3               	beq lrchkx		; on ladder, deny movement.
000D20r 3               .endif
000D20r 3               plchk0:
000D20r 3               .if crflag
000D20r 3               	cmp #9
000D20r 3               	bcc :+
000D20r 3               	jmp lrchkx
000D20r 3               :
000D20r 3               .endif
000D20r 3  A9 00        	lda #0			; report as ok
000D22r 3  60           	rts
000D23r 3               plchkx:
000D23r 3  A5 rr        	lda dispy		; x coordinate.
000D25r 3  29 07        	and #7			; position straddling blocks.
000D27r 3  F0 E8        	beq lrchkx		; on platform, deny movement.
000D29r 3  4C rr rr     	jmp plchk0
000D2Cr 3               
000D2Cr 3               ;--------------------------------------------------------------
000D2Cr 3               ; Check ladder is available.
000D2Cr 3               ;
000D2Cr 3               ; Input:
000D2Cr 3               ;  bufaddr = MAP + x/8 + y/8*32
000D2Cr 3               ;
000D2Cr 3               ; Output:
000D2Cr 3               ;  A  = 0 is ok, A <>0 is not ok
000D2Cr 3               ;--------------------------------------------------------------
000D2Cr 3               
000D2Cr 3               .if lflag
000D2Cr 3               ldchk:
000D2Cr 3               	ldy #0
000D2Cr 3               	lda (bufaddr),y 	; fetch cell.
000D2Cr 3               	sta $f0
000D2Cr 3               	cmp #LADDER 		; is it a ladder?
000D2Cr 3               	beq :+
000D2Cr 3               	lda #1
000D2Cr 3               	rts  			; return with zero flag set accordingly.
000D2Cr 3               :
000D2Cr 3               	lda #0
000D2Cr 3               	rts
000D2Cr 3               .endif
000D2Cr 3               
000D2Cr 3               ;--------------------------------------------------------------
000D2Cr 3               ; Get collectables.
000D2Cr 3               ;--------------------------------------------------------------
000D2Cr 3               
000D2Cr 3               .if cflag
000D2Cr 3               getcol:
000D2Cr 3                       lda #COLECT             ; collectable blocks.
000D2Cr 3                       sta z80_b
000D2Cr 3                       jsr tded                ; test for collectable blocks.
000D2Cr 3                       cmp z80_b               ; did we find one?
000D2Cr 3                       beq :+
000D2Cr 3                       rts                     ; none were found, job done.
000D2Cr 3               :
000D2Cr 3                       jsr gtblk               ; get block.
000D2Cr 3                       jsr evnt20              ; collected block event.
000D2Cr 3                       jmp getcol              ; repeat until none left.
000D2Cr 3               
000D2Cr 3               ; Get collectable block.
000D2Cr 3               
000D2Cr 3               gtblk:
000D2Cr 3               	ldy #0
000D2Cr 3               	lda (bufaddr),y
000D2Cr 3               	sta z80_a
000D2Cr 3                       lda #0
000D2Cr 3                       sta (bufaddr),y		; make it empty now.
000D2Cr 3               
000D2Cr 3               	lda bufaddr		; set dispx
000D2Cr 3               	and #31
000D2Cr 3               	sta dispx
000D2Cr 3               
000D2Cr 3               	lda bufaddr+1		; Set dispy
000D2Cr 3               	sec
000D2Cr 3               	sbc #>MAP
000D2Cr 3               	sta bufaddr+1
000D2Cr 3               	asl bufaddr
000D2Cr 3               	rol bufaddr+1
000D2Cr 3               	asl bufaddr
000D2Cr 3               	rol bufaddr+1
000D2Cr 3               	asl bufaddr
000D2Cr 3               	rol bufaddr+1
000D2Cr 3               	lda bufaddr+1
000D2Cr 3               	sta dispy
000D2Cr 3               
000D2Cr 3               	lda colpatt		; get blocknr
000D2Cr 3               	sta z80_e		; displacement in e.
000D2Cr 3               	lda #0
000D2Cr 3               	sta z80_d		; no high byte.
000D2Cr 3               	asl z80_e  		; multiply char by 8.
000D2Cr 3               	rol z80_d
000D2Cr 3               	asl z80_e
000D2Cr 3               	rol z80_d
000D2Cr 3               	asl z80_e
000D2Cr 3               	rol z80_d
000D2Cr 3               	clc
000D2Cr 3               	lda z80_e
000D2Cr 3               	adc #<chgfx 		; address of graphics.
000D2Cr 3               	sta tileaddr
000D2Cr 3               	lda z80_d
000D2Cr 3               	adc #>chgfx
000D2Cr 3               	sta tileaddr+1
000D2Cr 3               	jsr gprad 		; get screen address.
000D2Cr 3               	ldx #7			; number of pixel rows to write.
000D2Cr 3               gtblk0:
000D2Cr 3               	ldy #0
000D2Cr 3               	lda (tileaddr),y 	; get image byte.
000D2Cr 3               	ldy scrtab,x
000D2Cr 3               	eor (scraddr),y 	; XOR tile on screen
000D2Cr 3               	sta (scraddr),y 	; copy to screen.
000D2Cr 3               	inc tileaddr 		; next image byte.
000D2Cr 3               	bne :+
000D2Cr 3               	inc tileaddr+1
000D2Cr 3               :
000D2Cr 3               	dex	 		; repeat for 8 pixel rows.
000D2Cr 3               	bpl gtblk0
000D2Cr 3               	rts
000D2Cr 3               .endif
000D2Cr 3               
000D2Cr 3               ;--------------------------------------------------------------
000D2Cr 3               ; Touched deadly block check.
000D2Cr 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000D2Cr 3               ;
000D2Cr 3               ; Input:
000D2Cr 3               ;  IX = sprite address
000D2Cr 3               ;
000D2Cr 3               ; Output:
000D2Cr 3               ;  A  = 0 is ok, A=5 is not ok
000D2Cr 3               ;--------------------------------------------------------------
000D2Cr 3               
000D2Cr 3               tded:
000D2Cr 3  A0 08        	ldy #8
000D2Er 3  B1 68        	lda (z80_ix),y 		; y coordinate.
000D30r 3  85 rr        	sta dispy
000D32r 3  C8           	iny
000D33r 3  B1 68        	lda (z80_ix),y 		; x coordinate.
000D35r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000D37r 3  20 rr rr     	jsr tstbl		; get map address.
000D3Ar 3  48           	pha
000D3Br 3  A9 1F        	lda #31			; default distance to next line down.
000D3Dr 3  85 64        	sta z80_e
000D3Fr 3  68           	pla
000D40r 3  C5 63        	cmp z80_b		; is this the required block?
000D42r 3  D0 01        	bne :+
000D44r 3  60           	rts			; yes.
000D45r 3               :
000D45r 3  E6 rr        	inc bufaddr 		; next cell.
000D47r 3  D0 02        	bne :+
000D49r 3  E6 rr        	inc bufaddr+1
000D4Br 3               :
000D4Br 3  A0 00        	ldy #0
000D4Dr 3  B1 rr        	lda (bufaddr),y		; fetch type.
000D4Fr 3  C5 63        	cmp z80_b 		; is this deadly/custom?
000D51r 3  D0 01        	bne :+
000D53r 3  60           	rts			; yes.
000D54r 3               :
000D54r 3  A5 rr        	lda dispx		; horizontal position.
000D56r 3  85 62        	sta z80_c 		; store column in c register.
000D58r 3  29 07        	and #7			; is it straddling cells?
000D5Ar 3  D0 03        	bne :+
000D5Cr 3  4C rr rr     	jmp tded0		; no.
000D5Fr 3               :
000D5Fr 3  E6 rr        	inc bufaddr 		; last cell.
000D61r 3  D0 02        	bne :+
000D63r 3  E6 rr        	inc bufaddr+1
000D65r 3               :
000D65r 3  A0 00        	ldy #0
000D67r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000D69r 3  C5 63        	cmp z80_b		; is this the block?
000D6Br 3  D0 01        	bne :+
000D6Dr 3  60           	rts			; yes.
000D6Er 3               :
000D6Er 3  C6 64        	dec z80_e		; one less cell to next row down.
000D70r 3               tded0:
000D70r 3  18           	clc 			; point to next row.
000D71r 3  A5 rr        	lda bufaddr
000D73r 3  65 64        	adc z80_e
000D75r 3  85 rr        	sta bufaddr
000D77r 3  90 02        	bcc :+
000D79r 3  E6 rr        	inc bufaddr+1
000D7Br 3               :
000D7Br 3  A0 00        	ldy #0
000D7Dr 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000D7Fr 3  C5 63        	cmp z80_b		; is this fatal?
000D81r 3  D0 01        	bne :+
000D83r 3  60           	rts			; yes.
000D84r 3               :
000D84r 3  E6 rr        	inc bufaddr 		; next cell.
000D86r 3  D0 02        	bne :+
000D88r 3  E6 rr        	inc bufaddr+1
000D8Ar 3               :
000D8Ar 3  A0 00        	ldy #0
000D8Cr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000D8Er 3  C5 63        	cmp z80_b		; is this fatal?
000D90r 3  D0 01        	bne :+
000D92r 3  60           	rts			; yes.
000D93r 3               :
000D93r 3  A5 62        	lda z80_c		; horizontal position.
000D95r 3  29 07        	and #7			; is it straddling cells?
000D97r 3  D0 03        	bne :+
000D99r 3  4C rr rr     	jmp tded1 		; no.
000D9Cr 3               :
000D9Cr 3  E6 rr        	inc bufaddr		; last cell.
000D9Er 3  D0 02        	bne :+
000DA0r 3  E6 rr        	inc bufaddr+1
000DA2r 3               :
000DA2r 3  A0 00        	ldy #0
000DA4r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000DA6r 3  C5 63        	cmp z80_b		; is this fatal?
000DA8r 3  D0 01        	bne :+
000DAAr 3  60           	rts			; yes.
000DABr 3               :
000DABr 3               tded1:
000DABr 3  A5 rr        	lda dispy		; vertical position.
000DADr 3  29 07        	and #7 			; is it straddling cells?
000DAFr 3  D0 01        	bne :+
000DB1r 3  60           	rts			; no, job done.
000DB2r 3               :
000DB2r 3  18           	clc			; point to next row.
000DB3r 3  A5 rr        	lda bufaddr
000DB5r 3  65 64        	adc z80_e
000DB7r 3  85 rr        	sta bufaddr
000DB9r 3  90 02        	bcc :+
000DBBr 3  E6 rr        	inc bufaddr+1
000DBDr 3               :
000DBDr 3  A0 00        	ldy #0
000DBFr 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000DC1r 3  C5 63        	cmp z80_b		; is this fatal?
000DC3r 3  D0 01        	bne :+
000DC5r 3  60           	rts			; yes.
000DC6r 3               :
000DC6r 3  E6 rr        	inc bufaddr		; next cell.
000DC8r 3  D0 02        	bne :+
000DCAr 3  E6 rr        	inc bufaddr+1
000DCCr 3               :
000DCCr 3  A0 00        	ldy #0
000DCEr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000DD0r 3  C5 63        	cmp z80_b		; is this fatal?
000DD2r 3  D0 01        	bne :+
000DD4r 3  60           	rts			; yes.
000DD5r 3               :
000DD5r 3  A5 62        	lda z80_c		; horizontal position.
000DD7r 3  29 07        	and #7			; is it straddling cells?
000DD9r 3  D0 01        	bne :+
000DDBr 3  60           	rts			; no.
000DDCr 3               :
000DDCr 3  E6 rr        	inc bufaddr		; last cell.
000DDEr 3  D0 02        	bne :+
000DE0r 3  E6 rr        	inc bufaddr+1
000DE2r 3               :
000DE2r 3  A0 00        	ldy #0
000DE4r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000DE6r 3  60           	rts 			; return with final type in accumulator.
000DE7r 3               
000DE7r 3               ;---------------------------------------------------
000DE7r 3               ; Fetch block type at (dispx, dispy).
000DE7r 3               ;
000DE7r 3               ; Output:
000DE7r 3               ;  A = block type
000DE7r 3               ;---------------------------------------------------
000DE7r 3               
000DE7r 3               tstbl:
000DE7r 3  A5 rr        	lda dispy 		; fetch y coord.
000DE9r 3  4A           	lsr a			; bufaddr = y/8
000DEAr 3  4A           	lsr a
000DEBr 3  4A           	lsr a
000DECr 3  85 rr        	sta chary
000DEEr 3               
000DEEr 3  85 rr        	sta bufaddr
000DF0r 3  A9 00        	lda #0
000DF2r 3  85 rr        	sta bufaddr+1
000DF4r 3               
000DF4r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000DF6r 3  26 rr        	rol bufaddr+1
000DF8r 3  06 rr        	asl bufaddr
000DFAr 3  26 rr        	rol bufaddr+1
000DFCr 3  06 rr        	asl bufaddr
000DFEr 3  26 rr        	rol bufaddr+1
000E00r 3  06 rr        	asl bufaddr
000E02r 3  26 rr        	rol bufaddr+1
000E04r 3  06 rr        	asl bufaddr
000E06r 3  26 rr        	rol bufaddr+1
000E08r 3               
000E08r 3  A5 rr        	lda dispx		; x/8
000E0Ar 3  4A           	lsr a
000E0Br 3  4A           	lsr a
000E0Cr 3  4A           	lsr a
000E0Dr 3  85 rr        	sta charx
000E0Fr 3               
000E0Fr 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000E10r 3  65 rr        	adc bufaddr
000E12r 3  69 00        	adc #<MAP
000E14r 3  85 rr        	sta bufaddr
000E16r 3  A5 rr        	lda bufaddr+1
000E18r 3  69 04        	adc #>MAP
000E1Ar 3  85 rr        	sta bufaddr+1
000E1Cr 3               
000E1Cr 3  A0 00        	ldy #0
000E1Er 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000E20r 3  60           	rts
000E21r 3               
000E21r 3               
000E21r 3               ;-------------------------------------------------------------------
000E21r 3               ; Jump - if we can.
000E21r 3               ; Requires initial speed to be set up in accumulator prior to call.
000E21r 3               ;
000E21r 3               ; Input:
000E21r 3               ;  IX = sprite address
000E21r 3               ;-------------------------------------------------------------------
000E21r 3               
000E21r 3  49 FF        jump: 	eor #$ff	; jump   neg                 ; switch sign so we jump up.
000E23r 3  18           	clc
000E24r 3  69 01        	adc #1
000E26r 3  85 62        	sta z80_c	;        ld c,a              ; store in c register.
000E28r 3  A0 0D        jump0:	ldy #13		; jump0  ld a,(ix+13)        ; jumping flag.
000E2Ar 3  B1 68        	lda (z80_ix),y
000E2Cr 3               			;        and a               ; is it set?
000E2Cr 3  F0 01        	beq :+
000E2Er 3  60           	rts		;        ret nz              ; already in the air.
000E2Fr 3               :
000E2Fr 3  18           	clc
000E30r 3  69 01        	adc #1		;        inc (ix+13)         ; set it.
000E32r 3  91 68        	sta (z80_ix),y
000E34r 3  A5 62        	lda z80_c	;        ld (ix+14),c        ; set jump height.
000E36r 3  C8           	iny
000E37r 3  91 68        	sta (z80_ix),y
000E39r 3  60           	rts		;        ret
000E3Ar 3               
000E3Ar 3  A0 0D        hop:	ldy #13		; hop    ld a,(ix+13)        ; jumping flag.
000E3Cr 3  B1 68        	lda (z80_ix),y
000E3Er 3               			;        and a               ; is it set?
000E3Er 3  F0 01        	beq :+
000E40r 3  60           	rts		;        ret nz              ; already in the air.
000E41r 3  A9 FF        :	lda #255	;        ld (ix+13),255      ; set it.
000E43r 3  91 68        	sta (z80_ix),y
000E45r 3  A9 00        	lda #0
000E47r 3  C8           	iny		;        ld (ix+14),0        ; set jump table displacement.
000E48r 3  91 68        	sta (z80_ix),y
000E4Ar 3  60           	rts		;        ret
000E4Br 3               
000E4Br 3               ;------------------------------------------------
000E4Br 3               ; Random numbers code.
000E4Br 3               ; Pseudo-random number generator, 8-bit.
000E4Br 3               ;
000E4Br 3               ; Output:
000E4Br 3               ;  RND = random number
000E4Br 3               ;------------------------------------------------
000E4Br 3               
000E4Br 3               random:
000E4Br 3  A5 rr        	lda seed
000E4Dr 3  F0 05        	beq doEor
000E4Fr 3  0A           	asl a
000E50r 3  F0 04        	beq noEor
000E52r 3  90 02        	bcc noEor
000E54r 3  49 1D        doEor:	eor #$1d
000E56r 3  85 rr        noEor:	sta seed
000E58r 3  60           	rts
000E59r 3               
000E59r 3  A5 rr        	lda seed		; get last random number.
000E5Br 3  0A           	asl a
000E5Cr 3  0A           	asl a
000E5Dr 3  18           	clc
000E5Er 3  65 rr        	adc seed
000E60r 3  18           	clc
000E61r 3  69 45        	adc #$45
000E63r 3  85 rr        	sta seed		; store new seed.
000E65r 3  85 rr        	sta varrnd		; return number in variable.
000E67r 3  60           	rts
000E68r 3               
000E68r 3               ;--------------------------------------------------------
000E68r 3               ; Keys
000E68r 3               ;
000E68r 3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000E68r 3               ;             ||||||||
000E68r 3               ;             |||||||+> Right    KEY 0  - X
000E68r 3               ;             ||||||+-> Left     KEY 1  - Z
000E68r 3               ;             |||||+--> Down     KEY 2  - .
000E68r 3               ;             ||||+---> Up       KEY 3  - ;
000E68r 3               ;             |||+----> Fire1    KEY 4  - SPC
000E68r 3               ;             ||+-----> Fire2    KEY 5  - Q
000E68r 3               ;             |+------> Fire3    KEY 6  - P
000E68r 3               ;             +-------> Not used
000E68r 3               ;
000E68r 3               ;                       Option1  KEY 7  - 1
000E68r 3               ;                       Option2  KEY 8  - 2
000E68r 3               ;                       Option3  KEY 9  - 3
000E68r 3               ;                       Option4  KEY 10 - 4
000E68r 3               ;--------------------------------------------------------
000E68r 3               
000E68r 3               ;              X   Z   .   ;  SPC  Q   P
000E68r 3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000E68r 3               ;        .byte $21,$11,$01,$92                   ; menu options.
000E68r 3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000E6Cr 3  00 04 14     
000E6Fr 3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000E73r 3               
000E73r 3               ;--------------------------------------------------------
000E73r 3               ; Keyboard test routine.
000E73r 3               ;
000E73r 3               ; Input:
000E73r 3               ;  A = key to read, high nibble=row and low nibble=col
000E73r 3               ;
000E73r 3               ; Output:
000E73r 3               ;  carry clr = key pressed
000E73r 3               ;  carry set = key not pressed
000E73r 3               ;--------------------------------------------------------
000E73r 3               
000E73r 3               ktest:
000E73r 3  85 61        	sta z80_a		; save key
000E75r 3               
000E75r 3  4A           	lsr a			; set row
000E76r 3  4A           	lsr a
000E77r 3  4A           	lsr a
000E78r 3  4A           	lsr a
000E79r 3  09 F0        	ora #ScrMode		; don't flip screenmode
000E7Br 3  8D 00 B0     	sta KeyRowAddr
000E7Er 3               
000E7Er 3  A5 61        	lda z80_a
000E80r 3  29 0F        	and #$0f
000E82r 3  AA           	tax
000E83r 3  AD 01 B0     	lda KeyColAddr		; read column
000E86r 3               
000E86r 3  3D rr rr     	and keymask,x		; check key pressed
000E89r 3  F0 02        	beq pressed
000E8Br 3  38           	sec			; key not pressed
000E8Cr 3  60           	rts
000E8Dr 3               pressed:
000E8Dr 3  18           	clc			; key pressed
000E8Er 3  60           	rts
000E8Fr 3               
000E8Fr 3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000E93r 3  10 20        
000E95r 3               
000E95r 3               ;-------------------------------------------------------
000E95r 3               ; Joystick and keyboard reading routines.
000E95r 3               ;
000E95r 3               ; contrl = 0, Keyboard
000E95r 3               ;          1, JoyKeyb
000E95r 3               ;          2, JoyMMC
000E95r 3               ;-------------------------------------------------------
000E95r 3               
000E95r 3               joykey:
000E95r 3  A5 rr        	lda contrl 		; control flag.
000E97r 3  C9 01        	cmp #1
000E99r 3  D0 03        	bne :+
000E9Br 3  4C rr rr     	jmp joyjoy 		; read keyboard joystick
000E9Er 3               :
000E9Er 3  C9 02        	cmp #2
000EA0r 3  D0 03        	bne :+
000EA2r 3  4C rr rr     	jmp joysin 		; read MMC joystick.
000EA5r 3               :
000EA5r 3               ; Keyboard controls.
000EA5r 3               
000EA5r 3  A9 00        	lda #0		 	; zero reading.
000EA7r 3  85 64        	sta z80_e
000EA9r 3               
000EA9r 3  A0 06        	ldy #6	 		; address of last key.
000EABr 3               joyke0:
000EABr 3  B9 rr rr     	lda keys,y 		; get key from table.
000EAEr 3  20 rr rr     	jsr ktest		; being pressed?
000EB1r 3  26 64        	rol z80_e 		; rotate into reading.
000EB3r 3               
000EB3r 3  88           	dey		 	; next key.
000EB4r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000EB6r 3  4C rr rr     	jmp joyjo1 		; store the value.
000EB9r 3               
000EB9r 3               ; Keyboard joystick controls.
000EB9r 3               
000EB9r 3               joyjoy:
000EB9r 3  A9 00        	lda #0		 	; zero reading.
000EBBr 3  85 64        	sta z80_e
000EBDr 3               
000EBDr 3  A0 06        	ldy #6	 		; address of last key.
000EBFr 3               joyjo3:
000EBFr 3  B9 rr rr     	lda jkeys,y 		; get key from table.
000EC2r 3  20 rr rr     	jsr ktest		; being pressed?
000EC5r 3  26 64        	rol z80_e 		; rotate into reading.
000EC7r 3               
000EC7r 3  88           	dey		 	; next key.
000EC8r 3  10 F5        	bpl joyjo3 		; repeat for all keys.
000ECAr 3               joyjo1:
000ECAr 3  A5 64        	lda z80_e 		; copy e register to accumulator.
000ECCr 3               joyjo2:
000ECCr 3  85 rr        	sta joyval		; remember value.
000ECEr 3  60           	rts
000ECFr 3               
000ECFr 3               
000ECFr 3               ; AtoMMC joystick controls.
000ECFr 3               
000ECFr 3               ; Set PORTB direction
000ECFr 3               
000ECFr 3               joyinit:
000ECFr 3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000ED1r 3  8D 01 B4     	sta DatReg
000ED4r 3  20 rr rr     	jsr interwritedelay
000ED7r 3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000ED9r 3  8D 00 B4     	sta CmdReg
000EDCr 3               
000EDCr 3               wait_until_not_busy:
000EDCr 3  AD 00 B4     	lda CmdReg
000EDFr 3  30 FB        	bmi wait_until_not_busy
000EE1r 3  60           	rts
000EE2r 3               
000EE2r 3               ; Get PORTB value
000EE2r 3               
000EE2r 3               joysin:
000EE2r 3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000EE4r 3  8D 00 B4     	sta CmdReg
000EE7r 3  20 rr rr     	jsr interwritedelay
000EEAr 3               
000EEAr 3  AD 01 B4     	lda DatReg		; Read joystick status
000EEDr 3  29 7F        	and #$7f
000EEFr 3  85 rr        	sta joyval
000EF1r 3               
000EF1r 3  AD rr rr     	lda keys+5		; check fire2
000EF4r 3  20 rr rr     	jsr ktest
000EF7r 3  B0 06        	bcs :+
000EF9r 3  A5 rr        	lda joyval
000EFBr 3  29 DF        	and #$df
000EFDr 3  85 rr        	sta joyval
000EFFr 3               :
000EFFr 3  AD rr rr     	lda keys+6		; check fire3
000F02r 3  20 rr rr     	jsr ktest
000F05r 3  B0 06        	bcs :+
000F07r 3  A5 rr        	lda joyval
000F09r 3  29 BF        	and #$bf
000F0Br 3  85 rr        	sta joyval
000F0Dr 3               :
000F0Dr 3  60           	rts
000F0Er 3               
000F0Er 3               ; Short delay
000F0Er 3               ; Enough to intersperse 2 writes to the FATPIC.
000F0Er 3               
000F0Er 3               interwritedelay:
000F0Er 3  A9 08        	lda  #8
000F10r 3  38           	sec
000F11r 3               loop:
000F11r 3  E9 01        	sbc  #1
000F13r 3  D0 FC        	bne  loop
000F15r 3  60           	rts
000F16r 3               
000F16r 3               ;tmp_byte:   .byte 0
000F16r 3               
000F16r 3               ;---------------------------------------------------------------
000F16r 3               ; Getkey in column,row format
000F16r 3               ;
000F16r 3               ; Output:
000F16r 3               ;  A = high nibble=row and low nibble=column key in matrix
000F16r 3               ;---------------------------------------------------------------
000F16r 3               
000F16r 3               kget:
000F16r 3  A9 F0        	lda #ScrMode		; high-mono mode.
000F18r 3  8D 00 B0     	sta ScrSelAddr		; screen select port
000F1Br 3  86 rr        	stx xtmp
000F1Dr 3               kget4:
000F1Dr 3  20 71 FE     	jsr READKEY		; read key until pressed
000F20r 3  C0 FF        	cpy #255
000F22r 3  F0 F9        	beq kget4
000F24r 3  85 rr        	sta rcol		; save column
000F26r 3  86 rr        	stx rrow		; determine row
000F28r 3               kget3:
000F28r 3  20 71 FE     	jsr READKEY		; wait until key released
000F2Br 3  C0 FF        	cpy #255
000F2Dr 3  D0 F9        	bne kget3
000F2Fr 3               
000F2Fr 3  38           	sec			; calculate matrix row
000F30r 3  A9 0A        	lda #10
000F32r 3  E5 rr        	sbc rrow
000F34r 3  0A           	asl a
000F35r 3  0A           	asl a
000F36r 3  0A           	asl a
000F37r 3  0A           	asl a
000F38r 3  85 rr        	sta rrow
000F3Ar 3               
000F3Ar 3  A0 FF        	ldy #255		; find column mask
000F3Cr 3               kget1:
000F3Cr 3  C8           	iny
000F3Dr 3  B9 rr rr     	lda keymask,y
000F40r 3  C5 rr        	cmp rcol
000F42r 3  F0 03        	beq kget2
000F44r 3  4C rr rr     	jmp kget1
000F47r 3               kget2:
000F47r 3  98           	tya			; determine column
000F48r 3  18           	clc
000F49r 3  65 rr        	adc rrow
000F4Br 3  A6 rr        	ldx xtmp
000F4Dr 3  60           	rts
000F4Er 3               
000F4Er 3               ;---------------------------------------------------------------
000F4Er 3               ; Display message.
000F4Er 3               ;
000F4Er 3               ; Input:
000F4Er 3               ;  A = message number
000F4Er 3               ;---------------------------------------------------------------
000F4Er 3               
000F4Er 3               dmsg:
000F4Er 3  AA           	tax
000F4Fr 3  A9 rr        	lda #<msgdat		; pointer to messages.
000F51r 3  85 66        	sta z80_l
000F53r 3  A9 rr        	lda #>msgdat
000F55r 3  85 67        	sta z80_h
000F57r 3  20 rr rr     	jsr getwrd		; get message number.
000F5Ar 3               dmsg3:
000F5Ar 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000F5Dr 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000F60r 3               .if bigflag
000F60r 3               	lda prtmod		; print mode.
000F60r 3               	bne bmsg1		; no, double-height text.
000F60r 3               .endif
000F60r 3               dmsg0:
000F60r 3  A5 67        	lda z80_h		; store string pointer.
000F62r 3  48           	pha
000F63r 3  A5 66        	lda z80_l
000F65r 3  48           	pha
000F66r 3               
000F66r 3  A0 00        	ldy #0
000F68r 3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000F6Ar 3  29 7F        	and #127		; remove any end marker.
000F6Cr 3  C9 0D        	cmp #13
000F6Er 3  F0 24        	beq dmsg1
000F70r 3  20 rr rr     	jsr pchar		; display character.
000F73r 3  20 rr rr     	jsr nexpos 		; display position.
000F76r 3  D0 03        	bne dmsg2		; not on a new line.
000F78r 3  20 rr rr     	jsr nexlin		; next line down.
000F7Br 3               dmsg2:
000F7Br 3  68           	pla			; retrieve string pointer
000F7Cr 3  85 66        	sta z80_l
000F7Er 3  68           	pla
000F7Fr 3  85 67        	sta z80_h
000F81r 3               
000F81r 3  A0 00        	ldy #0
000F83r 3  B1 66        	lda (z80_hl),y		; fetch last character.
000F85r 3  0A           	asl a  			; was it the end?
000F86r 3  90 03        	bcc :+
000F88r 3  4C rr rr     	jmp dscor2		; yes, job done.
000F8Br 3               :
000F8Br 3  E6 66        	inc z80_l		; next character to display.
000F8Dr 3  D0 02        	bne :+
000F8Fr 3  E6 67        	inc z80_h
000F91r 3               :
000F91r 3  4C rr rr     	jmp dmsg0
000F94r 3               dmsg1:
000F94r 3  E6 rr        	inc dispy
000F96r 3  A5 rr        	lda dispy
000F98r 3  C9 18        	cmp #24
000F9Ar 3  90 04        	bcc dmsg4
000F9Cr 3  A9 00        	lda #0
000F9Er 3  85 rr        	sta dispy
000FA0r 3               dmsg4:
000FA0r 3  A9 00        	lda #0
000FA2r 3  85 rr        	sta dispx
000FA4r 3  4C rr rr     	jmp dmsg2
000FA7r 3               
000FA7r 3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000FA7r 3               
000FA7r 3               ;----------------------------------------------------------
000FA7r 3               ; Display message in big text.
000FA7r 3               ;
000FA7r 3               ; Input:
000FA7r 3               ;  HL = string pointer
000FA7r 3               ;----------------------------------------------------------
000FA7r 3               
000FA7r 3               .if bigflag
000FA7r 3               bmsg1:
000FA7r 3               	ldy #0
000FA7r 3               	lda (z80_hl),y 		; get character to display.
000FA7r 3               	and #127		; only want 7 bits.
000FA7r 3               	cmp #13
000FA7r 3               	beq bmsg2
000FA7r 3               	jsr bchar 		; display big char.
000FA7r 3               bmsg3:
000FA7r 3               	ldy #0
000FA7r 3               	lda (z80_hl),y 		; look at last character.
000FA7r 3               	pha
000FA7r 3               	inc z80_l 		; next character in list.
000FA7r 3               	bne :+
000FA7r 3               	inc z80_h
000FA7r 3               :
000FA7r 3               	pla
000FA7r 3               	asl a  			; was terminator flag set?
000FA7r 3               	bcc bmsg1		; no, keep going.
000FA7r 3               	rts
000FA7r 3               bmsg2:
000FA7r 3               	lda #0
000FA7r 3               	sta dispx
000FA7r 3               	inc dispy
000FA7r 3               	inc dispy
000FA7r 3               	lda dispy
000FA7r 3               	cmp #23
000FA7r 3               	bcc bmsg3
000FA7r 3               	lda #0
000FA7r 3               	sta dispy
000FA7r 3               	jmp bmsg3
000FA7r 3               .endif
000FA7r 3               
000FA7r 3               ;----------------------------------------------------------
000FA7r 3               ; Big character display.
000FA7r 3               ;
000FA7r 3               ; Input:
000FA7r 3               ;  A = character
000FA7r 3               ;----------------------------------------------------------
000FA7r 3               
000FA7r 3               .if bigflag
000FA7r 3               bchar:
000FA7r 3               	sta z80_e		; save char in lb
000FA7r 3               	lda #0
000FA7r 3               	sta z80_d		; reset hb
000FA7r 3               
000FA7r 3               	asl z80_e 		; multiply char by 8.
000FA7r 3               	rol z80_d
000FA7r 3               	asl z80_e
000FA7r 3               	rol z80_d
000FA7r 3               	asl z80_e
000FA7r 3               	rol z80_d		; de = a*8
000FA7r 3               
000FA7r 3               	clc			; de = fontpointer + a*8
000FA7r 3               	lda z80_e
000FA7r 3               	adc #<(font-256) 		; address of font.
000FA7r 3               	sta z80_e
000FA7r 3               	lda z80_d
000FA7r 3               	adc #>(font-256)
000FA7r 3               	sta z80_d
000FA7r 3               
000FA7r 3               	jsr gprad 		; get screen address.
000FA7r 3               
000FA7r 3               	ldx #0			; height of character in font.
000FA7r 3               bchar0:
000FA7r 3               	ldy #0
000FA7r 3               	lda (z80_de),y 		; get a bit of the font.
000FA7r 3               
000FA7r 3               .if gflag
000FA7r 3               	and andeor
000FA7r 3               	eor andeor+1
000FA7r 3               .endif
000FA7r 3               .if iflag
000FA7r 3               	eor #$ff
000FA7r 3               .endif
000FA7r 3               
000FA7r 3               	sta (scraddr),y
000FA7r 3               	pha
000FA7r 3               	jsr nline 		; next line down.
000FA7r 3               	pla
000FA7r 3               	sta (scraddr),y
000FA7r 3               	jsr nline 		; next line down.
000FA7r 3               
000FA7r 3               	clc
000FA7r 3               	inc z80_e 		; next line of font.
000FA7r 3               	bne :+
000FA7r 3               	inc z80_d
000FA7r 3               :
000FA7r 3               	inx
000FA7r 3               	cpx #8
000FA7r 3               	bne bchar0
000FA7r 3               
000FA7r 3               	jsr nexpos		; display position.
000FA7r 3               	bne bchar2 		; not on a new line.
000FA7r 3               .endif
000FA7r 3               bchar3:
000FA7r 3  E6 rr        	inc dispy
000FA9r 3  20 rr rr     	jsr nexlin 		; next line check.
000FACr 3               bchar2:
000FACr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000FAFr 3               
000FAFr 3               ;-------------------------------------------------
000FAFr 3               ; Display a character.
000FAFr 3               ;
000FAFr 3               ; Input:
000FAFr 3               ;  A = character
000FAFr 3               ;-------------------------------------------------
000FAFr 3               
000FAFr 3               achar:
000FAFr 3  85 63        	sta z80_b 		; copy to b.
000FB1r 3  20 rr rr     	jsr preprt 		; get ready to print.
000FB4r 3  A5 63        	lda z80_b		; character in accumulator.
000FB6r 3               .if bigflag
000FB6r 3               	ldx prtmod 		; print mode.
000FB6r 3               	beq :+
000FB6r 3               	jmp bchar 		; no, double-height text.
000FB6r 3               :
000FB6r 3               .endif
000FB6r 3  20 rr rr     	jsr pchar 		; display character.
000FB9r 3  20 rr rr     	jsr nexpos 		; display position.
000FBCr 3  F0 E9        	beq bchar3		; next line down.
000FBEr 3  4C rr rr     	jmp bchar2 		; tidy up.
000FC1r 3               
000FC1r 3               
000FC1r 3               ;--------------------------------------------------------
000FC1r 3               ; Pre-print preliminaries.
000FC1r 3               ;--------------------------------------------------------
000FC1r 3               
000FC1r 3               preprt:
000FC1r 3  A9 rr        	lda #<(font-256)	; font pointer.
000FC3r 3  8D rr rr     	sta grbase		; set up graphics base.
000FC6r 3  A9 rr        	lda #>(font-256)
000FC8r 3  8D rr rr     	sta grbase+1
000FCBr 3               prescr:
000FCBr 3  A5 rr        	lda charx 		; display coordinates.
000FCDr 3  85 rr        	sta dispx		; set up general coordinates.
000FCFr 3  A5 rr        	lda chary
000FD1r 3  85 rr        	sta dispy
000FD3r 3  60           	rts
000FD4r 3               
000FD4r 3               ;-----------------------------------------
000FD4r 3               ; Calculate old sprite address
000FD4r 3               ;
000FD4r 3               ; Input:
000FD4r 3               ;  IX = sprite address
000FD4r 3               ;
000FD4r 3               ; Output:
000FD4r 3               ;  B  = right byte mask
000FD4r 3               ;  C  = left byte mask
000FD4r 3               ;  DE = spriteframe address
000FD4r 3               ;  scraddr = screenaddress(dispx,dispy)
000FD4r 3               ;-----------------------------------------
000FD4r 3               
000FD4r 3               gsprad:
000FD4r 3  A0 03        	ldy #3
000FD6r 3  B1 68        	lda (z80_ix),y		; y coordinate.
000FD8r 3  85 rr        	sta dispy
000FDAr 3  A0 04        	ldy #4
000FDCr 3  B1 68        	lda (z80_ix),y		; x coordinate.
000FDEr 3  85 rr        	sta dispx
000FE0r 3  A0 01        	ldy #1
000FE2r 3  B1 68        	lda (z80_ix),y 		; sprite image.
000FE4r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000FE7r 3               
000FE7r 3  A0 00        	ldy #0
000FE9r 3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
000FEBr 3  A0 02        	ldy #2
000FEDr 3  18           	clc
000FEEr 3  71 68        	adc (z80_ix),y 		; add frame number.
000FF0r 3               gspra0:
000FF0r 3               .if rflag
000FF0r 3               	sta z80_e		; multiply by 32.
000FF0r 3               	lda #0
000FF0r 3               	sta z80_d
000FF0r 3               
000FF0r 3               	asl z80_e
000FF0r 3               	rol z80_d
000FF0r 3               	asl z80_e
000FF0r 3               	rol z80_d
000FF0r 3               	asl z80_e
000FF0r 3               	rol z80_d
000FF0r 3               	asl z80_e
000FF0r 3               	rol z80_d
000FF0r 3               .if bflag
000FF0r 3               	lda z80_e		; multiply by 48
000FF0r 3               	sta tmp1
000FF0r 3               	lda z80_d
000FF0r 3               	sta tmp2
000FF0r 3               .endif
000FF0r 3               	asl z80_e
000FF0r 3               	rol z80_d
000FF0r 3               .if bflag
000FF0r 3               	clc
000FF0r 3               	lda z80_e
000FF0r 3               	adc tmp1
000FF0r 3               	sta z80_e
000FF0r 3               	lda z80_d
000FF0r 3               	adc tmp2
000FF0r 3               	sta z80_d
000FF0r 3               .endif
000FF0r 3               .else
000FF0r 3  4A           	lsr a	  		; multiply by 128.
000FF1r 3  85 65        	sta z80_d 		; store in d.
000FF3r 3  8D rr rr     	sta tmp1
000FF6r 3  A9 00        	lda #0
000FF8r 3  6A           	ror a
000FF9r 3  85 64        	sta z80_e 		; got low byte.
000FFBr 3  8D rr rr     	sta tmp2
000FFEr 3               .if bflag
000FFEr 3               	lsr tmp1
000FFEr 3               	ror tmp2
000FFEr 3               	clc
000FFEr 3               	lda tmp2
000FFEr 3               	adc z80_e
000FFEr 3               	sta z80_e
000FFEr 3               	lda tmp1
000FFEr 3               	adc z80_d
000FFEr 3               	sta z80_d
000FFEr 3               .endif
000FFEr 3               .endif
000FFEr 3  18           	clc 			; address of play sprites.
000FFFr 3  A5 64        	lda z80_e
001001r 3  69 rr        	adc #<sprgfx
001003r 3  85 64        	sta z80_e
001005r 3  A5 65        	lda z80_d
001007r 3  69 rr        	adc #>sprgfx
001009r 3  85 65        	sta z80_d
00100Br 3               
00100Br 3  A5 rr        	lda dispx 		; y coordinate.
00100Dr 3  29 06        	and #6 			; position within byte boundary.
00100Fr 3  AA           	tax	 		; low byte of table displacement.
001010r 3               
001010r 3               .if rflag
001010r 3               	stx sprshft
001010r 3               .else
001010r 3  0A           	asl a	  		; multiply by 32.
001011r 3  0A           	asl a  			; already a multiple
001012r 3  0A           	asl a  			; of 2, so just 4
001013r 3               .if bflag
001013r 3               	sta tmp1
001013r 3               	asl a  			; shifts needed.
001013r 3               	clc
001013r 3               	adc tmp1
001013r 3               .else
001013r 3  0A           	asl a  			; shifts needed.
001014r 3               .endif
001014r 3  18           	clc 			; add to sprite address.
001015r 3  65 64        	adc z80_e
001017r 3  85 64        	sta z80_e
001019r 3  90 02        	bcc :+
00101Br 3  E6 65        	inc z80_d
00101Dr 3               :
00101Dr 3               .endif
00101Dr 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
001020r 3  85 62        	sta z80_c 		; left mask.
001022r 3  BD rr rr     	lda spmask+1,x
001025r 3  85 63        	sta z80_b 		; right mask.
001027r 3               
001027r 3               ;------------------------------------------------------------------
001027r 3               ; Drop into screen address routine.
001027r 3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001027r 3               ;------------------------------------------------------------------
001027r 3               
001027r 3               scadd:
001027r 3  A6 rr        	ldx dispy
001029r 3  E0 C0        	cpx #192
00102Br 3  90 02        	bcc :+
00102Dr 3  A2 C0        	ldx #192
00102Fr 3               :
00102Fr 3  A5 rr        	lda dispx
001031r 3  4A           	lsr a
001032r 3  4A           	lsr a
001033r 3  4A           	lsr a
001034r 3  18           	clc
001035r 3  7D 00 07     	adc SCROFF_lb,x
001038r 3  85 rr        	sta scraddr
00103Ar 3  BD 18 07     	lda SCROFF_hb,x
00103Dr 3  85 rr        	sta scraddr+1
00103Fr 3  60           	rts
001040r 3               
001040r 3  FF 00        spmask:	.byte $ff,$00
001042r 3  3F C0        	.byte $3f,$c0
001044r 3  0F F0        	.byte $0f,$f0
001046r 3  03 FC        	.byte $03,$fc
001048r 3               
001048r 3  00           tmp1:	.byte 0
001049r 3  00           tmp2:	.byte 0
00104Ar 3               
00104Ar 3               ;-----------------------------------------------------------------
00104Ar 3               ; These are the sprite routines.
00104Ar 3               ; sspria = single sprite, old (ix).
00104Ar 3               ; ssprib = single sprite, new (ix+5).
00104Ar 3               ; sspric = both sprites, old (ix) and new (ix+5).
00104Ar 3               ;-----------------------------------------------------------------
00104Ar 3               
00104Ar 3               sspria:
00104Ar 3  20 rr rr     	jsr gsprad		; get old sprite address.
00104Dr 3               sspri2:
00104Dr 3               .if rflag
00104Dr 3               	lda z80_e				; 3c
00104Dr 3               	sta dline_spraddr1+1	; 4c
00104Dr 3               	sta dline_spraddr2+1	; 4c
00104Dr 3               	lda z80_d				; 3c
00104Dr 3               	sta dline_spraddr1+2	; 4c
00104Dr 3               	sta dline_spraddr2+2	; 4c
00104Dr 3               
00104Dr 3               	ldx sprshft
00104Dr 3               	lda shift_table,x
00104Dr 3               	sta dline_shift1+1
00104Dr 3               	sta dline_shift2+1
00104Dr 3               	lda shift_table+1,x
00104Dr 3               	sta dline_shift1+2
00104Dr 3               	sta dline_shift2+2
00104Dr 3               .else
00104Dr 3  A5 64        	lda z80_e
00104Fr 3  8D rr rr     	sta dline1+1		; Set spritedata address
001052r 3  8D rr rr     	sta dline2+1
001055r 3  A5 65        	lda z80_d
001057r 3  8D rr rr     	sta dline1+2
00105Ar 3  8D rr rr     	sta dline2+2
00105Dr 3               .endif
00105Dr 3  86 rr        	stx xtmp
00105Fr 3  A2 00        	ldx #0			; vertical lines.
001061r 3               sspri0:
001061r 3  20 rr rr     	jsr dline		; draw a line.
001064r 3  E0 10        	cpx #16			; detect block boundery
001066r 3  D0 02        	bne :+			; skip if not
001068r 3  E6 rr        	inc scraddr+1		; jump to next blockline
00106Ar 3               :
00106Ar 3  E0 20        	cpx #32			; check finished
00106Cr 3               .if bflag
00106Cr 3               	bne :+			; skip if not
00106Cr 3               	inc scraddr+1		; jump to next blockline
00106Cr 3               	inc z80_hlp+1		; jump to next blockline
00106Cr 3               :
00106Cr 3               	cpx #48			; check finished
00106Cr 3               .endif
00106Cr 3  D0 F3        	bne sspri0		; no, repeat
00106Er 3  A6 rr        	ldx xtmp
001070r 3  60           	rts
001071r 3               
001071r 3               ;-----------------------------------------------------------------
001071r 3               
001071r 3               ssprib:
001071r 3  20 rr rr     	jsr gspran 		; get new sprite address.
001074r 3  4C rr rr     	jmp sspri2
001077r 3               
001077r 3               ;-----------------------------------------------------------------
001077r 3               
001077r 3               sspric:
001077r 3               .if rflag
001077r 3               	jsr gsprad 		; get old sprite address.
001077r 3               
001077r 3               	lda z80_e				; 3c
001077r 3               	sta ddline_spraddr1+1	; 4c
001077r 3               	sta ddline_spraddr2+1	; 4c
001077r 3               
001077r 3               	lda z80_d				; 3c
001077r 3               	sta ddline_spraddr1+2	; 4c
001077r 3               	sta ddline_spraddr2+2	; 4c
001077r 3               
001077r 3               	ldx sprshft
001077r 3               	lda shift_table,x
001077r 3               	sta ddline_shift1+1
001077r 3               	sta ddline_shift2+1
001077r 3               	lda shift_table+1,x
001077r 3               	sta ddline_shift1+2
001077r 3               	sta ddline_shift2+2
001077r 3               
001077r 3               	jsr exx  		; store addresses.
001077r 3               	jsr gspran 		; get new sprite addresses.
001077r 3               
001077r 3               	lda z80_e				; 3c
001077r 3               	sta dline_spraddr1+1	; 4c
001077r 3               	sta dline_spraddr2+1	; 4c
001077r 3               
001077r 3               	lda z80_d				; 3c
001077r 3               	sta dline_spraddr1+2	; 4c
001077r 3               	sta dline_spraddr2+2	; 4c
001077r 3               
001077r 3               	ldx sprshft
001077r 3               	lda shift_table,x
001077r 3               	sta dline_shift1+1
001077r 3               	sta dline_shift2+1
001077r 3               	lda shift_table+1,x
001077r 3               	sta dline_shift1+2
001077r 3               	sta dline_shift2+2
001077r 3               .else
001077r 3  20 rr rr     	jsr gsprad 		; get old sprite address.
00107Ar 3  A5 64        	lda z80_e
00107Cr 3  8D rr rr     	sta ddline1+1		; Set spritedata address
00107Fr 3  8D rr rr     	sta ddline2+1
001082r 3  A5 65        	lda z80_d
001084r 3  8D rr rr     	sta ddline1+2
001087r 3  8D rr rr     	sta ddline2+2
00108Ar 3  20 rr rr     	jsr exx  		; store addresses.
00108Dr 3               
00108Dr 3  20 rr rr     	jsr gspran 		; get new sprite addresses.
001090r 3  A5 64        	lda z80_e
001092r 3  8D rr rr     	sta dline1+1		; Set spritedata address
001095r 3  8D rr rr     	sta dline2+1
001098r 3  A5 65        	lda z80_d
00109Ar 3  8D rr rr     	sta dline1+2
00109Dr 3  8D rr rr     	sta dline2+2
0010A0r 3               .endif
0010A0r 3  86 rr        	stx xtmp
0010A2r 3  A2 00        	ldx #0			; vertical lines.
0010A4r 3               lloop:
0010A4r 3  20 rr rr     	jsr dline 		; draw a line.
0010A7r 3  CA           	dex
0010A8r 3  CA           	dex
0010A9r 3  20 rr rr     	jsr ddline 		; delete a line.
0010ACr 3  E0 10        	cpx #16			; detect block boundery
0010AEr 3  D0 04        	bne :+			; skip if not
0010B0r 3  E6 rr        	inc scraddr+1		; jump to next blockline
0010B2r 3  E6 73        	inc z80_hlp+1		; jump to next blockline
0010B4r 3               :
0010B4r 3  E0 20        	cpx #32			; check finished
0010B6r 3               .if bflag
0010B6r 3               	bne :+			; skip if not
0010B6r 3               	inc scraddr+1		; jump to next blockline
0010B6r 3               	inc z80_hlp+1		; jump to next blockline
0010B6r 3               :
0010B6r 3               	cpx #48			; check finished
0010B6r 3               .endif
0010B6r 3  D0 EC        	bne lloop		; no, repeat
0010B8r 3  A6 rr        	ldx xtmp
0010BAr 3  60           	rts
0010BBr 3               
0010BBr 3               
0010BBr 3               ;-----------------------------------------------------------------
0010BBr 3               
0010BBr 3               
0010BBr 3               .if rflag
0010BBr 3               
0010BBr 3               ; Left screen byte
0010BBr 3               
0010BBr 3               dline:
0010BBr 3               dline_spraddr1:
0010BBr 3               	ldy objdta,x		; fetch spriteleft byte
0010BBr 3               dline_shift1:
0010BBr 3               	lda $ffff,y		; get pre-shifted byte
0010BBr 3               	sta z80_a		; save spriteleft byte
0010BBr 3               	and z80_c		; mask left
0010BBr 3               	ldy sprline,x		; point to screenbyteleft
0010BBr 3               	eor (scraddr),y		; merge with spriteleft
0010BBr 3               	sta (scraddr),y		; write screenleft
0010BBr 3               
0010BBr 3               	lda z80_a		; fetch data
0010BBr 3               	and z80_b		; mask unwanted
0010BBr 3               	sta z80_a		; store data
0010BBr 3               
0010BBr 3               ; Middle screen byte
0010BBr 3               
0010BBr 3               	inx			; next spritebyte
0010BBr 3               dline_spraddr2:
0010BBr 3               	ldy objdta,x		; fetch spriteright byte
0010BBr 3               dline_shift2:
0010BBr 3               	lda $ffff,y		; get pre-shifted byte
0010BBr 3               	sta z80_f		; save spriteright byte
0010BBr 3               	and z80_c		; mask away what's not needed.
0010BBr 3               	ora z80_a		; merge with mask
0010BBr 3               	ldy sprline,x
0010BBr 3               	eor (scraddr),y		; merge with screenmiddle
0010BBr 3               	sta (scraddr),y		; write screenmiddle
0010BBr 3               
0010BBr 3               ; Right screen byte
0010BBr 3               
0010BBr 3               	iny			; point to screenright
0010BBr 3               	lda z80_f		; get
0010BBr 3               	and z80_b		; mask right
0010BBr 3               	eor (scraddr),y		; merge with screenright
0010BBr 3               	sta (scraddr),y		; write screenright
0010BBr 3               	inx			; next spritebyte
0010BBr 3               
0010BBr 3               	rts
0010BBr 3               
0010BBr 3               ;-----------------------------------------------------------------
0010BBr 3               
0010BBr 3               ; Left screen byte
0010BBr 3               
0010BBr 3               ddline:
0010BBr 3               ddline_spraddr1:
0010BBr 3               	ldy objdta,x		; point to screenleft
0010BBr 3               ddline_shift1:
0010BBr 3               	lda $ffff,y		; fetch spriteleft byte
0010BBr 3               	sta z80_a		; save spriteright byte
0010BBr 3               	and z80_cp		; mask left
0010BBr 3               	ldy sprline,x		; point to byteleft
0010BBr 3               	eor (z80_hlp),y		; merge with screenleft
0010BBr 3               	sta (z80_hlp),y		; write screenleft
0010BBr 3               
0010BBr 3               	lda z80_a		; fetch data
0010BBr 3               	and z80_bp		; mask unwanted
0010BBr 3               	sta z80_a		; store data
0010BBr 3               
0010BBr 3               ; Middle screen byte
0010BBr 3               
0010BBr 3               	inx			; next spritebyte
0010BBr 3               ddline_spraddr2:
0010BBr 3               	ldy objdta,x
0010BBr 3               ddline_shift2:
0010BBr 3               	lda $ffff,y		; fetch spritemiddle byte
0010BBr 3               	sta z80_f		; save spriteright byte
0010BBr 3               	and z80_cp		; mask away what's not needed.
0010BBr 3               	ora z80_a		; merge with mask
0010BBr 3               	ldy sprline,x
0010BBr 3               	eor (z80_hlp),y		; merge with screenmiddle
0010BBr 3               	sta (z80_hlp),y		; write screenmiddle
0010BBr 3               
0010BBr 3               ; Right screen byte
0010BBr 3               
0010BBr 3               	iny			; point to screenright
0010BBr 3               	lda z80_f		; fetch spriteright byte
0010BBr 3               	and z80_bp		; mask right
0010BBr 3               	eor (z80_hlp),y		; merge with screenright
0010BBr 3               	sta (z80_hlp),y		; write screenright
0010BBr 3               	inx			; next spritebyte
0010BBr 3               
0010BBr 3               	rts
0010BBr 3               
0010BBr 3               sprline:
0010BBr 3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0010BBr 3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0010BBr 3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0010BBr 3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0010BBr 3               .if bflag
0010BBr 3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0010BBr 3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0010BBr 3               .endif
0010BBr 3               
0010BBr 3               .else
0010BBr 3  00 00        ddummy:	.byte 0,0
0010BDr 3               
0010BDr 3               dline:
0010BDr 3  BC rr rr     	ldy sprline,x		; point to screenleft
0010C0r 3               dline1:
0010C0r 3  BD rr rr     	lda objdta,x		; fetch spriteleft byte
0010C3r 3  85 61        	sta z80_a		; save spriteright byte
0010C5r 3               .if hflag
0010C5r 3               	sty ytmp
0010C5r 3               	clc
0010C5r 3               	tya
0010C5r 3               	adc scraddr
0010C5r 3               	sta ddummy
0010C5r 3               	lda scraddr+1
0010C5r 3               	adc #0
0010C5r 3               	sta ddummy+1
0010C5r 3               	lda ddummy
0010C5r 3               	and #31
0010C5r 3               	sta dispx
0010C5r 3               	sec
0010C5r 3               	lda ddummy+1
0010C5r 3               	sbc #>ScreenAddr
0010C5r 3               	sta dispy
0010C5r 3               	jsr pradd
0010C5r 3               	ldy #0
0010C5r 3               	lda (bufaddr),y
0010C5r 3               	cmp #HIDDEN
0010C5r 3               	beq sline
0010C5r 3               	ldy ytmp
0010C5r 3               .endif
0010C5r 3  A5 61        	lda z80_a
0010C7r 3  25 62        	and z80_c		; mask left
0010C9r 3  51 rr        	eor (scraddr),y		; merge with screenleft
0010CBr 3  91 rr        	sta (scraddr),y		; write screenleft
0010CDr 3               sline:
0010CDr 3               .if hflag
0010CDr 3               	ldy ytmp
0010CDr 3               .endif
0010CDr 3  E8           	inx			; next spritebyte
0010CEr 3  C8           	iny			; point to screenmiddle
0010CFr 3               .if hflag
0010CFr 3               	sty ytmp
0010CFr 3               	ldy #1
0010CFr 3               	lda (bufaddr),y
0010CFr 3               	cmp #HIDDEN
0010CFr 3               	beq sline2
0010CFr 3               	ldy ytmp
0010CFr 3               .endif
0010CFr 3               dline2:
0010CFr 3  BD rr rr     	lda objdta,x		; fetch spritemiddle byte
0010D2r 3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0010D4r 3  91 rr        	sta (scraddr),y		; write screenmiddle
0010D6r 3               sline2:
0010D6r 3               .if hflag
0010D6r 3               	ldy ytmp
0010D6r 3               .endif
0010D6r 3  C8           	iny			; point to screenright
0010D7r 3               .if hflag
0010D7r 3               	sty ytmp
0010D7r 3               	ldy #2
0010D7r 3               	lda (bufaddr),y
0010D7r 3               	cmp #HIDDEN
0010D7r 3               	beq sline3
0010D7r 3               	ldy ytmp
0010D7r 3               .endif
0010D7r 3  A5 61        	lda z80_a		; fetch spriteright byte
0010D9r 3  25 63        	and z80_b		; mask right
0010DBr 3  51 rr        	eor (scraddr),y		; merge with screenright
0010DDr 3  91 rr        	sta (scraddr),y		; write screenright
0010DFr 3               sline3:
0010DFr 3               .if hflag
0010DFr 3               	ldy ytmp
0010DFr 3               .endif
0010DFr 3  E8           	inx			; next spritebyte
0010E0r 3               
0010E0r 3  60           	rts
0010E1r 3               
0010E1r 3               ;-----------------------------------------------------------------
0010E1r 3               
0010E1r 3               ddline:
0010E1r 3  BC rr rr     	ldy sprline,x		; point to screenleft
0010E4r 3               ddline1:
0010E4r 3  BD rr rr     	lda objdta,x		; fetch spriteleft byte
0010E7r 3  85 61        	sta z80_a		; save spriteright byte
0010E9r 3               .if hflag
0010E9r 3               	sty ytmp
0010E9r 3               	clc
0010E9r 3               	tya
0010E9r 3               	adc z80_hlp
0010E9r 3               	sta ddummy
0010E9r 3               	lda z80_hlp+1
0010E9r 3               	adc #0
0010E9r 3               	sta ddummy+1
0010E9r 3               	lda ddummy
0010E9r 3               	and #31
0010E9r 3               	sta dispx
0010E9r 3               	sec
0010E9r 3               	lda ddummy+1
0010E9r 3               	sbc #>ScreenAddr
0010E9r 3               	sta dispy
0010E9r 3               	jsr pradd
0010E9r 3               	ldy #0
0010E9r 3               	lda (bufaddr),y
0010E9r 3               	cmp #HIDDEN
0010E9r 3               	beq dsline
0010E9r 3               	ldy ytmp
0010E9r 3               .endif
0010E9r 3  A5 61        	lda z80_a
0010EBr 3  25 6E        	and z80_cp		; mask left
0010EDr 3  51 72        	eor (z80_hlp),y		; merge with screenleft
0010EFr 3  91 72        	sta (z80_hlp),y		; write screenleft
0010F1r 3               dsline:
0010F1r 3               .if hflag
0010F1r 3               	ldy ytmp
0010F1r 3               .endif
0010F1r 3  E8           	inx			; next spritebyte
0010F2r 3  C8           	iny			; point to screenmiddle
0010F3r 3               .if hflag
0010F3r 3               	sty ytmp
0010F3r 3               	ldy #1
0010F3r 3               	lda (bufaddr),y
0010F3r 3               	cmp #HIDDEN
0010F3r 3               	beq dsline2
0010F3r 3               	ldy ytmp
0010F3r 3               .endif
0010F3r 3               ddline2:
0010F3r 3  BD rr rr     	lda objdta,x		; fetch spritemiddle byte
0010F6r 3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0010F8r 3  91 72        	sta (z80_hlp),y		; write screenmiddle
0010FAr 3               dsline2:
0010FAr 3               .if hflag
0010FAr 3               	ldy ytmp
0010FAr 3               .endif
0010FAr 3  C8           	iny			; point to screenright
0010FBr 3               .if hflag
0010FBr 3               	sty ytmp
0010FBr 3               	ldy #2
0010FBr 3               	lda (bufaddr),y
0010FBr 3               	cmp #HIDDEN
0010FBr 3               	beq dsline3
0010FBr 3               	ldy ytmp
0010FBr 3               .endif
0010FBr 3  A5 61        	lda z80_a		; fetch spriteright byte
0010FDr 3  25 6F        	and z80_bp		; mask right
0010FFr 3  51 72        	eor (z80_hlp),y		; merge with screenright
001101r 3  91 72        	sta (z80_hlp),y		; write screenright
001103r 3               dsline3:
001103r 3               .if hflag
001103r 3               	ldy ytmp
001103r 3               .endif
001103r 3  E8           	inx			; next spritebyte
001104r 3               
001104r 3  60           	rts
001105r 3               
001105r 3               sprline:
001105r 3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001109r 3  40 41 60 61  
00110Dr 3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001111r 3  C0 C1 E0 E1  
001115r 3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001119r 3  40 41 60 61  
00111Dr 3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001121r 3  C0 C1 E0 E1  
001125r 3               .if bflag
001125r 3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
001125r 3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001125r 3               .endif
001125r 3               .endif
001125r 3               
001125r 3               ;-------------------------------------
001125r 3               ; Clear the play area window.
001125r 3               ;-------------------------------------
001125r 3               
001125r 3               .if clwflag
001125r 3               clw:
001125r 3               	lda wintop			; get coordinates of window.
001125r 3               	sta dispy			; put into dispx for calculation.
001125r 3               	lda winlft
001125r 3               	sta dispx
001125r 3               
001125r 3               	lda winhgt			; height of window.
001125r 3               	sta rrow			; copy to b register.
001125r 3               clw3:
001125r 3               	lda winwid 			; width of window.
001125r 3               	sta rcol
001125r 3               clw2:
001125r 3               	jsr gprad 			; get print address.
001125r 3               	lda #0				; zero byte to write.
001125r 3               	ldx #7				; pixel height of each cell.
001125r 3               clw1:
001125r 3               	ldy scrtab,x
001125r 3               	sta (scraddr),y 			; copy to screen.
001125r 3               	dex				; next screen row down.
001125r 3               	bpl clw1
001125r 3               
001125r 3               	inc dispx			; next column.
001125r 3               	dec rcol			; one less to do.
001125r 3               	bne clw2			; repeat for remaining columns.
001125r 3               
001125r 3               	lda winlft			; get left edge.
001125r 3               	sta dispx 			; reset x.
001125r 3               	inc dispy 			; next line down.
001125r 3               
001125r 3               	dec rrow
001125r 3               	bne clw3			; repeat down the screen.
001125r 3               
001125r 3               	lda wintop			; get coordinates of window.
001125r 3               	sta chary			; put into display position.
001125r 3               	lda winlft
001125r 3               	sta charx
001125r 3               	rts
001125r 3               .endif
001125r 3               
001125r 3               ;----------------------------------------------------------
001125r 3               ; Effects code.
001125r 3               ; Ticker routine is called 25 times per second.
001125r 3               ;
001125r 3               ; HL = txtscr = left text screen address
001125r 3               ; DE = txtscr+txtwid-1 = right text screen address
001125r 3               ; BC = txtpos = text scroller position
001125r 3               ;
001125r 3               ;----------------------------------------------------------
001125r 3               
001125r 3               .if sflag
001125r 3               scrly:
001125r 3               	rts
001125r 3               	.word txtscr         	; get left screen address.
001125r 3               	sta scr_l
001125r 3               	lda txtscr+1
001125r 3               	sta scr_l+1
001125r 3               	sta scr_r+1
001125r 3               
001125r 3               	stx xtmp
001125r 3               
001125r 3               	clc         		; get right screen address.
001125r 3               	lda scr_l
001125r 3               	adc txtwid
001125r 3               	sta scr_r
001125r 3               	dec scr_r
001125r 3               .if gflag
001125r 3               scrly7:
001125r 3               	ldx #2
001125r 3               .endif
001125r 3               scrly1:
001125r 3               	ldy txtwid		; set txtwide
001125r 3               	dey
001125r 3               	clc
001125r 3               scrly0:
001125r 3               	lda (scr_l),y		; scroll 1 line
001125r 3               	rol a
001125r 3               	sta (scr_l),y
001125r 3               	dey
001125r 3               	bpl scrly0
001125r 3               .if gflag
001125r 3               	dex
001125r 3               	bne scrly1
001125r 3               .endif
001125r 3               	clc			; point to next line
001125r 3               	lda scr_l
001125r 3               	adc #32
001125r 3               	sta scr_l
001125r 3               .if gflag
001125r 3               	bcc scrly7		; repeat 8 times
001125r 3               .else
001125r 3               	bcc scrly1		; repeat 8 times
001125r 3               .endif
001125r 3               	lda txtpos 		; get text pointer.
001125r 3               	sta scr_txt
001125r 3               	lda txtpos+1
001125r 3               	sta scr_txt+1
001125r 3               
001125r 3               	ldy #0
001125r 3               	lda (scr_txt),y 	; find character we're displaying.
001125r 3               	and #127 		; remove end marker bit if applicable.
001125r 3               	cmp #13			; is it newline?
001125r 3               	bne scrly5 		; no, it's okay.
001125r 3               	lda #32			; convert to a space instead.
001125r 3               scrly5:
001125r 3               	sta fntaddr		; calculate char address
001125r 3               	lda #0
001125r 3               	sta fntaddr+1
001125r 3               	asl fntaddr  		; multiply char by 8.
001125r 3               	rol fntaddr+1
001125r 3               	asl fntaddr
001125r 3               	rol fntaddr+1
001125r 3               	asl fntaddr
001125r 3               	rol fntaddr+1
001125r 3               	lda fntaddr
001125r 3               	clc
001125r 3               	adc #<(font-256)
001125r 3               	sta scrly3+1		; that's the low byte.
001125r 3               	lda fntaddr+1
001125r 3               	adc #>(font-256)
001125r 3               	sta scrly3+2		; add displacement.
001125r 3               	lda fntaddr+2
001125r 3               
001125r 3               	ldx #0
001125r 3               scrly3:
001125r 3               	lda $3333,x		; get image of char line.
001125r 3               	and txtbit
001125r 3               	beq scrly2		; don't plot pixel
001125r 3               	ldy scrline,x
001125r 3               	lda (scr_r),y
001125r 3               	clc
001125r 3               .if gflag
001125r 3               	ora #3
001125r 3               .else
001125r 3               	ora #1
001125r 3               .endif
001125r 3               	sta (scr_r),y		; plot pixel
001125r 3               scrly2:
001125r 3               	inx			; next line of char.
001125r 3               	cpx #8
001125r 3               	bne scrly3
001125r 3               
001125r 3               	lsr txtbit		; bit of text to display.
001125r 3               .if gflag
001125r 3               	lsr txtbit		; bit of text to display.
001125r 3               .endif
001125r 3               	bcs :+
001125r 3               	rts
001125r 3               :
001125r 3               	ldy #0
001125r 3               	lda (scr_txt),y 	; what was the character?
001125r 3               	asl a	  		; end of message?
001125r 3               	bcs scrly4
001125r 3               	inc txtpos
001125r 3               	bne :+
001125r 3               	inc txtpos+1
001125r 3               :
001125r 3               	jmp scrly6 		; not yet - continue.
001125r 3               scrly4:
001125r 3               	lda txtini 		; start of scrolling message.
001125r 3               	sta txtpos
001125r 3               	lda txtini+1
001125r 3               	sta txtpos+1
001125r 3               scrly6:
001125r 3               	lda #128
001125r 3               	sta txtbit
001125r 3               	ldx xtmp
001125r 3               	rts
001125r 3               
001125r 3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
001125r 3               
001125r 3               ;-------------------------------------------------------
001125r 3               ; Entry TICKER command
001125r 3               ;
001125r 3               ; Entry:
001125r 3               ;  z80_b = message nr
001125r 3               ;  z80_c = width
001125r 3               ;-------------------------------------------------------
001125r 3               
001125r 3               iscrly:
001125r 3               	jsr prescr 		; set up display position.
001125r 3               
001125r 3               	lda #<msgdat 		; text messages.
001125r 3               	sta z80_l
001125r 3               	lda #>msgdat
001125r 3               	sta z80_h
001125r 3               
001125r 3               	lda z80_c 		; width.
001125r 3               	sec
001125r 3               	sbc #1			; subtract one.
001125r 3               	cmp #32 		; is it between 1 and 32?
001125r 3               	bcc :+
001125r 3               	lda #$60
001125r 3               	jmp iscrl0		; no, disable messages.
001125r 3               :
001125r 3               	ldx z80_b		; message number.
001125r 3               	jsr getwrd 		; find message start.
001125r 3               
001125r 3               	lda z80_l		; set initial text position.
001125r 3               	sta txtini
001125r 3               	lda z80_h
001125r 3               	sta txtini+1
001125r 3               
001125r 3               	lda #$ad		; code for lda adrr
001125r 3               iscrl0:
001125r 3               	sta scrly		; enable/disable scrolling routine.
001125r 3               
001125r 3               	jsr prescr 		; set up display position.
001125r 3               	jsr gprad 		; get print address.
001125r 3               
001125r 3               	lda scraddr 		; set text screen address.
001125r 3               	sta txtscr
001125r 3               	lda scraddr+1
001125r 3               	sta txtscr+1
001125r 3               
001125r 3               	lda z80_c		; width.
001125r 3               	sta txtwid		; set width in working storage.
001125r 3               
001125r 3               	lda #128 		; start with leftmost bit.
001125r 3               	sta txtbit
001125r 3               
001125r 3               	jmp scrly4
001125r 3               .endif
001125r 3               
001125r 3               ;------------------------------------------------------------------
001125r 3               ; Dig routine, conditional assembly depending on dflag
001125r 3               ;------------------------------------------------------------------
001125r 3               .if dflag
001125r 3               dig:
001125r 3               	and #3
001125r 3               	beq digr		; dig right
001125r 3               	cmp #1
001125r 3               	beq digl		; dig left
001125r 3               	cmp #2
001125r 3               	beq digd		; dig down
001125r 3               
001125r 3               ; Dig up.
001125r 3               
001125r 3               digu:				; dig up
001125r 3               	ldy #8
001125r 3               	lda (z80_ix),y
001125r 3               	sec
001125r 3               	sbc #2
001125r 3               	sta dispy		; set y
001125r 3               
001125r 3               	iny
001125r 3               	lda (z80_ix),y
001125r 3               	sta dispx		; set x
001125r 3               	jmp digv
001125r 3               
001125r 3               ; Dig down.
001125r 3               
001125r 3               digd:
001125r 3               	ldy #9
001125r 3               	lda (z80_ix),y
001125r 3               	sta dispx		; set y
001125r 3               
001125r 3               	dey
001125r 3               	clc
001125r 3               	lda (z80_ix),y
001125r 3               	adc #16
001125r 3               	sta dispy		; set y
001125r 3               	jmp digv
001125r 3               
001125r 3               ; Dig left.
001125r 3               
001125r 3               digl:
001125r 3               	ldy #8
001125r 3               	lda (z80_ix),y
001125r 3               	sta dispy		; set y
001125r 3               
001125r 3               	iny
001125r 3               	lda (z80_ix),y
001125r 3               	sec
001125r 3               	sbc #2			; x=x-2
001125r 3               	sta dispx		; set x
001125r 3               	jmp digh
001125r 3               
001125r 3               ; Dig right.
001125r 3               
001125r 3               digr:
001125r 3               	ldy #8
001125r 3               	lda (z80_ix),y
001125r 3               	sta dispy		; set y
001125r 3               
001125r 3               	iny
001125r 3               	lda (z80_ix),y
001125r 3               	clc
001125r 3               	adc #16
001125r 3               	sta dispx		; set x+16
001125r 3               	jmp digh
001125r 3               
001125r 3               ; Vertical digging
001125r 3               
001125r 3               digv:
001125r 3               	jsr tstbl		; check blocktype in MAP
001125r 3               	jsr fdchk		; test if FODDER
001125r 3               
001125r 3               	clc
001125r 3               	lda dispx		; look 1 cell down
001125r 3               	adc #8
001125r 3               	sta dispx
001125r 3               	jsr tstbl		; check blocktype in MAP
001125r 3               	jsr fdchk
001125r 3               	lda dispx
001125r 3               	and #7
001125r 3               	bne :+
001125r 3               	rts
001125r 3               :
001125r 3               	clc
001125r 3               	lda dispx		; look 1 cell down
001125r 3               	adc #8
001125r 3               	sta dispx
001125r 3               	jsr tstbl		; check blocktype in MAP
001125r 3               	jmp fdchk
001125r 3               
001125r 3               ; Horizontal digging
001125r 3               
001125r 3               digh:
001125r 3               	jsr tstbl		; check blocktype in MAP
001125r 3               	jsr fdchk		; test if FODDER
001125r 3               
001125r 3               	clc
001125r 3               	lda dispy		; look 1 cell down
001125r 3               	adc #8
001125r 3               	sta dispy
001125r 3               	jsr tstbl		; check blocktype in MAP
001125r 3               	jsr fdchk
001125r 3               	lda dispy
001125r 3               	and #7
001125r 3               	bne :+
001125r 3               	rts
001125r 3               :
001125r 3               	clc
001125r 3               	lda dispy		; look 1 cell down
001125r 3               	adc #8
001125r 3               	sta dispy
001125r 3               	jsr tstbl		; check blocktype in MAP
001125r 3               	jmp fdchk
001125r 3               
001125r 3               digcnt:	.byte 0
001125r 3               .endif
001125r 3               
001125r 3               ;------------------------------------------------------------------
001125r 3               ; Code added to process Crumbling Blocks
001125r 3               ;------------------------------------------------------------------
001125r 3               
001125r 3               .if crflag
001125r 3               crumble:
001125r 3               	lda vard
001125r 3               	and #3
001125r 3               	bne crumble3
001125r 3               
001125r 3               	ldy #9
001125r 3               	lda (z80_ix),y
001125r 3               	sta dispx
001125r 3               
001125r 3               	dey
001125r 3               	clc
001125r 3               	lda (z80_ix),y
001125r 3               	adc #16
001125r 3               	sta dispy
001125r 3               
001125r 3               	and #6
001125r 3               	bne crumble3
001125r 3               
001125r 3               	jsr tstbl		; test block left
001125r 3               	cmp #9
001125r 3               	bcc crumble1
001125r 3               	jsr crumble5
001125r 3               crumble1:
001125r 3               	clc
001125r 3               	lda dispx		; look 1 cell down
001125r 3               	adc #8
001125r 3               	sta dispx
001125r 3               	jsr tstbl		; test block left
001125r 3               	cmp #9
001125r 3               	bcc crumble2
001125r 3               	jsr crumble5
001125r 3               crumble2:
001125r 3               	lda dispx
001125r 3               	and #7
001125r 3               	beq crumble3
001125r 3               	clc
001125r 3               	lda dispx		; look 1 cell down
001125r 3               	adc #8
001125r 3               	sta dispx
001125r 3               	jsr tstbl		; test block left
001125r 3               	cmp #9
001125r 3               	bcc crumble3
001125r 3               	jsr crumble5
001125r 3               crumble3:
001125r 3               	rts
001125r 3               
001125r 3               crumble5:
001125r 3               	clc
001125r 3               	adc #1
001125r 3               	cmp #$11
001125r 3               	bcc crumble4
001125r 3               	lda #0
001125r 3               crumble4:
001125r 3               	ldy #0
001125r 3               	sta (bufaddr),y
001125r 3               	sta tmp
001125r 3               
001125r 3               	lda dispx		; x=x/8
001125r 3               	pha
001125r 3               	lsr a
001125r 3               	lsr a
001125r 3               	lsr a
001125r 3               	sta dispx
001125r 3               
001125r 3               	lda dispy		; y=y/8
001125r 3               	pha
001125r 3               	lsr a
001125r 3               	lsr a
001125r 3               	lsr a
001125r 3               	sta dispy
001125r 3               
001125r 3               	lda tmp
001125r 3               	jsr pattr 		; write block.
001125r 3               
001125r 3               	pla
001125r 3               	sta dispy
001125r 3               	pla
001125r 3               	sta dispx
001125r 3               	rts
001125r 3               .endif
001125r 3               
001125r 3               ; User routine.  Put your own code in here to be called with USER instruction.
001125r 3               ; if USER has an argument it will be passed in the accumulator.
001125r 3               
001125r 3               user:
001125r 3               	.include "user.inc"
001125r 4  60           	rts
001126r 4               
001126r 3               
001126r 3               ;fontpointer:	.byte 0,0
001126r 3               ;TmpAddr:	.byte 0,0
001126r 3               
001126r 3               ;loopa:		.byte 0
001126r 3               ;loopb:		.byte 0
001126r 3               ;loopc:		.byte 0
001126r 3               
001126r 3               .if gflag
001126r 3               setfgcol:
001126r 3               	and #3
001126r 3               	tay
001126r 3               	lda codcol,y
001126r 3               	jmp calfgc
001126r 3               
001126r 3               setbgcol:
001126r 3               	and #3
001126r 3               calbgc:
001126r 3               	tay
001126r 3               	lda codcol,y
001126r 3               	pha
001126r 3               	lda andeor
001126r 3               	eor andeor+1
001126r 3               	tax
001126r 3               	pla
001126r 3               	sta andeor+1
001126r 3               	txa
001126r 3               calfgc:
001126r 3               	eor andeor+1
001126r 3               	sta andeor
001126r 3               calex1:
001126r 3               	rts
001126r 3               
001126r 3               codcol:	.byte $00,$55,$aa,$ff
001126r 3               .else
001126r 3               setfgcol:
001126r 3               setbgcol:
001126r 3  60           	rts
001127r 3               .endif
001127r 3  00 00        andeor:	.byte 0,0
001129r 3               
001129r 3               .if rflag
001129r 3               ;----------------------------------------------------
001129r 3               ; Shift tables
001129r 3               ;----------------------------------------------------
001129r 3               
001129r 3               shift_table:
001129r 3               .word shift0
001129r 3               .word shift2
001129r 3               .word shift4
001129r 3               .word shift6
001129r 3               
001129r 3               ;.align 256
001129r 3               shift0:
001129r 3               .repeat 256, i
001129r 3               	.byte i
001129r 3               .endrep
001129r 3               
001129r 3               shift2:
001129r 3               .repeat 256, i
001129r 3               	.byte (i >> 2) | (i << 6) & $c0
001129r 3               .endrep
001129r 3               
001129r 3               shift4:
001129r 3               .repeat 256, i
001129r 3               	.byte (i >> 4) | ((i << 4) & $f0)
001129r 3               .endrep
001129r 3               
001129r 3               shift6:
001129r 3               .repeat 256, i
001129r 3               	.byte (i >> 6) | ((i << 2) & $fc)
001129r 3               .endrep
001129r 3               .endif
001129r 3               
001129r 3  04           numblk:	.byte (sprgfx-bprop)
00112Ar 3               
00112Ar 3               ; Everything below here will be generated by the editors.
00112Ar 3               
00112Ar 3               
00112Ar 3  60                   rts
00112Br 3               WINDOWTOP = 1
00112Br 3               WINDOWLFT = 1
00112Br 3               WINDOWHGT = 22
00112Br 3               WINDOWWID = 22 ;a
00112Br 3               MAPWID = 3
00112Br 3  FF FF FF             .byte 255,255,255
00112Er 3               mapdat:
00112Er 3  FF 00 FF             .byte 255,0,255
001131r 3  FF FF FF             .byte 255,255,255
001134r 3  01           stmap:  .byte 1
001135r 3               
001135r 3               evnt00:
001135r 3  60                   rts
001136r 3               evnt01:
001136r 3  60                   rts
001137r 3               evnt02:
001137r 3  60                   rts
001138r 3               evnt03:
001138r 3  60                   rts
001139r 3               evnt04:
001139r 3  60                   rts
00113Ar 3               evnt05:
00113Ar 3  60                   rts
00113Br 3               evnt06:
00113Br 3  60                   rts
00113Cr 3               evnt07:
00113Cr 3  60                   rts
00113Dr 3               evnt08:
00113Dr 3  60                   rts
00113Er 3               evnt09:
00113Er 3  60                   rts
00113Fr 3               evnt10:
00113Fr 3  60                   rts
001140r 3               evnt11:
001140r 3  60                   rts
001141r 3               evnt12:
001141r 3  60                   rts
001142r 3               evnt13:
001142r 3  60                   rts
001143r 3               evnt14:
001143r 3  A9 00                lda #0		; AT
001145r 3  85 rr                sta chary
001147r 3  A9 04                lda #4
001149r 3  85 rr                sta charx
00114Br 3  A9 00                lda #0		; PRINT
00114Dr 3  20 rr rr             jsr dmsg
001150r 3  60                   rts
001151r 3               evnt15:
001151r 3  60                   rts
001152r 3               evnt16:
001152r 3  60                   rts
001153r 3               evnt17:
001153r 3  60                   rts
001154r 3               evnt18:
001154r 3  60                   rts
001155r 3               evnt19:
001155r 3  60                   rts
001156r 3               evnt20:
001156r 3  60                   rts
001157r 3  60           ptcusr: rts
001158r 3               msgdat:
001158r 3  44 45 4D 4F          .byte "DEMO VIC20 MPAG",196
00115Cr 3  20 56 49 43  
001160r 3  32 30 20 4D  
001168r 3               nummsg:
001168r 3  01                   .byte 1
001169r 3               chgfx:
001169r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
00116Dr 3  FF FF FF FF  
001171r 3  01 01 01 FF          .byte 1,1,1,255,16,16,16,255
001175r 3  10 10 10 FF  
001179r 3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
00117Dr 3  AA 55 AA 55  
001181r 3  00 11 00 44          .byte 0,17,0,68,0,34,0,136
001185r 3  00 22 00 88  
001189r 3               bprop:
001189r 3  00                   .byte 0
00118Ar 3  02                   .byte 2
00118Br 3  04                   .byte 4
00118Cr 3  00                   .byte 0
00118Dr 3               sprgfx:
00118Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001191r 3  00 00 00 00  
001195r 3  00 00 00 00  
0011ADr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011B1r 3  00 00 00 00  
0011B5r 3  00 00 00 00  
0011CDr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011D1r 3  00 00 00 00  
0011D5r 3  00 00 00 00  
0011EDr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011F1r 3  00 00 00 00  
0011F5r 3  00 00 00 00  
00120Dr 3               frmlst:
00120Dr 3  00 01 01 00          .byte 0,1,1,0
001211r 3               scdat:
001211r 3  22 01                .word 290
001213r 3  FF 01 17 FF          .byte 255,1,23,255,0,20,1,1,255,0,20,1,1,2,2,255,1,9,3,3,255,1,9,2,2,1,255,2,7,1,3,3,1
001217r 3  00 14 01 01  
00121Br 3  FF 00 14 01  
001234r 3  FF 02 06 01          .byte 255,2,6,1,1,2,2,1,255,2,7,1,3,3,1,255,2,6,1,1,2,2,1,255,2,8,3,3,1,255,2,4,255,1,4
001238r 3  01 02 02 01  
00123Cr 3  FF 02 07 01  
001257r 3  02 02 01 FF          .byte 2,2,1,255,2,8,3,3,1,255,2,4,1,3,1,1,2,2,1,1,1,2,2,255,1,4,3,3,1,255,2,4,1
00125Br 3  02 08 03 03  
00125Fr 3  01 FF 02 04  
001278r 3  03 01 01 FF          .byte 3,1,1,255,2,10,1,3,3,1,255,2,4,255,1,4,255,2,10,1,3,3,255,2,7,1,1,2,2,1,2,2,1,1,1
00127Cr 3  02 0A 01 03  
001280r 3  03 01 FF 02  
00129Br 3  02 02 02 03          .byte 2,2,2,3,3,255,2,7,1,1,2,2,1,2,2,1,3,1,2,2,2,3,3,255,1,9,2,2,1,2,2,1,3
00129Fr 3  03 FF 02 07  
0012A3r 3  01 01 02 02  
0012BCr 3  01 02 02 01          .byte 1,2,2,1,255,3,9,1,1,2,2,1,2,2,1,3,1,2,2,1,255,3,9,1,1,2,2,1,2,2,1,3,1
0012C0r 3  FF 03 09 01  
0012C4r 3  01 02 02 01  
0012DDr 3  02 02 01 03          .byte 2,2,1,3,3,255,1,9,2,2,1,2,2,1,3,1,2,2,1,3,3,1,255,2,6,1,1,2,2,1,2,2,1
0012E1r 3  03 FF 01 09  
0012E5r 3  02 02 01 02  
0012FEr 3  03 01 02 02          .byte 3,1,2,2,1,3,3,1,255,2,6,1,1,2,2,1,2,2,1,1,1,2,2,1,3,3,1,255,2,6,1,1,255,2,10
001302r 3  01 03 03 01  
001306r 3  FF 02 06 01  
001321r 3  01 03 03 FF          .byte 1,3,3,255,2,7,1,1,255,2,10,1,3,3,255,2,7,255,1,23
001325r 3  02 07 01 01  
001329r 3  FF 02 0A 01  
001335r 3               numsc:
001335r 3  01                   .byte 1
001336r 3               nmedat:
001336r 3  42 00 58 80          .byte 66,0,88,128,255
00133Ar 3  FF           
00133Br 3               NUMOBJ = 1
00133Br 3               objdta:
00133Br 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
00133Fr 3  00 00 00 00  
001343r 3  00 00 00 00  
001361r 3               font:
001361r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001365r 3  00 00 00 00  
001369r 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
00136Dr 3  30 00 30 00  
001371r 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
001375r 3  00 00 00 00  
001379r 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
00137Dr 3  6C FE 6C 00  
001381r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
001385r 3  7E 1E 7E 18  
001389r 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
00138Dr 3  30 6E CE 00  
001391r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
001395r 3  7E CC 7E 00  
001399r 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
00139Dr 3  00 00 00 00  
0013A1r 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0013A5r 3  18 18 0C 00  
0013A9r 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0013ADr 3  30 30 60 00  
0013B1r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0013B5r 3  7E 18 3C 00  
0013B9r 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0013BDr 3  7E 18 18 00  
0013C1r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0013C5r 3  00 18 18 30  
0013C9r 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0013CDr 3  7E 00 00 00  
0013D1r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0013D5r 3  00 38 38 00  
0013D9r 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0013DDr 3  18 30 60 00  
0013E1r 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0013E5r 3  F6 E6 7C 00  
0013E9r 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0013EDr 3  18 18 7E 00  
0013F1r 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0013F5r 3  7C C0 FE 00  
0013F9r 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0013FDr 3  06 C6 7C 00  
001401r 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
001405r 3  D8 FE 18 00  
001409r 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
00140Dr 3  06 C6 7C 00  
001411r 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
001415r 3  C6 C6 7C 00  
001419r 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
00141Dr 3  18 30 30 00  
001421r 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
001425r 3  C6 C6 7C 00  
001429r 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
00142Dr 3  7E 06 7C 00  
001431r 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
001435r 3  00 00 30 00  
001439r 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
00143Dr 3  00 30 30 60  
001441r 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
001445r 3  30 18 0C 00  
001449r 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00144Dr 3  00 7E 00 00  
001451r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
001455r 3  0C 18 30 00  
001459r 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00145Dr 3  18 00 18 00  
001461r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
001465r 3  FE C0 7C 00  
001469r 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
00146Dr 3  FE C6 C6 00  
001471r 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
001475r 3  C6 C6 FC 00  
001479r 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
00147Dr 3  C0 C6 7C 00  
001481r 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
001485r 3  C6 CC F8 00  
001489r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
00148Dr 3  C0 C0 FE 00  
001491r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
001495r 3  C0 C0 C0 00  
001499r 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
00149Dr 3  DE C6 7C 00  
0014A1r 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0014A5r 3  C6 C6 C6 00  
0014A9r 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0014ADr 3  18 18 7E 00  
0014B1r 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0014B5r 3  C6 C6 7C 00  
0014B9r 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0014BDr 3  D8 CC C6 00  
0014C1r 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0014C5r 3  C0 C0 FE 00  
0014C9r 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0014CDr 3  C6 C6 C6 00  
0014D1r 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0014D5r 3  DE CE C6 00  
0014D9r 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0014DDr 3  C6 C6 7C 00  
0014E1r 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0014E5r 3  FC C0 C0 00  
0014E9r 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0014EDr 3  F6 DE 7C 00  
0014F1r 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0014F5r 3  FC CC C6 00  
0014F9r 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0014FDr 3  06 C6 7C 00  
001501r 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
001505r 3  30 30 30 00  
001509r 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
00150Dr 3  C6 C6 7C 00  
001511r 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
001515r 3  C6 6C 38 00  
001519r 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
00151Dr 3  C6 FE 6C 00  
001521r 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
001525r 3  38 6C C6 00  
001529r 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
00152Dr 3  30 30 30 00  
001531r 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
001535r 3  30 60 FE 00  
001539r 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00153Dr 3  18 18 1E 00  
001541r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
001545r 3  30 18 0C 00  
001549r 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00154Dr 3  30 30 F0 00  
001551r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
001555r 3  30 30 30 00  
001559r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00155Dr 3  00 00 00 FF  
001561r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
001565r 3  60 60 FE 00  
001569r 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
00156Dr 3  7C CC 7C 00  
001571r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
001575r 3  66 66 7C 00  
001579r 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
00157Dr 3  60 60 3C 00  
001581r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
001585r 3  CC CC 7C 00  
001589r 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
00158Dr 3  F8 C0 7C 00  
001591r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
001595r 3  30 30 30 00  
001599r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
00159Dr 3  CC 7C 0C 78  
0015A1r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0015A5r 3  CC CC CC 00  
0015A9r 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0015ADr 3  30 30 78 00  
0015B1r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0015B5r 3  0C 0C 6C 38  
0015B9r 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0015BDr 3  70 78 6C 00  
0015C1r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0015C5r 3  30 30 1C 00  
0015C9r 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0015CDr 3  FC FC FC 00  
0015D1r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0015D5r 3  CC CC CC 00  
0015D9r 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0015DDr 3  CC CC 78 00  
0015E1r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0015E5r 3  CC F8 C0 C0  
0015E9r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0015EDr 3  CC 7C 0C 0E  
0015F1r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0015F5r 3  60 60 60 00  
0015F9r 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0015FDr 3  78 0C F8 00  
001601r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
001605r 3  30 30 1C 00  
001609r 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
00160Dr 3  CC CC 78 00  
001611r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
001615r 3  78 78 30 00  
001619r 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
00161Dr 3  FC FC 78 00  
001621r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
001625r 3  30 78 CC 00  
001629r 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
00162Dr 3  CC 7C 0C 78  
001631r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
001635r 3  30 60 FC 00  
001639r 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
00163Dr 3  18 18 1E 00  
001641r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
001645r 3  18 18 18 00  
001649r 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00164Dr 3  30 30 F0 00  
001651r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
001655r 3  00 00 00 00  
001659r 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
00165Dr 3  E3 BB C6 7C  
001661r 3               jtab:
001661r 3  63                   .byte 99
001662r 3  35 15 93 22  keys:   .byte 53,21,147,34,144,4,20,33,17,1,146
001666r 3  90 04 14 21  
00166Ar 3  11 01 92     
00166Dr 3               
00166Dr 2               
00166Dr 1               	.include "lib.inc"
00166Dr 2               ;============================================================
00166Dr 2               ; PLATFORM VARIABLES
00166Dr 2               ;============================================================
00166Dr 2               ;
00166Dr 2               ; Memory map:
00166Dr 2               ;
00166Dr 2               ;	$0000-$03ff	 1.0kB	CPU WS
00166Dr 2               ;	$0400-$0fff	 3,0kB	RAM
00166Dr 2               ;	$1000-$17ff	 2,0kB	VIDEO RAM
00166Dr 2               ;	$1800-$1fff	 2,0kB	CHAR RAM
00166Dr 2               ;	$2000-$7fff	24,0kB	RAM
00166Dr 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
00166Dr 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
00166Dr 2               ;	$9400-$97ff	 1,0kB	COLOUR RAM
00166Dr 2               ;	$9800-$9fff	 2,0kB	I/O
00166Dr 2               ;	$a000-$bfff	 8,0kB	RAM
00166Dr 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
00166Dr 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
00166Dr 2               ;
00166Dr 2               ; Video registers:
00166Dr 2               ;
00166Dr 2               ;	$9000	horizontal centering
00166Dr 2               ;		bits 0-6 horizontal centering
00166Dr 2               ;		bit  7 sets interlace scan
00166Dr 2               ;	$9001	vertical centering
00166Dr 2               ;	$9002	set # of columns
00166Dr 2               ;		bits 0-6 set # of columns
00166Dr 2               ;		bit 7 is part of video matrix address
00166Dr 2               ;	$9003	set # of rows
00166Dr 2               ;		bit 0 sets 8x8 or 16x8 chars
00166Dr 2               ;		bits 1-6 set # of rows
00166Dr 2               ;	$9005	start of character memory
00166Dr 2               ;		bits 0-3 start of character memory (default = 0)
00166Dr 2               ;		bits 4-7 is rest of video address (default= F)
00166Dr 2               ;		BITS 3,2,1,0 CM startinq address
00166Dr 2               ;			     HEX   DEC
00166Dr 2               ;		0000   ROM   8000  32768
00166Dr 2               ;		0001	     8400  33792
00166Dr 2               ;		0010	     8800  34816
00166Dr 2               ;		0011	     8C00  35840
00166Dr 2               ;		1000   RAM   0000  0000
00166Dr 2               ;		1001  xxxx
00166Dr 2               ;		1010  xxxx   unavail.
00166Dr 2               ;		1011  xxxx
00166Dr 2               ;		1100	     1000  4096
00166Dr 2               ;		1101	     1400  5120
00166Dr 2               ;		1110	     1800  6144
00166Dr 2               ;		1111	     1C00  7168
00166Dr 2               ;	$900f	Screen and border color register
00166Dr 2               ;		bits 4-7 select background color
00166Dr 2               ;		bits 0-2 select border color
00166Dr 2               ;		bit 3 selects inverted or normal mode
00166Dr 2               ;------------------------------------------------------------
00166Dr 2               
00166Dr 2               ; Addresses
00166Dr 2               
00166Dr 2               	MapAddr		= $400		; RAM
00166Dr 2               	ScreenAddr	= $1000		; VIDEO RAM
00166Dr 2               	CharAddress	= $1800		; CHAR RAM
00166Dr 2               	Reg0		= $9000		; Horizontal centering
00166Dr 2               	Reg1		= $9001		; Vertical centering
00166Dr 2               	Reg2		= $9002		; Set # of columns
00166Dr 2               	Reg3		= $9003		; Set # of rows
00166Dr 2               	Reg5		= $9005		; Start of character memory
00166Dr 2               	RegF		= $900f		; Screen and border color register
00166Dr 2               	ColorAttr	= $9400		; Color attributes
00166Dr 2               
00166Dr 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00166Dr 2               ; System constants Atom, needs to be updated for VIC usage
00166Dr 2               
00166Dr 2               ;	ScreenAddr  	= $8000		; Startaddress video RAM
00166Dr 2               	ScrSelAddr  	= $b000		; Screen selection address
00166Dr 2               	KeyRowAddr  	= $b000		; PIA key matrix row
00166Dr 2               	KeyColAddr  	= $b001		; PIA key matrix column
00166Dr 2               	SpeakerBit  	= $b002		; Speaker bit
00166Dr 2               	CmdReg      	= $b400		; Command register AtoMMC
00166Dr 2               	DatReg      	= $b401		; Data register AtoMMC
00166Dr 2               	Timer2_Low  	= $b808		; Timer 2 low byte
00166Dr 2               	Timer2_High 	= $b809		; Timer 2 high byte
00166Dr 2               	Timer1_Low  	= $b804		; Timer 1 low byte
00166Dr 2               	Timer1_High 	= $b805		; Timer 1 high byte
00166Dr 2               
00166Dr 2               	green		= $00		; Colour definition filters
00166Dr 2               	yellow		= $55
00166Dr 2               	blue		= $aa
00166Dr 2               	red		= $ff
00166Dr 2               
00166Dr 2               ; System calls Atom
00166Dr 2               
00166Dr 2               	SCRSYNC	 	= $fe66		; wait for next CRT field flyback 60 Hz
00166Dr 2               	SCRSYNC1 	= $fe6b		; wait for CRT field flyback 60 Hz
00166Dr 2               	OSRDCH   	= $fe94		; get key subroutine
00166Dr 2                       READKEY  	= $fe71		; scan key matrix subroutine
00166Dr 2               	OSWRCH	 	= $fff4		; write character
00166Dr 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00166Dr 2               
00166Dr 2               ;============================================================
00166Dr 2               ; PLATFORM ROUTINES
00166Dr 2               ;============================================================
00166Dr 2               
00166Dr 2               ;------------------------------------------------------------
00166Dr 2               ; INIT, Initialise system
00166Dr 2               ;
00166Dr 2               ; - Disable interrupts
00166Dr 2               ; - Init NTSC screen
00166Dr 2               ; - Copy MPAGD font (96 chars = 768 bytes) to CHAR RAM (CHARcode 0-95)
00166Dr 2               ; - Copy MPAGD tiles to CHAR RAM starting at $1b00 (CHARcode 96-)
00166Dr 2               ; - Set up screen line offset address table.
00166Dr 2               ;------------------------------------------------------------
00166Dr 2               
00166Dr 2               Init:
00166Dr 2               
00166Dr 2               ; Disable interrupts
00166Dr 2               
00166Dr 2               ;	lda #$7f
00166Dr 2               ;	sta $911e
00166Dr 2               ;	sta $912e
00166Dr 2               
00166Dr 2               ; Init screen for NTSC
00166Dr 2               ; this sets the background and border color of the screen
00166Dr 2               
00166Dr 2               ; in this case border black and background white
00166Dr 2  A9 18        	lda #%00011000
00166Fr 2  8D 0F 90     	sta RegF
001672r 2               
001672r 2               ; max num of columns (24)
001672r 2  AD 02 90     	lda Reg2
001675r 2  29 80        	and #%10000000
001677r 2  09 18        	ora #24
001679r 2  8D 02 90     	sta Reg2
00167Cr 2               
00167Cr 2               ; max num of lines (mult by 2 - 24) for 8x8 chars
00167Cr 2  AD 03 90     	lda Reg3
00167Fr 2  29 41        	and #%01000001
001681r 2  09 30        	ora #48		; number of rows multipled by two
001683r 2  8D 03 90     	sta Reg3
001686r 2               
001686r 2               ; horizontal and vertical position must be set for
001686r 2               ; non standard screen resolution (standard 22x23)
001686r 2               ; same games even allow the user to change them
001686r 2               ; these values are for PAL for NTSC should be different
001686r 2               
001686r 2               ; move horizontal position in the screen
001686r 2  AD 00 90     	lda Reg0
001689r 2  29 80        	and #%10000000
00168Br 2  09 02        	ora #2
00168Dr 2  8D 00 90     	sta Reg0
001690r 2               
001690r 2               ; move vertical position in the screen
001690r 2  A9 18        	lda #$18
001692r 2  8D 01 90     	sta Reg1
001695r 2               
001695r 2               ; Set character data pointer to CHAR RAM at $1800
001695r 2  AD 05 90     	lda Reg5
001698r 2  29 F0        	and #%11110000
00169Ar 2  09 0E        	ora #%1110
00169Cr 2  8D 05 90     	sta Reg5
00169Fr 2               
00169Fr 2               ; Copy MPAGD font (96 chars = 768 bytes) to CHAR RAM (CHARcode 0-95)
00169Fr 2               
00169Fr 2  A2 00        	ldx #0
0016A1r 2               @loop:
0016A1r 2  BD rr rr     	lda font,x
0016A4r 2  9D 00 18     	sta CharAddress,x
0016A7r 2  BD rr rr     	lda font + $100,x
0016AAr 2  9D 00 19     	sta CharAddress +$100,x
0016ADr 2  BD rr rr     	lda font + $200,x
0016B0r 2  9D 00 1A     	sta CharAddress + $200,x
0016B3r 2  E8           	inx
0016B4r 2  D0 EB        	bne @loop
0016B6r 2               
0016B6r 2               ; Copy MPAGD tiles to CHAR RAM starting at $1b00 (CHARcode 96-)
0016B6r 2               
0016B6r 2               ; Set source = MPAGD tileaddress
0016B6r 2               
0016B6r 2  A9 rr        	lda #<chgfx
0016B8r 2  85 rr        	sta tileaddr
0016BAr 2  A9 rr        	lda #>chgfx
0016BCr 2  85 rr        	sta tileaddr+1
0016BEr 2               
0016BEr 2               ; Set destination = CHAR RAM address
0016BEr 2               
0016BEr 2  A9 00        	lda #<(CharAddress + $300)
0016C0r 2  85 rr        	sta bufaddr
0016C2r 2  A9 1B        	lda #>(CharAddress + $300)
0016C4r 2  85 rr        	sta bufaddr+1
0016C6r 2               
0016C6r 2               ; Copy all MPAGD tiles into CHAR RAM
0016C6r 2               
0016C6r 2  A0 00        	ldy #0
0016C8r 2               @bloop:
0016C8r 2  B1 rr        	lda (tileaddr),y
0016CAr 2  91 rr        	sta (bufaddr),y
0016CCr 2  E6 rr        	inc tileaddr
0016CEr 2  D0 02        	bne :+
0016D0r 2  E6 rr        	inc tileaddr+1
0016D2r 2  E6 rr        :	inc bufaddr
0016D4r 2  D0 02        	bne :+
0016D6r 2  E6 rr        	inc bufaddr+1
0016D8r 2  A5 rr        :	lda tileaddr
0016DAr 2  C9 rr        	cmp #<bprop		; Check for last tileaddress
0016DCr 2  D0 EA        	bne @bloop
0016DEr 2  A5 rr        	lda tileaddr+1
0016E0r 2  C9 rr        	cmp #>bprop
0016E2r 2  D0 E4        	bne @bloop
0016E4r 2               
0016E4r 2               ; Set up screen line offset address table.
0016E4r 2               ; Save lb and hb of 24 lines in a table for reference
0016E4r 2               
0016E4r 2               setsat:
0016E4r 2  A9 00        	lda #0			; start
0016E6r 2  85 rr        	sta scraddr
0016E8r 2  85 rr        	sta scraddr+1
0016EAr 2               
0016EAr 2  A0 00        	ldy #0			; vertical lines on screen.
0016ECr 2               setsa0:
0016ECr 2  A5 rr        	lda scraddr
0016EEr 2  99 00 07     	sta SCROFF_lb,y		; write low byte.
0016F1r 2  A5 rr        	lda scraddr+1
0016F3r 2  99 18 07     	sta SCROFF_hb,y		; write high byte.
0016F6r 2  20 rr rr     	jsr nline		; next line down.
0016F9r 2  C8           	iny			; next position in table.
0016FAr 2  C0 18        	cpy #24
0016FCr 2  D0 EE        	bne setsa0
0016FEr 2  60           	rts
0016FFr 2               
0016FFr 2               ;----------------------------------------------------------------------
0016FFr 2               ; CLS, Clear screen routine.
0016FFr 2               ;
0016FFr 2               ; Fill screenmem and colourmem  with space
0016FFr 2               ;----------------------------------------------------------------------
0016FFr 2               
0016FFr 2               cls:
0016FFr 2  A2 00        	ldx #0
001701r 2               clsloop:
001701r 2  A9 00        	lda #0
001703r 2  9D 00 10     	sta ScreenAddr,x	; Screen RAM
001706r 2  9D 00 11     	sta ScreenAddr+$100,x
001709r 2  9D 00 12     	sta ScreenAddr+$200,x
00170Cr 2  9D 00 94     	sta ColorAttr,x		; Colour RAM
00170Fr 2  9D 00 95     	sta ColorAttr+$100,x
001712r 2  9D 00 96     	sta ColorAttr+$200,x
001715r 2  E8           	inx
001716r 2  D0 E9        	bne clsloop
001718r 2  60           	rts
001719r 2               
001719r 2               ;----------------------------------------------------------------------
001719r 2               ; SETPAL, Set colour palette
001719r 2               ;
001719r 2               ; Not used at the moment
001719r 2               ;----------------------------------------------------------------------
001719r 2               
001719r 2               setpal:
001719r 2  60           	rts
00171Ar 2               
00171Ar 2               ;----------------------------------------------------------------------
00171Ar 2               ; PCHAR, Display characte on screen
00171Ar 2               ;----------------------------------------------------------------------
00171Ar 2               
00171Ar 2               pchar:
00171Ar 2  38           	sec
00171Br 2  E9 20        	sbc #32
00171Dr 2  85 rr        	sta fntaddr
00171Fr 2               pchark:
00171Fr 2  20 rr rr     	jsr gprad		; get screen address.
001722r 2  A2 07        	ldx #7			; lines to write.
001724r 2               pchar0:
001724r 2  A5 rr        	lda fntaddr
001726r 2  A0 00        	ldy #0
001728r 2  91 rr        	sta (scraddr),y 	; copy to screen.
00172Ar 2  60           	rts
00172Br 2               
00172Br 2               ;----------------------------------------------------------------------
00172Br 2               ; GETOFFSET, Calculate bufaddr = Y*screen width + X
00172Br 2               ;----------------------------------------------------------------------
00172Br 2               
00172Br 2               getoffset:
00172Br 2  A4 rr        	ldy dispy
00172Dr 2  B9 18 07     	lda SCROFF_hb,y
001730r 2  85 rr        	sta bufaddr+1
001732r 2  B9 00 07     	lda SCROFF_lb,y
001735r 2  18           	clc
001736r 2  65 rr        	adc dispx
001738r 2  85 rr        	sta bufaddr
00173Ar 2  90 02        	bcc :+
00173Cr 2  E6 rr        	inc bufaddr+1
00173Er 2  60           :	rts
00173Fr 2               
00173Fr 2               ;-------------------------------------------------------------
00173Fr 2               ; VSYNC, synchronize to 25 frames/sec
00173Fr 2               ;
00173Fr 2               ;  - read joystick/keyboard
00173Fr 2               ;  - handle sound
00173Fr 2               ;  - sync framerate with timer 25Hz
00173Fr 2               ;  - handle shrapnel every even frame
00173Fr 2               ;-------------------------------------------------------------
00173Fr 2               
00173Fr 2               vsync:
00173Fr 2  48           	pha
001740r 2  98           	tya
001741r 2  48           	pha
001742r 2  8A           	txa
001743r 2  48           	pha
001744r 2  20 rr rr     	jsr joykey		; read joystick/keyboard.
001747r 2               
001747r 2  A6 A2        	ldx $a2			; Set Timer1 expired bit
001749r 2               vsync1:
001749r 2  E4 A2        	cpx $a2			; Check Interrupt Flag Register
00174Br 2  F0 FC        	beq vsync1
00174Dr 2               
00174Dr 2  A5 rr        	lda clock
00174Fr 2  29 01        	and #1
001751r 2  D0 03        	bne:+
001753r 2  20 rr rr     	jsr proshr		; handle shrapnel every even frame
001756r 2               :
001756r 2  AD rr rr     	lda sndtyp
001759r 2  F0 10        	beq sndskip
00175Br 2               sndloop:
00175Br 2  AD 02 B0     	lda SpeakerBit		; handle sound
00175Er 2  AC rr rr     	ldy sndtyp
001761r 2               sndwait:
001761r 2  88           	dey
001762r 2  D0 FD        	bne sndwait
001764r 2  49 04        	eor #4
001766r 2               ;	sta SpeakerBit
001766r 2  CE rr rr     	dec sndtyp
001769r 2  D0 F0        	bne sndloop
00176Br 2               sndskip:
00176Br 2  68           	pla
00176Cr 2  AA           	tax
00176Dr 2  68           	pla
00176Er 2  A8           	tay
00176Fr 2  68           	pla
001770r 2  60           	rts
001771r 2               
001771r 2               
001771r 1               	.include "z80.asm"
001771r 2               ;------------------------------------------------------
001771r 2               ; z80.asm
001771r 2               ; spectrum stuff
001771r 2               ; adresses
001771r 2               
001771r 2               
001771r 2               ; Contains seperatly 1 bit set
001771r 2               
001771r 2               _bitmem0	= $f8
001771r 2               _bitmem1	= $f9
001771r 2               _bitmem2	= $fa
001771r 2               _bitmem3	= $fb
001771r 2               _bitmem4	= $fc
001771r 2               _bitmem5	= $fd
001771r 2               _bitmem6	= $fe
001771r 2               _bitmem7	= $ff
001771r 2               
001771r 2               ; constants
001771r 2               _bitvalue0	= $01
001771r 2               _bitvalue1	= $02
001771r 2               _bitvalue2	= $04
001771r 2               _bitvalue3	= $08
001771r 2               _bitvalue4	= $10
001771r 2               _bitvalue5	= $20
001771r 2               _bitvalue6	= $40
001771r 2               _bitvalue7	= $80
001771r 2               
001771r 2               _notbitvalue0	= $fe
001771r 2               _notbitvalue1	= $fd
001771r 2               _notbitvalue2	= $fb
001771r 2               _notbitvalue3	= $f7
001771r 2               _notbitvalue4	= $ef
001771r 2               _notbitvalue5	= $df
001771r 2               _notbitvalue6	= $bf
001771r 2               _notbitvalue7	= $7f
001771r 2               
001771r 2               
001771r 2               exx:
001771r 2  A5 62        		lda z80_c
001773r 2  A4 6E        		ldy z80_cp
001775r 2  84 62        		sty z80_c
001777r 2  85 6E        		sta z80_cp
001779r 2  A5 63        		lda z80_b
00177Br 2  A4 6F        		ldy z80_bp
00177Dr 2  84 63        		sty z80_b
00177Fr 2  85 6F        		sta z80_bp
001781r 2  A5 64        		lda z80_e
001783r 2  A4 70        		ldy z80_ep
001785r 2  84 64        		sty z80_e
001787r 2  85 70        		sta z80_ep
001789r 2  A5 65        		lda z80_d
00178Br 2  A4 71        		ldy z80_dp
00178Dr 2  84 65        		sty z80_d
00178Fr 2  85 71        		sta z80_dp
001791r 2  A5 rr        		lda scraddr
001793r 2  A4 72        		ldy z80_lp
001795r 2  84 rr        		sty scraddr
001797r 2  85 72        		sta z80_lp
001799r 2  A5 rr        		lda scraddr+1
00179Br 2  A4 73        		ldy z80_hp
00179Dr 2  84 rr        		sty scraddr+1
00179Fr 2  85 73        		sta z80_hp
0017A1r 2  60           		rts
0017A2r 2               
0017A2r 2               
0017A2r 1               eind_asm:
0017A2r 1               eop:					; End Of Program
0017A2r 1               
0017A2r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(35840-eind_asm + main))
0017A2r 1               
