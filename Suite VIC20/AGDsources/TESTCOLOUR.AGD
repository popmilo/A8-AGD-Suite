; Spectrum Next AGD Game Compiler skeleton program
; Jonathan Cauldwell, February 2018

; Define the play area in character/block cells
; Screen is divided into 32 columns and 24 rows (Spectrum and Next/Timex) or 25 rows (CPC)
; The 4 parameters for DEFINEWINDOW are top edge, left edge, height and width respectively

DEFINEWINDOW    1 1 22 30

DEFINECONTROLS  'Q' 'A' 'O' 'P' ' ' 'M' 'N' '1' '2' '3' '4'

DEFINEFONT
                       $00,$00,$00,$00,$00,$00,$00,$00 ; space 
                       $0c,$0c,$0c,$0c,$00,$00,$0c,$00 ; !
                       $cC,$cC,$00,$00,$00,$00,$00,$00 ; "
                       $00,$cC,$Fc,$cC,$cc,$fC,$cC,$00 ; #
                       $30,$30,$3c,$c0,$30,$0C,$f0,$30 ; $
                       $cc,$cc,$0c,$30,$30,$c0,$cc,$cc ; %
                       $30,$cc,$cc,$30,$cf,$cc,$33,$00 ; &
                       $30,$c0,$00,$00,$00,$00,$00,$00 ; '
                       $0c,$30,$30,$30,$30,$30,$0c,$00 ; (
                       $30,$0c,$0c,$0c,$0c,$0c,$30,$00 ; )
                       $00,$cc,$30,$fc,$30,$cc,$00,$00 ; *
                       $00,$30,$30,$FC,$30,$30,$00,$00 ; +
                       $00,$00,$00,$00,$00,$30,$30,$c0 ; ,
                       $00,$00,$00,$FC,$00,$00,$00,$00 ; -
                       $00,$00,$00,$00,$00,$00,$30,$00 ; .
                       $0c,$0C,$0c,$30,$30,$C0,$c0,$c0 ; /

                       $30,$cc,$cc,$cc,$cc,$cc,$30,$00 ; 0
                       $30,$f0,$30,$30,$30,$30,$30,$00 ; 1
                       $30,$cc,$0c,$0c,$30,$c0,$Fc,$00 ; 2
                       $30,$cc,$0c,$30,$0c,$cc,$30,$00 ; 3
                       $0c,$3c,$cc,$cc,$cc,$Fc,$0c,$00 ; 4
                       $fc,$c0,$c0,$f0,$0c,$cc,$30,$00 ; 5
                       $0c,$30,$c0,$f0,$cc,$cc,$30,$00 ; 6
                       $fc,$0c,$0c,$30,$C0,$c0,$c0,$00 ; 7
                       $30,$cc,$cc,$30,$cc,$cc,$30,$00 ; 8
                       $30,$cc,$cc,$3c,$0c,$30,$c0,$00 ; 9
                       $00,$30,$30,$00,$30,$30,$00,$00 ; :
                       $00,$30,$30,$00,$30,$30,$c0,$00 ; ;
                       $00,$0c,$30,$c0,$30,$0c,$00,$00 ; <
                       $00,$00,$FC,$00,$00,$FC,$00,$00 ; =
                       $00,$c0,$30,$0c,$30,$c0,$00,$00 ; >
                       $30,$CC,$0C,$30,$30,$00,$30,$00 ; ?

                       $00,$00,$3c,$cc,$cc,$C0,$3c,$00 ; @
                       $30,$cc,$cc,$fc,$cc,$cc,$cc,$00 ; A
                       $f0,$cc,$cc,$f0,$cc,$cc,$f0,$00 ; B
                       $30,$cc,$c0,$c0,$c0,$cc,$30,$00 ; C
                       $f0,$cc,$cc,$cc,$cc,$cc,$f0,$00 ; D
                       $fc,$c0,$c0,$fc,$c0,$c0,$Fc,$00 ; E
                       $fc,$c0,$c0,$f0,$c0,$c0,$c0,$00 ; F
                       $30,$cc,$c0,$c0,$cc,$cc,$3c,$00 ; G
                       $cc,$cc,$cc,$fc,$cc,$cc,$cc,$00 ; H
                       $30,$30,$30,$30,$30,$30,$30,$00 ; I
                       $0c,$0C,$0C,$0C,$0C,$cC,$30,$00 ; J
                       $cc,$cc,$cc,$f0,$cc,$cc,$cc,$00 ; K
                       $c0,$c0,$c0,$c0,$c0,$c0,$fc,$00 ; L
                       $cc,$cc,$fc,$cc,$cc,$cc,$cc,$00 ; M
                       $f0,$cc,$cc,$cc,$cc,$cc,$cc,$00 ; N
                       $30,$cc,$cc,$cc,$cc,$cc,$30,$00 ; O

                       $f0,$cc,$cc,$f0,$c0,$c0,$c0,$00 ; P
                       $30,$cc,$cc,$cc,$fc,$cc,$3c,$00 ; Q
                       $f0,$cc,$cc,$f0,$cc,$cc,$cc,$00 ; R
                       $30,$cc,$c0,$30,$0c,$cc,$30,$00 ; S
                       $fc,$30,$30,$30,$30,$30,$30,$00 ; T
                       $cc,$cc,$cc,$cc,$cc,$cc,$3c,$00 ; U
                       $cc,$cc,$cc,$cc,$cc,$cc,$30,$00 ; V
                       $cc,$cc,$cc,$cc,$fc,$cc,$cc,$00 ; W
                       $cc,$cc,$cc,$30,$cc,$cc,$cc,$00 ; X
                       $cc,$cc,$cc,$fc,$30,$30,$30,$00 ; Y
                       $fc,$0c,$0c,$30,$c0,$c0,$fc,$00 ; Z
                       $f0,$c0,$c0,$c0,$c0,$c0,$f0,$00 ; [
                       $C0,$c0,$c0,$30,$30,$0c,$0c,$0c ; \
                       $3c,$0c,$0c,$0c,$0c,$0c,$3c,$00 ; ]
                       $30,$cc,$00,$00,$00,$00,$00,$00 ; ^

                       $00,$00,$00,$00,$00,$00,$00,$fc ; _
                       $30,$c0,$00,$00,$00,$00,$00,$00 ; `
                       $00,$00,$3C,$CC,$CC,$CC,$3C,$00 ; a
                       $C0,$C0,$f0,$cc,$cc,$cc,$f0,$00 ; b
                       $00,$00,$3c,$c0,$c0,$c0,$3c,$00 ; c
                       $0c,$0c,$3c,$cc,$cc,$cc,$3c,$00 ; d
                       $00,$00,$30,$cc,$fc,$c0,$3c,$00 ; e
                       $3C,$30,$fc,$30,$30,$30,$30,$00 ; f
                       $00,$00,$3c,$cc,$cc,$3c,$cc,$30 ; g
                       $c0,$c0,$fc,$cc,$cc,$cc,$cc,$00 ; h
                       $30,$00,$f0,$30,$30,$30,$fC,$00 ; i
                       $30,$00,$f0,$30,$30,$30,$30,$c0 ; j
                       $c0,$c0,$cc,$f0,$f0,$cc,$cc,$00 ; k
                       $f0,$30,$30,$30,$30,$30,$fC,$00 ; l
                       $00,$00,$cc,$fc,$cc,$cc,$cc,$00 ; m
                       $00,$00,$fc,$cc,$cc,$cc,$cc,$00 ; n

                       $00,$00,$30,$cc,$cc,$cc,$30,$00 ; o
                       $00,$00,$f0,$cc,$cc,$cc,$f0,$c0 ; p
                       $00,$00,$3c,$cc,$cc,$cc,$3c,$0c ; q
                       $00,$00,$fc,$cc,$c0,$c0,$c0,$00 ; r
                       $00,$00,$3c,$c0,$30,$0c,$f0,$00 ; s
                       $30,$30,$fc,$30,$30,$30,$3C,$00 ; t
                       $00,$00,$cc,$cc,$cc,$cc,$fc,$00 ; u
                       $00,$00,$cc,$cc,$cc,$cc,$30,$00 ; v
                       $00,$00,$cc,$cc,$cc,$fc,$cc,$00 ; w
                       $00,$00,$cc,$cc,$30,$cc,$cc,$00 ; x
                       $00,$00,$cc,$cc,$fc,$30,$30,$00 ; y
                       $00,$00,$fc,$0c,$30,$c0,$fc,$00 ; z
                       $0C,$30,$30,$c0,$30,$30,$0C,$00 ; {
                       $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c ; |
                       $c0,$30,$30,$0C,$30,$30,$c0,$00 ; }
                       $00,$f0,$00,$00,$00,$00,$00,$00 ; ~
                       $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00 ; 

; Background blocks to be used in the game
; First we define the type - eg EMPTYBLOCK, PLATFORMBLOCK or DEADLYBLOCK
; Next 16 numbers are alternating graphic and attribute bytes from top to bottom

; Block 0

DEFINEBLOCK     EMPTYBLOCK      ; property
                0 0 0 0 0 0 0 0 7      ; ZX

; Sprites
; First argument defines the number of frames
; Then 32 bytes for each sprite frame (Spectrum and Timex) or 80 bytes (CPC).

DEFINESPRITE    2		; number of frames
204,51,48,12,207,243,15,240
63,252,255,215,255,219,255,255
255,255,255,219,255,215,63,252
15,240,207,243,48,12,204,51

0,0,204,51,48,12,207,243
15,240,63,92,63,108,63,252
63,252,63,108,63,92,15,240
207,243,51,204,204,51,0,0

DEFINESPRITE    2		; number of frames
136,34,32,8,138,162,10,160
42,168,170,150,170,158,170,170
170,170,170,158,170,150,42,168
10,160,138,162,32,8,136,34

0,0,136,34,32,8,138,162
10,160,42,88,42,120,42,168
42,168,42,120,42,88,10,160
138,162,34,136,136,34,0,0

DEFINESPRITE    2		; number of frames

68,17,16,4,69,81,5,80
21,84,85,65,85,73,85,85
85,85,85,73,85,65,21,84
5,80,69,81,16,4,68,17

0,0,68,17,16,4,69,81
5,80,21,4,21,36,21,84
21,84,21,36,21,4,5,80
69,81,17,68,68,17,0,0

; Screen layouts are best arranged in monospaced rows and columns
; DEFINESCREEN is followed by the block numbers that make up the screen
; Our play area is 22x22, so we need 22 rows of 22 columns
; The compiler will automatically compress screens

DEFINESCREEN
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

; Next we define the sprites that appear on the screen
; SPRITEPOSITION requires 4 numbers for image, type, Y coordinate and X coordinate in that order
; Coordinates are based on Spectrum screen, even for CPC so need to change for conversions

SPRITEPOSITION 0,0,88,128
SPRITEPOSITION 1,1,88,96
SPRITEPOSITION 2,2,88,64

; Define objects
; Spectrum: First number is attribute, then the starting room, next 2 are for Y and X coordinates then 32 for image.
; Timex: First number is the starting room, next 2 are for Y and X coordinates then 32 for image.
; CPC: First number is the starting room, next 2 are for Y and X coordinates then 80 for image.
; Coordinates are based on Spectrum screen, even for CPC so need to change for conversions

; Spectrum:
DEFINEOBJECT    66,255,160,104       ; attribute, room, Y, X
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0                          ; image data.
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
; Map.
; First argument is WIDTH, second is the startscreen
; We then arrange the map as a grid with correct width, monospaced here for readability
; where no room is present we put 255

MAP		WIDTH 3
		STARTSCREEN 0
		255 000 255
ENDMAP

; Sprite events

; Player controls
EVENT PLAYER
 IF A 0
   ANIMATE VERYSLOW
 ENDIF


EVENT SPRITETYPE1
 IF A 1
   ANIMATE VERYSLOW
 ENDIF

EVENT SPRITETYPE2
 IF A 2
   ANIMATE VERYSLOW
 ENDIF

EVENT SPRITETYPE3

EVENT SPRITETYPE4

EVENT SPRITETYPE5

EVENT SPRITETYPE6

EVENT SPRITETYPE7

EVENT SPRITETYPE8

EVENT INITSPRITE

EVENT MAINLOOP1
IF KEY FIRE
  ADD 1 TO A
  IF A 3
   LET A 0
  ENDIF
ENDIF

EVENT MAINLOOP2

EVENT INTROMENU
CLS
LET A 0

EVENT GAMEINIT

EVENT RESTARTSCREEN

EVENT FELLTOOFAR

EVENT KILLPLAYER

EVENT LOSTGAME

EVENT COMPLETEDGAME

EVENT NEWHIGHSCORE

EVENT COLLECTBLOCK
